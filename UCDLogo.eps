%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: Seal295_132.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: University Relations UC Davis%%CreationDate: 2/22/07%%BoundingBox: 0 0 140 143%%HiResBoundingBox: 0 0 139.0064 142.9307%%CropBox: 0 0 139.0064 142.9307%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors: %%DocumentCustomColors: (PANTONE 132 CV)%%+ (PANTONE 295 CV)%%CMYKCustomColor: 0 0.2350 1 0.3050 (PANTONE 132 CV)%%+ 1 0.5600 0 0.3400 (PANTONE 295 CV)%%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">seal2c [Converted]</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2007-02-22T10:57:01-08:00</xap:CreateDate>
         <xap:ModifyDate>2007-02-22T10:57:01-08:00</xap:ModifyDate>
         <xap:MetadataDate>2007-02-22T10:57:01-08:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>252</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAD8AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FUNqOpWOm2j3l9MtvbR05yP03NANtycry5Y448UjQZRgZGgxDW/za8vafLbLaA6ik45yyQt&#xA;x9Na06MK8tj8Jp+OavUdtYoEcPqtysejkbvZJoPzb1S+1S9tLHT1liaOc6dxDGblFGzq0i1IavHd&#xA;QBmJHtqc5yjGO1Hh7+XVtOjiACT70j/S35o+YdImMZnlt7eVfUaFBDKxIPwj0whcL3A9sw/G1meB&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:C1007C27C3F511DBAF838F0DE1D244AA</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:C1007C28C3F511DBAF838F0DE1D244AA</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:284edf70-57be-11db-bace-000d937a2254</stRef:instanceID>
            <stRef:documentID>uuid:CD3BDEE1591511DBA928BD729E50E41A</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -142.931 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 142.931 li139.006 142.931 li139.006 0 licpclp[1 0 0 1 0 0 ] concat116.606 85.4492 mo115.755 88.1729 112.691 94.4707 110.989 97.7046 cv109.287 100.939 107.754 103.492 106.734 105.365 cv105.711 107.237 101.967 109.791 99.7544 111.663 cv97.5415 113.535 95.1587 115.237 95.1587 115.237 cv95.1587 115.237 93.9673 114.386 93.6265 113.706 cv93.2856 113.025 92.2642 111.663 91.7544 112.344 cv91.2437 113.025 87.6685 113.535 86.1372 114.727 cv84.605 115.918 85.6265 117.451 85.6265 117.451 cv85.6265 117.451 86.647 119.153 84.4341 119.323 cv82.2222 119.493 80.1792 119.493 77.9663 120.514 cv75.7539 121.536 75.0728 123.067 69.9663 122.557 cv64.8594 122.046 56.5186 120.344 55.3271 120.174 cv54.1357 120.004 53.9653 119.663 53.7954 119.153 cv53.625 118.642 54.4761 116.94 54.3057 115.918 cv54.1357 114.897 50.3911 113.195 49.1992 113.025 cv48.0078 112.854 48.0078 113.706 48.0078 115.067 cv48.0078 116.429 49.0293 116.94 47.6675 116.429 cv46.9624 116.165 42.8354 113.896 38.8027 110.514 cv35.041 107.358 31.373 103.11 30.3052 101.96 cv28.0923 99.5771 26.0493 95.1514 25.3687 93.1089 cv24.6875 91.0664 23.3262 87.3218 23.4961 85.7896 cv23.6665 84.2578 22.8154 83.2363 22.1343 81.5342 cv21.4536 79.832 21.7939 80.1724 21.2832 74.2148 cv20.7729 68.2573 21.7939 63.6611 22.8154 58.7246 cv23.8364 53.7881 27.4116 47.8306 28.0923 45.4478 cv28.7729 43.0645 33.0288 37.6177 34.731 35.4048 cv36.4331 33.1919 44.4331 28.9365 45.7949 27.9155 cv47.1567 26.894 48.8589 24.6812 50.561 24.3408 cv52.2632 24 61.9658 21.1064 63.4976 20.5957 cv65.0298 20.085 68.7749 20.085 68.7749 20.085 cv70.4771 17.5317 li71.6685 20.085 li75.9238 20.7656 li75.98 20.4966 li78.0122 20.8584 81.6821 21.5771 83.2427 22.2979 cv85.4556 23.3193 92.4351 25.5322 94.6479 27.2344 cv96.8608 28.9365 96.8608 29.6177 96.8608 29.6177 cv96.8608 29.6177 97.0308 29.2769 99.0728 30.6387 cv101.116 32.0005 104.009 34.3838 105.372 36.2559 cv106.734 38.1284 113.712 46.4688 114.734 49.5327 cv115.755 52.5967 117.627 59.7461 117.797 61.7886 cv117.967 63.8311 118.479 68.938 118.649 74.2148 cv118.819 79.4917 117.458 82.7256 116.606 85.4492 cvcp132.606 71.8315 mo132.096 68.4272 133.118 63.3203 131.415 57.7031 cv129.713 52.0859 129.713 52.937 127.33 44.7666 cv124.947 36.5962 121.713 35.7451 120.18 33.7026 cv118.649 31.6602 117.458 28.4258 113.372 24 cv109.287 19.5742 104.009 18.0425 101.967 16.1699 cv99.9243 14.2974 93.7964 11.0635 91.7544 10.2124 cv89.7114 9.36133 86.647 9.53125 77.6255 7.31836 cv77.6255 7.31982 li77.1704 7.18164 76.5571 7.00879 75.7539 6.80811 cv73.7109 6.29736 67.0723 6.29736 64.0083 6.80811 cv60.9443 7.31836 55.8379 9.02051 52.7739 9.70166 cv49.6694 10.3916 48.0078 10.8931 44.7739 12.0845 cv41.5396 13.2764 40.0078 14.8081 35.7524 17.5317 cv31.4966 20.2549 29.2837 22.6382 27.0708 25.0215 cv24.8579 27.4048 24.6875 27.0645 21.2832 30.2983 cv17.8789 33.5322 18.73 34.7241 17.709 36.4263 cv16.6875 38.1284 17.3682 37.2773 15.3257 39.4902 cv13.2832 41.7026 11.4106 47.8306 10.73 50.2139 cv10.0488 52.5967 10.5596 52.4268 9.7085 54.4692 cv8.85742 56.5117 8.00635 58.2139 7.49561 61.6182 cv6.98535 65.0229 7.32568 70.4702 7.49561 74.0444 cv7.66602 77.6191 7.49561 79.4917 8.17676 83.7471 cv8.85742 88.0024 11.0703 93.7896 12.2617 96.1729 cv13.4531 98.5562 14.3047 101.96 16.3472 105.194 cv18.3896 108.429 19.5811 109.28 21.4536 112.003 cv23.3262 114.727 26.2197 118.301 28.9434 121.195 cv31.667 124.089 38.8159 128.855 41.0288 129.195 cv43.2417 129.536 45.4546 127.664 45.4546 127.664 cv45.4546 127.664 46.8164 127.833 47.3271 128.685 cv47.8379 129.536 48.8589 132.94 51.4121 134.132 cv53.9653 135.323 53.1143 134.472 55.6675 134.642 cv58.2207 134.813 59.7529 134.642 60.9443 134.983 cv70.7988 137.799 78.1372 136.175 80.6899 134.983 cv83.2427 133.792 88.0093 133.621 90.0513 132.6 cv92.0942 131.578 93.6265 128.685 93.9673 128.004 cv94.3071 127.323 94.9888 127.153 95.6685 127.493 cv96.3501 127.833 98.2222 129.025 99.4136 128.685 cv100.605 128.344 112.18 119.833 114.734 117.28 cv117.288 114.727 122.905 106.216 125.288 102.301 cv127.67 98.3857 129.713 89.1938 131.245 84.9385 cv132.777 80.6831 133.118 75.2363 132.606 71.8315 cvcpfalse sop/0 <</Name (PANTONE 295 CV)/0 [/DeviceCMYK] /CSA add_res/CSA /0 get_csa_by_name/MappedCSA /0 /CSA get_res/TintMethod /Subtractive/TintProc null/NComponents 4 /Components [ 1 0.56 0 0.34 ] >>/CSD add_res1 /0 /CSD get_res sepcs1 sepf69.9785 1.49219 mo70.1836 0.827637 70.6431 0.0107422 71.46 0.0107422 cv72.1753 0.164063 72.7373 0.776367 72.9414 1.49219 cv72.8901 2.15625 72.5327 2.76904 71.9204 3.07617 cv71.2051 3.02393 70.2852 2.81982 70.0811 1.95166 cv70.0811 1.84961 70.1318 1.69629 69.9785 1.59424 cv69.9277 2.41162 69.2637 2.97314 68.4976 3.17725 cv67.7822 3.07617 67.0166 2.56494 66.812 1.84961 cv66.3008 2.2583 66.4541 3.48438 65.4331 3.43311 cv64.769 3.48438 64.0537 3.02393 63.8496 2.36035 cv64.0537 1.64502 63.7983 0.521484 64.8198 0.368164 cv65.5854 0.317383 66.1479 0.776367 66.6587 1.33887 cv67.0166 0.623047 67.3228 0.214844 68.1396 0.0107422 cv68.9575 -0.0908203 69.8765 0.521484 69.9785 1.49219 cvcp/1 <</Name (PANTONE 132 CV)/CSA /0 get_csa_by_name/MappedCSA /0 /CSA get_res/TintMethod /Subtractive/TintProc null/NComponents 4 /Components [ 0 0.235 1 0.305 ] >>/CSD add_res1 /1 /CSD get_res sepcs1 sepf76.0063 0.980957 mo76.2104 1.64502 76.2104 2.15625 76.0063 2.81982 cv75.5464 3.48438 74.627 3.6377 74.0137 3.17725 cv73.4521 2.6665 73.0439 1.95166 73.2988 1.23633 cv73.708 -0.142578 75.4448 0.164063 76.0063 0.980957 cvcpf63.3389 1.49219 mo63.4409 2.30957 63.3389 3.22803 62.5215 3.58594 cv61.6025 3.8418 60.8872 3.17725 60.5298 2.56494 cv60.376 3.38135 59.9165 4.09668 59.0479 4.30078 cv58.333 4.30078 57.5669 3.94336 57.3623 3.17725 cv57.4136 2.41162 57.6177 1.33887 58.5879 1.23633 cv59.354 1.0835 60.0186 1.44092 60.4268 1.95166 cv60.5801 1.2876 60.9888 0.930176 61.4995 0.521484 cv62.3682 0.317383 63.1343 0.726074 63.3389 1.49219 cvcpf79.2759 1.23633 mo79.4282 1.95166 79.5815 2.56494 79.1733 3.17725 cv78.9175 3.89258 77.9468 3.99561 77.436 3.58594 cv76.7217 3.33105 76.8745 2.61572 76.6191 2.10498 cv76.9263 1.54297 76.8745 0.623047 77.6919 0.521484 cv78.4077 0.368164 79.02 0.623047 79.2759 1.23633 cvcpf82.7485 2.20752 mo82.9019 2.97314 82.5444 3.68848 81.9829 4.0459 cv81.0122 4.35254 80.3481 3.6377 79.8882 2.97314 cv79.8364 2.15625 80.1431 1.33887 80.9097 0.980957 cv81.7271 0.980957 82.5444 1.33887 82.7485 2.20752 cvcpf85.9146 2.97314 mo85.814 3.58594 85.7114 4.40381 84.9458 4.55713 cv84.1782 4.71045 83.6177 3.89258 83.3618 3.33105 cv82.9526 2.41162 83.8726 1.64502 84.5874 1.49219 cv85.2007 1.84961 85.7632 2.20752 85.9146 2.97314 cvcpf57.0049 3.17725 mo57.1069 4.14795 56.4429 4.81201 55.6255 5.0166 cv54.9619 4.96533 54.3999 4.65918 53.9399 4.0459 cv53.7358 4.71045 53.3784 5.57813 52.561 5.62988 cv51.9478 5.73145 51.3857 5.57813 50.9775 5.16992 cv50.6196 5.8335 50.3135 6.54932 49.4961 6.75293 cv48.6787 7.00879 48.1172 6.34424 47.6567 5.88477 cv47.4526 5.2207 47.7598 4.45459 48.168 3.94336 cv48.6279 3.48438 49.4448 3.48438 50.0068 3.68848 cv50.6196 4.19971 li51.0283 3.48438 51.1816 2.87109 51.9478 2.4624 cv52.8164 2.20752 53.4287 2.81982 53.7866 3.43311 cv54.1953 2.87109 54.3999 2.0542 55.166 1.74707 cv56.0337 1.79834 56.8003 2.30957 57.0049 3.17725 cvcpf88.8774 3.33105 mo89.0308 3.94336 89.0308 4.30078 88.8774 4.91406 cv88.4185 5.57813 87.4985 5.73145 86.8862 5.27197 cv86.2729 4.81201 85.8638 3.68848 86.4263 2.97314 cv87.0903 2.15625 88.52 2.2583 88.8774 3.33105 cvcpf92.3013 5.42529 mo92.5054 4.96533 92.9644 4.55713 93.3735 4.30078 cv94.2407 4.09668 95.0083 4.50537 95.2114 5.27197 cv95.3647 6.24268 94.9058 7.16211 93.9858 7.46826 cv93.2202 7.62109 92.5552 6.90576 92.3013 6.24268 cv92.2505 5.93604 92.3696 5.74023 92.1138 5.48486 cv91.9097 5.99561 91.6362 6.39551 91.0747 6.49756 cv90.2573 6.70166 89.5425 6.24268 89.3384 5.52734 cv88.7759 4.60791 89.7466 3.8418 90.3091 3.43311 cv91.5854 3.07617 92.0962 4.35254 92.3013 5.42529 cvcpf47.2998 5.78223 mo47.4019 6.49756 47.1465 7.05957 46.7881 7.62109 cv46.0737 7.97949 45.3589 7.97949 44.5928 7.62109 cv44.0303 6.95801 44.1328 6.14014 44.4902 5.42529 cv45.3076 4.60791 46.8398 4.71045 47.2998 5.78223 cvcpf98.7876 6.75293 mo98.9917 7.67285 98.5835 8.59229 97.6636 8.69434 cv97.2046 9.05176 96.6421 8.64307 96.2339 8.48975 cv95.6216 8.03076 95.5181 7.21289 95.6216 6.39551 cv95.9272 5.73145 96.6421 5.88477 97.0513 5.52734 cv97.9702 5.42529 98.4302 6.14014 98.7876 6.75293 cvcpf43.979 7.46826 mo44.2349 8.3877 43.7241 9.15381 43.0093 9.46045 cv42.2427 9.61377 41.5278 9.25586 41.1699 8.69434 cv40.8125 7.97949 41.2725 7.21289 41.6807 6.65088 cv42.4473 5.8335 43.9287 6.44678 43.979 7.46826 cvcpf101.75 8.48975 mo101.7 9.20508 101.443 10.1245 100.626 10.3286 cv99.8599 10.4819 99.4009 9.81787 99.0425 9.30664 cv98.8892 8.54102 99.145 7.77441 99.7583 7.36621 cv100.678 7.16211 101.597 7.57031 101.75 8.48975 cvcpf40.8125 8.9502 mo40.8633 9.66455 40.353 10.3799 39.689 10.5327 cv37.084 8.69434 38.0034 13.9556 35.3979 11.7593 cv34.6323 11.1455 34.8364 10.2266 35.1426 9.46045 cv36.0112 7.87695 38.1563 10.584 38.2075 8.08154 cv39.0244 7.05957 40.8633 7.57031 40.8125 8.9502 cvcpf105.02 10.1753 mo104.917 11.0439 li105.53 10.8398 106.705 10.4316 107.471 10.9414 cv107.982 11.4014 108.186 12.0146 108.084 12.7808 cv108.594 12.7808 109.463 12.2188 110.076 12.7808 cv110.689 13.3936 111.046 14.5171 110.536 15.3345 cv109.821 15.8452 109.055 16.0498 108.238 15.5898 cv107.88 15.0278 107.625 14.4658 107.726 13.7505 cv107.063 13.4961 106.194 14.2104 105.53 13.5977 cv104.866 13.0356 104.764 12.1162 104.815 11.4014 cv104.253 11.9126 103.384 12.0146 102.72 11.7593 cv102.108 11.3511 101.597 10.4819 101.955 9.71533 cv102.72 8.03076 104.815 8.69434 105.02 10.1753 cvcpf67.5273 9.10254 mo67.1738 10.6108 65.9858 12.6577 65.5972 13.6768 cv65.5078 14.481 65.5811 15.4136 65.9434 16.8159 cv65.605 17.1289 64.9473 17.269 64.2324 17.269 cv63.6196 16.707 63.7666 14.9517 63.3066 14.2871 cv62.0166 12.2632 59.3799 10.8203 59.457 10.4316 cv60.0186 10.1753 60.7339 9.91992 61.3979 10.1753 cv61.9722 10.8965 63.6196 11.8994 64.3027 12.9531 cv64.8198 11.6563 65.2861 10.7241 65.4902 9.39648 cv66.0522 9.08984 66.812 9.00049 67.5273 9.10254 cvcpf34.9385 11.7593 mo35.0918 12.627 34.5811 13.2402 33.917 13.5977 cv31.5674 12.3208 33.2529 15.6411 31.3628 15.6914 cv29.8818 15.5898 li29.6777 16.4072 29.9834 17.6841 28.8091 17.8887 cv28.145 17.9395 27.5317 17.8887 27.0728 17.5308 cv27.3784 18.3994 27.1738 19.9321 25.9487 20.2378 cv24.5181 20.1362 li24.7222 21.106 24.2119 21.9238 23.4961 22.4341 cv22.9346 22.6387 22.1177 22.6387 21.6577 22.1787 cv21.0449 21.7705 21.4023 20.7485 21.2998 20.2378 cv21.6069 19.7275 21.9131 19.4717 22.4233 19.1147 cv23.9053 19.2676 li23.9565 18.501 24.0586 17.1226 25.1313 16.918 cv25.7959 16.8667 26.3574 17.0708 26.8164 17.5308 cv26.6123 16.7139 26.5107 14.9258 27.7876 14.7217 cv29.4219 14.8232 li29.1665 14.1084 29.2686 13.1382 29.7793 12.627 cv30.3926 12.1162 31.2095 12.3721 31.8735 12.627 cv32.0776 12.8828 li32.6401 12.2188 31.9248 10.8398 33.2017 10.6865 cv33.917 10.6353 34.7344 11.0439 34.9385 11.7593 cvcpf57.8408 11.8101 mo57.854 12.187 55.9194 12.1738 55.2041 12.7871 cv55.2803 14.1914 56.2388 16.5605 56.749 18.501 cv56.2388 18.7061 55.8296 19.2168 55.166 19.0127 cv54.3481 17.1226 54.2974 14.8232 53.0713 13.2402 cv50.6196 14.0063 li50.3516 13.4448 50.2749 13.1191 50.3647 12.627 cv52.561 11.6055 54.9619 11.1455 57.3623 10.6865 cv57.8408 11.8101 licpf74.5249 12.627 mo74.627 13.1382 74.3721 13.4448 74.0137 13.7505 cv73.5034 13.8535 73.0439 13.5977 72.7881 13.2402 cv72.7881 12.7808 72.686 12.1675 73.2988 12.0146 cv73.8096 11.9634 74.3208 12.1162 74.5249 12.627 cvcpf81.4614 15.0518 mo81.4341 15.4546 81.4839 15.5122 81.6187 15.915 cv81.9761 16.7837 82.4038 17.314 83.7183 17.5947 cv84.4536 17.6143 85.354 17.5308 85.9146 16.8159 cv86.5796 15.9985 86.7329 14.9766 86.6304 13.8535 cv86.0679 11.708 83.4634 11.7593 82.1353 12.8828 cv81.7524 13.4248 81.5659 13.5879 81.4614 15.0518 cvcp79.6489 14.9263 mo79.6733 12.9121 80.0962 12.3838 81.1138 11.5547 cv82.6978 10.2778 85.5063 10.1245 87.0396 11.6563 cv88.061 12.9341 88.5718 14.7725 88.0093 16.4585 cv87.397 17.9902 85.814 19.1147 84.1782 19.2676 cv82.3403 19.1147 80.3989 17.9395 79.7856 16.0498 cv79.6929 15.6084 79.644 15.3579 79.6489 14.9263 cvcpf47.4019 13.8535 mo47.8613 16.4585 49.394 18.604 50.3647 20.9531 cv49.9561 21.3105 49.4961 21.5156 49.0366 21.5664 cv47.5039 19.5742 47.6567 16.7646 45.563 15.0791 cv45.7671 14.1602 46.7378 14.1602 47.4019 13.8535 cvcpf98.0728 16.4585 mo98.3794 17.02 98.022 17.7354 97.561 18.042 cv96.2847 17.48 95.2632 16.2544 93.8843 15.9473 cv93.3032 17.2632 li94.2407 18.0928 94.9565 18.3994 95.979 18.9102 cv96.1831 19.5742 95.6216 19.8804 95.3647 20.3403 cv94.5483 19.9321 93.8462 19.7148 93.0796 19.2036 cv92.8755 19.0503 92.7153 18.9102 92.4595 18.9102 cv91.7837 19.7529 91.4458 21.1826 90.8765 21.6494 cv89.5933 20.8511 li90.9731 18.6548 91.8403 16.2544 92.6587 13.8535 cv94.5991 14.3643 96.1831 15.7432 98.0728 16.4585 cvcpf113.601 15.9473 mo113.499 16.7139 113.55 17.8374 112.528 18.042 cv111.864 18.2461 110.996 17.8887 110.689 17.1733 cv110.178 16.2026 110.893 15.1816 111.762 14.8232 cv112.681 14.5684 113.397 15.1816 113.601 15.9473 cvcpf43.3667 17.4282 mo41.8853 17.8374 39.791 18.3481 39.5864 20.2378 cv41.4766 21.209 43.2642 18.7568 45.3589 20.1362 cv46.3799 20.9019 45.9717 22.1787 45.7163 23.2012 cv44.6943 24.8867 42.7534 25.3975 40.915 25.6523 cv40.5054 25.2441 40.251 24.7837 40.2002 24.2729 cv41.834 24.0181 43.8257 24.0688 44.5928 22.3325 cv44.7969 21.6685 44.3369 21.1577 43.7241 21.209 cv41.834 21.2598 39.2285 23.7627 38.0034 21.106 cv37.8501 18.5522 39.8423 17.0708 41.8853 16.2026 cv42.7534 16.0498 43.2134 16.7646 43.3667 17.4282 cvcpf116.461 18.2969 mo116.614 19.2168 115.796 20.1362 114.98 20.3403 cv114.213 20.3911 113.447 19.9824 113.243 19.2676 cv113.039 18.501 113.243 17.5308 114.112 17.1733 cv115.083 16.7139 116.104 17.3774 116.461 18.2969 cvcpf119.118 20.5957 mo119.475 21.6685 118.708 22.5371 117.891 22.792 cv117.227 23.1494 116.512 22.5371 116.206 21.9746 cv115.899 21.0049 116.104 19.7783 117.176 19.5229 cv118.096 19.2168 118.862 19.8804 119.118 20.5957 cvcpf21.811 23.2012 mo22.1685 24.2729 21.2998 24.9883 20.4321 25.6523 cv19.9722 25.7036 19.5635 25.5503 19.2061 25.2441 cv19.4609 25.9595 19.5635 26.9805 19.002 27.6958 cv18.3374 28.1558 17.3672 28.4111 16.6519 27.9507 cv16.0396 27.4404 16.0898 26.4697 16.2944 25.7544 cv16.8052 24.6826 18.1846 24.6826 19.002 25.04 cv18.5933 24.4263 18.6948 23.4561 18.8486 22.792 cv19.4609 21.6685 21.6577 21.7705 21.811 23.2012 cvcpf121.211 23.3027 mo121.569 24.0688 120.497 24.8354 121.364 25.2441 cv122.233 25.04 122.999 25.5503 123.306 26.2656 cv123.765 26.8276 122.948 27.2358 123.05 27.8491 cv123.918 28.1558 124.889 27.645 125.145 28.8193 cv125.093 29.5859 124.684 30.5562 123.817 30.6582 cv123.101 30.7095 122.846 30.1475 122.438 29.688 cv122.693 28.3081 li122.13 28.3604 121.211 28.3604 120.751 27.8491 cv120.087 27.3379 120.394 26.3169 120.497 25.6523 cv119.628 25.499 118.708 25.5503 118.147 24.6304 cv117.839 23.6099 118.606 22.8433 119.271 22.4341 cv120.087 22.3325 120.905 22.4858 121.211 23.3027 cvcpf102.567 23.4053 mo102.772 24.1714 102.364 24.8354 101.75 25.1416 cv101.035 25.2441 100.678 24.5288 100.524 24.0181 cv100.372 23.3535 100.984 23.0474 101.495 22.792 cv102.159 22.5874 102.209 23.2012 102.567 23.4053 cvcpf32.8442 27.4917 mo32.0596 27.1846 31.772 26.4697 31.2607 26.0103 cv31.4448 25.5884 31.9893 25.043 32.3535 24.7368 cv32.6968 24.4487 32.856 24.394 33.2017 24.1714 cv33.9297 23.8965 34.7344 24.1206 34.7852 24.8867 cv34.6826 26.0103 33.6611 26.7764 32.8442 27.4917 cvcp35.7622 26.5596 mo35.8896 26.4829 36.9307 24.8354 36.2661 23.6606 cv35.7559 22.5371 34.6641 22.3584 33.5596 22.4341 cv32.7617 22.5708 32.1338 22.8765 31.3477 23.5361 cv30.4038 24.3296 29.3477 25.5498 29.0132 26.4697 cv30.8008 28.2065 32.7417 29.688 33.917 31.7822 cv35.4302 30.5054 li35.7173 29.9814 34.3955 29.6748 34.0381 28.8574 cv34.3037 28.1948 34.7886 28.2251 34.9565 28.0459 cv36.1299 27.7998 37.7617 28.5845 38.062 28.5098 cv38.459 28.2764 38.731 27.583 39.0122 27.2422 cv39.2163 26.9355 36.7192 26.3677 35.7622 26.5596 cvcpf60.7842 25.8564 mo60.0693 26.3677 li56.2896 26.2656 52.3569 27.5933 48.7808 27.083 cv48.7295 26.8784 48.3213 26.623 48.6279 26.3677 cv52.561 26.2148 56.5449 25.1929 60.6826 25.499 cv60.7842 25.8564 licpf112.273 27.6958 mo112.988 28.7178 114.98 29.9941 113.499 31.1694 cv112.988 31.5269 li112.375 31.0669 112.681 30.1987 112.273 29.688 cv111.456 28.666 110.23 27.7979 108.851 28.3081 cv108.084 28.8193 107.343 29.3237 106.986 30.2432 cv106.833 31.5713 107.222 32.4019 108.142 33.27 cv108.652 33.9336 109.866 34.2021 109.884 34.6235 cv109.016 36.207 109.023 35.7666 108.901 35.709 cv106.035 34.0488 105.326 32.0376 105.53 30.4028 cv105.734 28.8193 106.655 27.3379 108.238 26.7251 cv109.667 26.4189 111.251 26.623 112.273 27.6958 cvcpf92.0454 27.8491 mo92.1978 28.0024 92.7095 28.2573 92.5552 28.7178 cv88.2651 28.8193 84.0259 28.0024 79.6841 27.9507 cv79.2759 27.7979 79.48 27.3892 79.4282 27.083 cv83.4136 26.7764 88.2134 27.0317 92.0454 27.8491 cvcpf60.8872 27.8491 mo60.1846 28.416 44.7969 33.5698 36.7773 36.4302 cv36.4194 36.3281 35.8579 36.6343 35.7559 36.1748 cv36.1646 34.7954 37.9009 35.2559 38.8203 34.438 cv45.9717 31.4243 53.3784 29.0747 60.8872 26.9805 cv60.8872 26.9805 61.5894 27.2817 60.8872 27.8491 cvcpf16.9077 29.0747 mo16.9585 29.8921 16.8564 30.8115 16.0396 31.1694 cv15.6309 31.3735 15.0684 31.2202 14.5576 31.271 cv14.4556 31.9351 15.4771 32.9063 14.5576 33.6211 cv14.0981 34.1831 13.3833 34.1318 12.8721 34.438 cv13.1787 35.2559 13.3315 36.1748 12.7188 36.8901 cv12.2588 37.4009 11.646 37.605 10.8799 37.5029 cv11.085 38.4224 11.3906 39.4438 10.625 40.3633 cv10.2671 40.8232 9.60303 40.6191 9.29639 41.1807 cv9.55225 41.896 9.80713 42.7646 9.55225 43.5303 cv9.29639 44.8076 6.58936 43.7856 8.0708 45.3696 cv8.32617 46.7485 7.30469 47.6172 6.33398 48.1787 cv6.84424 48.6895 6.94727 49.5063 6.74268 50.1709 cv6.43604 50.7324 5.77148 51.0898 5.26123 51.3965 cv5.97656 51.9077 5.92529 52.9292 5.72119 53.6948 cv5.36328 54.2568 4.64844 54.6143 4.03516 54.8188 cv4.49463 55.2783 4.80176 55.9937 5.00586 56.6577 cv4.69873 57.5264 4.44434 58.2925 3.42285 58.4971 cv2.50342 58.4971 1.78857 57.6792 1.5835 56.9131 cv1.78857 55.8398 2.29883 54.666 3.5249 54.563 cv3.06494 54.0015 2.40088 53.3374 2.65625 52.3677 cv3.11621 51.6006 3.83105 51.1411 4.64844 50.9883 cv3.42285 50.375 3.62695 49.2002 4.13721 48.332 cv5.26123 47.7188 li4.80176 46.9014 4.54639 45.7271 5.00586 44.8584 cv5.5166 44.501 6.07861 43.8882 6.74268 44.1436 cv6.74268 43.1729 6.07861 42.2026 7.1001 41.334 cv7.50879 40.9253 8.73438 40.874 8.0708 39.9546 cv7.56006 39.4951 7.96826 38.7798 8.17236 38.269 cv8.37695 36.6855 11.646 38.167 9.90967 36.2769 cv9.60303 35.2559 10.3179 34.438 11.1353 34.0806 cv12.0039 33.8252 li12.0039 33.2637 11.4419 32.293 12.0039 31.6284 cv12.4639 31.0669 13.1787 30.9653 13.9448 31.0161 cv13.5874 30.3516 13.5874 29.3818 13.9448 28.5645 cv14.3022 28.1558 14.7109 27.8999 15.1709 27.8491 cv16.0396 27.8491 16.7031 28.2065 16.9077 29.0747 cvcpf27.0728 29.79 mo27.0728 30.1475 li25.7441 31.2202 24.7734 32.3438 24.2627 33.8252 cv24.8271 34.2285 25.4795 34.6563 25.5591 34.5532 cv27.3276 31.8843 li27.8384 31.9863 28.2471 32.5483 28.5537 33.0078 cv27.8892 33.9272 26.5806 35.1089 27.0337 35.5049 cv27.9404 36.5322 li29.0132 35.5107 30.29 34.1318 31.0054 32.7524 cv31.6182 33.0078 32.2314 33.4678 31.8735 34.2334 cv27.9404 38.8823 li26.2041 37.3496 24.1606 35.5107 21.9131 34.5913 cv22.5771 32.6504 24.314 31.0161 25.8462 29.1768 cv26.4082 29.0234 26.7148 29.4834 27.0728 29.79 cvcpf127.239 31.6284 mo127.29 32.395 126.78 32.9565 126.116 33.2119 cv125.348 33.4165 124.737 33.0078 124.43 32.395 cv124.43 31.833 124.327 31.271 124.788 30.9136 cv125.348 29.688 127.239 30.4541 127.239 31.6284 cvcpf129.333 34.8472 mo129.026 35.2046 129.231 35.7666 128.822 36.0728 cv129.588 36.4814 131.171 36.4302 131.019 37.7578 cv131.122 38.4731 130.61 38.6777 130.303 39.2393 cv130.508 40.0063 131.53 39.291 131.887 39.8525 cv134.033 40.7212 130.61 43.1221 133.471 43.0195 cv134.033 43.5811 134.441 44.3477 134.083 45.1138 cv133.981 45.5737 133.214 45.7778 133.368 46.3394 cv133.726 46.4932 134.237 46.4932 134.594 46.6973 cv135.258 47.3101 135.309 48.332 134.849 49.0474 cv134.237 49.6597 li134.901 50.1709 136.177 50.375 136.177 51.499 cv136.177 52.1621 135.821 52.6226 135.463 53.082 cv135.821 53.6948 136.995 53.7461 137.046 54.666 cv136.995 55.4316 136.74 56.0957 136.177 56.6577 cv136.792 57.1685 137.761 57.3218 137.915 58.2407 cv137.965 59.0586 137.25 59.7739 136.535 60.0801 cv135.667 60.0288 134.901 59.7739 134.697 58.8545 cv134.849 58.1396 134.798 57.2197 135.667 56.9131 cv134.952 56.7085 134.186 56.3511 133.981 55.5342 cv133.776 54.666 134.39 54.1035 134.697 53.4395 cv134.083 53.1846 132.858 52.6226 133.01 51.6006 cv132.959 50.9365 133.522 50.5283 133.624 49.9155 cv132.959 49.7622 132.347 49.2515 131.989 48.6895 cv131.631 47.4634 133.471 45.9312 131.274 45.7271 cv130.661 45.2163 130.917 44.1938 131.019 43.5303 cv131.734 42.4072 129.742 42.8154 129.538 41.7935 cv129.18 41.0781 129.639 40.312 130.047 39.7505 cv129.333 39.3418 128.311 39.5459 127.955 38.6265 cv127.341 37.8101 128.668 36.9414 127.699 36.4302 cv127.035 36.5322 126.421 36.1748 126.116 35.562 cv125.961 34.5913 126.319 33.6719 127.239 33.3657 cv128.414 32.9565 129.129 33.9272 129.333 34.8472 cvcpf20.4321 36.8901 mo21.6069 39.2393 22.8838 41.3848 24.876 43.1729 cv24.6201 43.939 24.3203 45.1655 23.8413 45.3628 cv21.4917 44.9541 18.1846 44.8584 15.6816 45.2666 cv15.4771 44.3477 15.9688 43.4536 16.3965 43.0518 cv18.1973 43.2686 20.4829 43.377 22.1685 43.0195 cv21.6577 41.3848 20.3809 40.0063 19.4609 38.5249 cv19.5635 37.8608 19.666 37.0435 20.4321 36.8901 cvcpf116.45 38.689 mo116.673 38.4292 116.994 37.9316 117.075 37.5029 cv116.308 37.5029 115.714 37.5664 115.076 37.918 cv115.215 38.4482 115.592 38.9839 115.951 39.2393 cv116.145 38.9243 116.247 38.9243 116.45 38.689 cvcp117.611 39.8228 mo116.611 41.2202 115.963 42.6367 115.209 44.1436 cv114.96 44.5137 114.367 43.479 114.009 43.1729 cv113.952 42.4316 115.171 40.6636 115.005 40.4204 cv113.958 39.5273 113.843 38.7417 113.333 38.333 cv112.362 38.3848 111.366 39.3418 111.175 38.9336 cv110.536 37.4009 li112.885 36.4814 115.592 36.4814 117.789 35.3062 cv118.504 36.0215 119.118 36.584 119.526 37.5029 cv118.903 38.0757 118.102 39.1348 117.611 39.8228 cvcpf61.7549 40.3633 mo60.8872 40.6191 59.7632 40.6699 58.8438 40.4658 cv58.5879 39.9038 59.2012 39.6484 59.5586 39.5972 cv60.5298 39.6484 61.3979 39.3418 61.7549 40.3633 cvcpf56.5962 40.4658 mo56.0854 40.7212 55.3701 40.9766 54.7573 40.7212 cv54.604 40.1079 55.3193 40.0063 55.6255 39.8525 cv55.9321 40.1587 56.8521 39.6484 56.5962 40.4658 cvcpf66.0459 41.6919 mo65.1265 41.2827 63.4922 41.1299 63.3389 40.1079 cv64.4116 40.2617 65.8418 40.6191 66.0459 41.6919 cvcpf77.2319 40.4658 mo77.2319 40.8232 li75.8022 41.1299 74.5762 41.7935 73.146 42.0493 cv72.9414 41.7935 li73.9634 40.6191 75.6997 40.0063 77.2319 40.4658 cvcpf80.5005 40.5679 mo80.604 40.874 80.3989 41.1299 80.1431 41.1807 cv79.6333 41.334 79.3267 40.9253 78.8159 41.0781 cv78.8159 40.3633 li79.3774 40.4146 80.0923 40.1587 80.5005 40.5679 cvcpf52.9185 40.5679 mo53.2246 41.5889 52.0498 41.1807 51.5903 41.4355 cv50.8237 41.334 49.8022 41.7427 49.2407 41.0781 cv49.2407 40.7212 li50.4155 40.4658 51.8457 40.6191 52.9185 40.5679 cvcpf84.5874 41.0781 mo84.5874 41.4355 li83.7183 41.7427 83.2593 41.4878 82.4937 41.1807 cv82.647 40.4146 84.23 40.5679 84.5874 41.0781 cvcpf91.3296 41.1807 mo91.1255 41.7935 90.4106 41.5889 89.9507 41.7935 cv89.7466 41.8452 89.645 41.5889 89.4907 41.4355 cv89.3882 41.0273 89.8491 40.9766 90.104 40.8232 cv90.5132 40.9766 91.228 40.5166 91.3296 41.1807 cvcpf88.4692 41.1807 mo88.7759 41.8452 88.061 41.7427 87.7544 41.9468 cv87.2437 41.5889 85.9673 42.1509 86.0181 41.1807 cv86.6821 40.8232 87.8052 40.8232 88.4692 41.1807 cvcpf61.3979 42.917 mo60.9888 43.2749 60.1206 43.2749 59.6611 42.917 cv59.5586 42.4575 59.8652 42.3555 60.1719 42.2026 cv60.5801 42.4072 61.3979 42.2026 61.3979 42.917 cvcpf57.8218 42.5601 mo57.9751 43.6836 56.9023 42.7646 56.4941 43.0195 cv56.3916 42.917 li56.4429 42.2534 57.4136 42.1001 57.8218 42.5601 cvcpf55.0127 43.2749 mo54.7573 43.5303 54.6553 43.2236 54.3999 43.1729 cv54.3999 43.1899 55.5234 42.3555 55.0127 43.2749 cvcpf76.9761 43.1729 mo75.7505 43.6836 74.3721 44.1938 73.0439 44.1436 cv72.8394 44.1436 72.9414 43.8364 72.9414 43.6323 cv74.1675 43.1221 75.4956 42.5083 76.9761 42.917 cv76.9761 43.1729 licpf80.2964 43.5303 mo79.939 43.939 78.9683 43.7856 78.4585 43.6323 cv78.2544 43.377 77.8452 43.3262 78.3052 43.0195 cv79.02 43.0708 79.8882 42.917 80.2964 43.5303 cvcpf91.4321 43.6323 mo91.0229 44.1436 90.3091 44.2456 89.6958 44.041 cv89.4907 43.7344 89.4907 43.5303 89.8491 43.2749 cv90.4106 43.4282 91.3296 42.7646 91.4321 43.6323 cvcpf88.1128 43.6323 mo88.0093 44.3477 87.0396 44.3477 86.5288 44.1436 cv86.1714 44.0923 86.1196 43.7344 86.1714 43.4282 cv86.8345 43.479 87.6011 43.2236 88.1128 43.6323 cvcpf123.306 44.8584 mo122.897 45.5737 121.901 45.7588 121.237 46.269 cv120.164 46.7803 119.066 47.3613 118.044 47.9233 cv118.454 49.4048 119.118 50.7842 119.883 52.1118 cv119.475 52.4692 118.914 52.7759 118.402 52.4692 cv117.891 50.375 116.512 48.6382 115.848 46.5952 cv118.249 46.5439 120.241 44.603 122.335 43.4282 cv122.999 43.5303 123.05 44.3477 123.306 44.8584 cvcpf84.0767 44.041 mo83.5142 44.1436 82.5952 44.2969 82.1353 43.8882 cv82.2378 43.2749 83.1577 43.6323 83.7183 43.5303 cv83.8218 43.6836 84.0767 43.7856 84.0767 44.041 cvcpf52.561 49.4048 mo51.2837 49.6089 50.3257 49.5645 48.7236 49.5962 cv48.7808 44.2139 li49.4512 44.1436 51.2837 44.1436 52.3057 44.041 cv52.7397 45.7334 52.561 47.9233 52.561 49.4048 cvcp53.3589 42.6616 mo51.7754 43.0195 49.2729 42.9365 47.8105 43.1729 cv47.7842 50.8091 li53.5889 50.5283 li53.876 50.4517 53.7163 42.688 53.3589 42.6616 cvcpf58.4346 44.8584 mo58.4346 45.2666 li57.4644 45.2666 li57.2095 45.0625 57.4644 44.6543 57.7202 44.6543 cv58.0259 44.5518 58.2305 44.8076 58.4346 44.8584 cvcpf61.6528 45.2666 mo61.4995 45.7778 60.6826 45.6245 60.2734 45.4712 cv60.0693 45.2666 li60.0693 44.501 61.3979 44.501 61.6528 45.2666 cvcpf66.3008 46.8506 mo65.2798 46.8506 63.9004 46.4932 63.2363 45.7271 cv64.2578 45.3696 65.8926 45.7271 66.3008 46.8506 cvcpf79.6841 45.9819 mo79.5815 46.2891 79.1226 46.2378 78.8159 46.2378 cv78.5591 46.1353 78.4077 45.5737 78.8159 45.6245 cv79.1733 45.5229 79.4282 45.6753 79.6841 45.9819 cvcpf90.9214 45.8799 mo90.9731 46.4932 90.2573 46.4419 89.8491 46.5952 cv89.4399 46.5952 89.0308 46.6465 88.7251 46.3394 cv88.52 45.8799 89.0825 45.6753 89.3384 45.6245 cv89.8999 45.6753 90.564 45.4204 90.9214 45.8799 cvcpf83.3618 46.3394 mo83.3618 46.4932 li82.1353 46.4932 li82.1353 45.9819 li82.5444 46.0332 83.106 45.8286 83.3618 46.3394 cvcpf87.1411 46.3394 mo87.1929 46.7485 86.7329 46.9014 86.4263 46.8506 cv85.8638 46.8506 85.3032 46.9526 84.9458 46.4932 cv85.4048 46.0845 86.5796 45.6753 87.1411 46.3394 cvcpf21.5557 49.7622 mo21.709 50.4263 21.3516 51.1411 20.9424 51.7539 cv20.4321 51.7539 li18.4907 50.4771 16.3965 49.5063 14.0981 49.1489 cv13.8423 48.4341 14.3022 47.7188 14.7109 47.106 cv16.8564 48.2295 19.1035 49.2515 21.5557 49.7622 cvcpf61.04 47.8213 mo60.4268 48.3828 59.7119 47.8213 59.0479 47.8213 cv58.8438 47.5659 li59.0986 46.5952 60.376 47.4121 60.8872 47.3101 cv61.1421 47.4121 60.9888 47.6675 61.04 47.8213 cvcpf57.0049 47.4634 mo56.9023 47.6675 56.647 47.5146 56.4941 47.5659 cv56.4429 47.3101 56.8521 47.2588 57.0049 47.4634 cvcpf65.79 48.4341 mo65.79 48.7915 li64.6665 48.6895 63.543 48.4341 62.5215 48.0762 cv62.3174 47.6172 62.7764 47.5659 62.981 47.4634 cv64.0029 47.6172 65.0752 47.5659 65.79 48.4341 cvcpf92.9136 47.8213 mo93.0669 48.2295 92.5054 48.4854 92.147 48.5361 cv91.7896 48.5869 91.2788 48.5361 91.3296 48.0762 cv91.688 47.6172 92.5552 47.3613 92.9136 47.8213 cvcpf79.2759 48.5361 mo78.6626 48.8428 77.897 49.0981 77.2319 48.7915 cv76.9263 48.5361 77.1812 48.1274 77.436 48.0762 cv78.1011 48.1787 79.02 47.77 79.2759 48.5361 cvcpf82.3403 48.6895 mo81.8804 48.8428 81.1646 48.9443 80.7563 48.5361 cv81.063 48.0254 81.7271 48.0254 82.2378 48.332 cv82.3911 48.3828 82.3403 48.5361 82.3403 48.6895 cvcpf89.8491 48.1787 mo90.104 48.4341 89.6958 48.5361 89.6958 48.7915 cv89.1343 48.9443 88.2651 49.0981 87.7544 48.6895 cv87.9595 47.7188 89.0308 48.1274 89.8491 48.1787 cvcpf86.1714 48.4341 mo86.3247 49.4556 84.895 49.1489 84.3325 49.0474 cv83.9243 48.1274 85.5581 48.2803 86.1714 48.4341 cvcpf57.8218 50.0171 mo56.9531 50.0684 55.5742 50.5283 55.0127 49.6597 cv55.9834 49.4048 57.4644 48.9956 57.8218 50.0171 cvcpf61.7549 49.9155 mo61.7549 50.2729 li61.04 50.5283 60.2227 50.3242 59.5586 50.0171 cv59.4058 49.6089 59.8145 49.5576 60.0693 49.4048 cv60.5801 49.7109 61.4995 49.3022 61.7549 49.9155 cvcpf65.79 50.8857 mo65.228 51.2939 64.2075 50.7842 63.4922 50.5283 cv63.7983 49.6089 64.9731 50.4263 65.6885 50.5283 cv65.79 50.8857 licpf78.9175 50.7842 mo78.5591 50.9365 77.9468 50.9365 77.5894 50.7842 cv77.4878 50.4771 77.6919 50.2217 77.9468 50.1709 cv78.9175 50.2729 li78.9175 50.7842 licpf82.3403 50.6304 mo82.4429 50.9365 82.0845 51.1924 81.8804 51.2432 cv81.3696 51.3457 80.9604 51.1924 80.6548 50.8857 cv80.5005 50.3242 81.3179 50.4771 81.6255 50.2729 cv81.9321 50.2729 82.186 50.375 82.3403 50.6304 cvcpf85.9146 51.1411 mo85.4556 51.5498 84.6382 51.3965 84.0767 51.2432 cv83.7183 50.8857 li84.1274 50.1196 84.9458 50.6304 85.6597 50.6304 cv85.814 50.7842 86.0181 50.8857 85.9146 51.1411 cvcpf89.5933 50.5283 mo89.7466 50.9365 89.2349 51.2432 88.8774 51.1411 cv88.3169 51.0391 87.6519 51.3457 87.2437 50.8857 cv87.4985 50.0171 88.8774 50.4771 89.5933 50.5283 cvcpf92.5552 52.1118 mo92.5552 52.4692 92.147 52.8267 91.7896 52.8267 cv91.0747 52.5718 90.2573 53.4395 89.9507 52.4692 cv90.6665 52.0098 91.8403 51.8564 92.5552 52.1118 cvcpf61.04 52.2139 mo60.9888 53.7461 59.2524 52.4692 58.4346 52.8267 cv58.2305 52.6226 li58.4346 51.499 59.9165 52.1118 60.6826 52.1118 cv60.7339 52.2646 60.8872 52.2139 61.04 52.2139 cvcpf56.4941 52.3677 mo56.4941 52.5718 56.2388 52.6733 56.1367 52.8267 cv55.7793 52.8267 55.5234 52.6733 55.6255 52.2139 cv55.8809 51.958 56.2388 52.2139 56.4941 52.3677 cvcpf53.6846 52.7251 mo52.6631 53.5933 51.0283 53.0308 49.7515 52.8267 cv50.0068 52.3677 li51.0796 52.4692 52.6631 52.0605 53.6846 52.7251 cvcpf19.6143 54.8188 mo19.5635 55.4375 19.481 55.9243 19.2227 56.4565 cv19.1255 56.6582 17.1768 57.2822 16.3965 57.7305 cv15.4517 58.2729 14.1494 58.8667 13.2998 59.6904 cv14.8198 59.8247 16.9077 60.4375 18.3887 60.4375 cv18.4404 61.1016 18.3818 61.8867 18.0762 62.3975 cv15.9307 61.5293 13.2104 61.21 10.7778 61.2036 cv10.625 60.6934 10.6948 60.1377 10.7778 59.3643 cv12.3745 57.98 15.0562 56.7852 16.7798 55.7515 cv15.605 54.7803 13.5874 54.4614 12.106 54.563 cv12.106 53.7974 12.106 53.0308 12.6167 52.4692 cv14.7109 53.8486 17.3672 53.7974 19.6143 54.8188 cvcpf66.3008 53.3374 mo66.4541 53.5415 66.4541 53.7974 66.1992 53.9507 cv64.9731 53.4395 63.5938 53.4907 62.3682 52.98 cv62.5215 52.1118 63.7471 52.5205 64.3604 52.6226 cv66.3008 53.3374 licpf80.1431 52.98 mo79.48 53.3374 78.355 53.3374 77.6919 52.98 cv77.9468 52.1118 79.3267 52.5205 80.0415 52.6226 cv80.1948 52.6733 80.1431 52.8267 80.1431 52.98 cvcpf84.1782 52.98 mo83.5669 53.5415 82.8003 53.4395 82.1353 53.082 cv82.4937 52.4692 83.8218 52.1118 84.1782 52.98 cvcpf87.856 52.6226 mo88.061 53.0308 87.4985 53.2866 87.1411 53.2354 cv86.6304 53.2354 85.8638 53.2354 85.814 52.7251 cv86.3247 52.3159 87.2437 52.4692 87.856 52.6226 cvcpf126.473 53.6948 mo126.473 54.563 li124.226 55.2275 121.773 55.6934 119.73 56.7598 cv119.322 56.2495 119.066 55.4824 119.271 54.8188 cv121.671 54.4614 123.817 53.5933 126.013 52.7251 cv126.473 53.6948 licpf91.688 54.2061 mo91.5854 54.3589 91.9937 54.4614 91.688 54.563 cv91.3296 55.0234 90.6665 55.0234 90.2065 54.8188 cv90.0015 54.7168 90.104 54.4614 90.104 54.3081 cv90.4614 53.9507 91.228 54.0527 91.688 54.2061 cvcpf60.1719 54.666 mo60.1719 55.0742 li59.7119 55.1768 58.9458 55.3301 58.5879 54.9209 cv58.8438 54.4614 59.7119 54.2061 60.1719 54.666 cvcpf77.8452 55.0742 mo77.5386 55.2783 77.0786 55.1255 76.7217 55.1768 cv76.4658 54.9209 li76.5171 54.3589 77.3853 54.3589 77.8452 54.563 cv77.8452 55.0742 licpf80.9097 54.8188 mo80.9097 55.3301 80.2964 55.3301 79.8882 55.2783 cv79.5308 55.3301 79.02 55.2783 79.0708 54.8188 cv79.48 54.6143 80.4507 54.0527 80.9097 54.8188 cvcpf88.1128 54.563 mo88.4185 55.1255 87.6519 55.1768 87.2437 55.2783 cv86.8862 55.3809 86.6304 55.1255 86.2729 55.0742 cv86.4771 54.3589 87.4985 54.3589 88.1128 54.563 cvcpf56.5962 54.9209 mo55.2681 55.7896 52.8164 55.3809 51.2329 55.2783 cv50.9263 55.0742 51.1816 54.7168 51.4883 54.666 cv53.0205 54.8188 54.6553 54.4102 56.3916 54.563 cv56.5962 54.9209 licpf84.0767 54.8188 mo84.2808 55.2783 83.77 55.3809 83.4634 55.2783 cv83.2095 55.3301 83.0044 55.2783 82.8511 55.0742 cv83.0552 54.4102 83.6177 54.7168 84.0767 54.8188 cvcpf49.1387 54.9209 mo49.1387 55.2783 li48.7808 55.4316 48.0654 55.585 47.8105 55.1768 cv47.6567 54.4614 48.832 54.6143 49.1387 54.9209 cvcpf65.6885 55.5342 mo64.5649 55.9937 63.2876 55.2783 62.1123 55.0742 cv62.8276 54.3081 64.3086 54.8701 65.3306 55.0742 cv65.6885 55.5342 licpf92.3774 56.562 mo92.3257 57.0215 91.3228 57.1753 91.3179 56.8237 cv91.5093 56.3066 li91.8149 56.3579 92.2241 56.1533 92.3774 56.562 cvcpf78.6626 57.0151 mo78.1509 57.3726 77.1304 57.3726 76.6191 57.0151 cv76.5171 56.2495 77.3853 56.7085 77.6919 56.4023 cv78.0503 56.6069 78.7134 56.4536 78.6626 57.0151 cvcpf86.7837 56.6577 mo86.9888 57.1685 86.3755 57.3218 86.0181 57.271 cv85.6089 57.2197 85.0981 57.4238 84.7915 57.0151 cv84.7407 56.4536 85.6089 56.6069 86.0181 56.4023 cv86.3755 56.3003 86.5288 56.5557 86.7837 56.6577 cvcpf89.9507 56.5044 mo90.2573 57.1685 89.4399 57.271 89.0825 57.3726 cv88.8267 57.1685 88.1636 57.3218 88.2651 56.7598 cv88.6743 56.4023 89.3882 56.3003 89.9507 56.5044 cvcpf82.9526 57.1177 mo82.3911 57.5264 81.5747 57.4238 80.7563 57.271 cv80.5522 57.2197 80.1431 56.7085 80.6548 56.5044 cv81.3696 56.8623 82.5952 56.1978 82.9526 57.1177 cvcpf56.4941 57.0151 mo56.647 57.3218 56.2388 57.3726 56.1367 57.5264 cv55.8296 57.5771 55.3193 57.4751 55.5234 57.0151 cv55.8296 57.0151 56.2388 56.4536 56.4941 57.0151 cvcpf60.4268 57.271 mo59.9673 57.5264 59.354 57.7813 58.8438 57.5264 cv58.6904 57.3726 58.4863 57.2197 58.5879 57.0151 cv59.2524 56.9131 60.1206 56.6069 60.4268 57.271 cvcpf48.27 57.271 mo47.8105 57.271 li47.8105 56.9131 li48.0146 56.8623 48.4238 56.9131 48.27 57.271 cvcpf53.9399 57.1177 mo53.9907 57.5264 53.5317 57.6284 53.3271 57.7305 cv52.0498 57.8325 50.8755 57.6792 49.7515 57.3726 cv50.1089 56.9131 li51.5386 56.9639 52.6631 56.7085 53.9399 57.1177 cvcpf66.0459 58.1396 mo64.769 57.9346 63.0835 57.8833 61.7549 57.3726 cv62.2148 56.4023 63.5938 57.1685 64.4624 57.1177 cv64.9731 57.4751 65.8926 57.4238 66.0459 58.1396 cvcpf128.326 61.4111 mo128.567 64.626 li128.362 65.1367 127.647 65.1367 127.085 65.0854 cv127.009 63.5918 127.028 61.9634 126.371 60.5908 cv125.905 60.6865 125.266 60.7891 124.921 60.9487 cv124.717 61.7197 125.781 63.3037 125.333 64.3843 cv125.339 64.4297 124.534 64.6382 124.046 64.6963 cv123.83 64.6582 123.835 63.1641 123.727 62.1426 cv123.644 61.5488 123.823 61.2866 123.465 61.2358 cv120.751 61.689 li120.497 61.2803 120.649 60.6416 120.598 60.1821 cv122.846 59.4165 125.401 59.3643 127.596 58.3438 cv128.326 61.4111 licpf78.4585 59.1094 mo77.9468 59.5176 77.0786 59.3643 76.4658 59.2124 cv76.4658 58.5986 li77.1304 58.752 78.3052 58.1899 78.4585 59.1094 cvcpf82.2378 59.2124 mo81.8296 59.7227 81.1138 59.3643 80.6548 59.2124 cv80.5005 58.8027 80.9097 58.752 81.1138 58.5986 cv81.4722 58.9053 82.2896 58.4971 82.2378 59.2124 cvcpf4.29053 60.0801 mo4.95508 61.7144 1.32813 61.8682 3.67773 63.2476 cv3.98438 64.4219 3.06494 65.1367 2.29883 65.6992 cv3.01367 66.3115 3.57568 67.0781 3.26953 67.9458 cv2.29883 69.019 li3.21777 69.5811 3.77979 70.8579 3.16699 71.8286 cv2.7583 72.2876 2.5542 72.4409 2.04346 72.6968 cv2.60498 73.1055 3.06494 73.4121 3.26953 74.0757 cv3.47363 75.0972 3.06494 75.7612 2.19678 76.1187 cv2.04346 76.2725 li2.7583 76.5786 3.47363 76.9873 3.5249 77.856 cv2.65625 79.439 li3.16699 79.6431 3.77979 79.9502 3.88232 80.5625 cv3.98438 81.4312 3.83105 82.2485 3.06494 82.7593 cv3.77979 83.0146 4.64844 83.5771 4.64844 84.4966 cv4.49463 85.2109 3.98438 86.1304 3.26953 86.335 cv2.60498 86.1816 1.88965 86.1816 1.43066 85.4663 cv1.02148 84.4966 1.63477 83.4238 2.45166 83.0146 cv1.78857 82.5552 0.868652 82.4531 0.71582 81.5337 cv0.357422 80.1543 2.45166 79.3369 0.459961 78.4688 cv0.0512695 77.5493 0.766113 76.5786 1.5835 76.2725 cv0.919922 75.9653 0.408691 75.4551 0.102539 74.791 cv0 73.769 0.766113 73.1563 1.5835 72.6968 cv0.919922 72.3906 0.408691 71.9307 0.102539 71.2153 cv0 70.2959 0.766113 69.5811 1.32813 69.019 cv0.664063 68.8145 0.15332 68.0996 0 67.4355 cv0.102539 66.5161 0.868652 65.9033 1.68555 65.5962 cv0.766113 64.9326 0.357422 63.9624 0.71582 62.8896 cv1.94141 61.9185 li1.37891 61.2036 0.664063 60.2334 1.32813 59.3643 cv2.19678 58.3438 3.83105 59.0586 4.29053 60.0801 cvcpf85.3032 59.1094 mo85.4048 59.3135 85.2007 59.4673 85.0474 59.5693 cv84.7407 59.6206 84.4849 59.3643 84.1782 59.2124 cv84.23 58.6494 85.0981 58.752 85.3032 59.1094 cvcpf51.5903 59.3643 mo51.5903 59.7227 li50.4663 59.8755 48.7295 59.978 47.5552 59.5693 cv47.5552 58.9561 li48.9849 58.9053 50.3135 59.0586 51.5903 59.3643 cvcpf56.5962 59.4673 mo55.6768 60.0288 54.0933 59.978 53.1738 59.4673 cv53.5317 58.9561 li54.5527 59.5176 56.0337 58.3945 56.5962 59.4673 cvcpf59.6611 59.3643 mo59.354 59.8755 58.5371 59.7227 58.0776 59.5693 cv58.1289 59.3135 57.9751 59.0078 58.333 58.9561 cv58.7925 59.1094 59.5586 58.6494 59.6611 59.3643 cvcpf88.6226 59.1094 mo88.7759 59.4673 88.3677 59.7227 88.1128 59.8247 cv87.6011 59.8755 86.9888 59.8755 86.7837 59.3643 cv86.937 58.7012 88.061 59.0078 88.6226 59.1094 cvcpf91.9429 59.3643 mo91.7896 59.8755 91.1763 59.8755 90.7173 59.8247 cv90.3091 59.4673 li90.6665 58.752 91.3804 58.9053 91.9429 59.3643 cvcpf65.6885 59.978 mo65.6885 60.3354 li61.3979 59.8247 li61.2954 59.5176 61.4995 59.3135 61.7549 59.2124 cv63.2363 59.0586 64.5132 59.3643 65.6885 59.978 cvcpf138.272 62.0215 mo138.169 62.6338 138.068 63.3491 137.403 63.6558 cv136.535 63.7065 135.667 63.6045 135.309 62.7871 cv135.208 61.9702 135.463 61.2036 136.076 60.7949 cv136.842 60.6934 138.272 60.8457 138.272 62.0215 cvcpf78.3052 61.4082 mo77.897 61.8174 77.0786 61.7144 76.6191 61.561 cv76.5171 61.2549 76.7217 60.9995 76.9761 60.9487 cv77.4878 60.8975 78.2544 60.8975 78.3052 61.4082 cvcpf82.2378 61.2036 mo82.186 61.7651 81.4722 61.6128 81.0122 61.6636 cv80.2964 61.561 li80.2466 60.4888 81.7271 60.9487 82.2378 61.2036 cvcpf55.6255 61.4082 mo55.7275 61.7651 55.3701 61.9702 55.166 62.0215 cv53.7358 61.9702 52.1519 62.2256 50.8755 61.8174 cv50.8755 61.4082 li52.3057 61.459 54.2466 60.8457 55.6255 61.4082 cvcpf85.2007 61.3062 mo85.2007 61.6636 li84.0767 61.6636 li83.9751 61.2549 84.4341 61.2036 84.6899 61.0503 cv84.8433 61.1528 85.1489 61.1016 85.2007 61.3062 cvcpf58.5879 61.561 mo58.5879 61.8174 li58.2817 62.0215 57.8218 61.8682 57.4644 61.9185 cv57.2095 61.561 li57.6177 61.3569 58.2305 61.1016 58.5879 61.561 cvcpf89.5933 61.9185 mo89.0308 62.3276 88.1128 62.1748 87.4985 62.0215 cv87.2437 61.8174 li87.6011 60.7949 88.8267 61.6128 89.3384 61.561 cv89.4399 61.6636 89.645 61.7651 89.5933 61.9185 cvcpf92.4419 61.5933 mo92.1343 62.2573 92.147 62.1748 91.4321 62.1748 cv91.2788 62.0215 91.1255 61.9185 91.1763 61.6636 cv91.7896 61.459 92.2749 61.019 92.4419 61.5933 cvcpf49.1387 61.8174 mo48.7808 62.2256 48.0146 62.0723 47.5552 61.9185 cv47.2998 61.4082 li47.9131 61.561 48.7295 61.1016 49.1387 61.8174 cvcpf65.4331 62.1748 mo65.4331 62.6338 li63.6963 62.583 62.4702 62.3276 60.8872 61.9185 cv62.1641 61.0503 64.1045 61.561 65.4331 62.1748 cvcpf78.2026 63.3999 mo78.2026 63.6558 li77.6401 63.7578 76.8232 63.9106 76.3638 63.5024 cv76.6191 62.9404 77.7427 63.042 78.2026 63.3999 cvcpf81.8804 63.8599 mo81.3696 64.064 80.7056 63.9624 80.2964 63.6558 cv80.5005 62.7363 82.186 63.145 81.8804 63.8599 cvcpf49.8535 63.5024 mo50.0576 64.064 49.292 63.9106 49.0366 64.1152 cv48.4746 63.8599 47.0444 64.2686 47.4019 63.2476 cv49.8535 63.5024 licpf55.8809 63.7578 mo55.9321 64.3193 55.2168 64.1665 54.9106 64.3711 cv53.5317 64.1152 52.6118 64.5239 51.3345 63.8599 cv51.5903 63.3999 li53.0713 63.7065 54.4507 63.2476 55.8809 63.7578 cvcpf86.0181 64.0132 mo85.6089 64.4731 84.7915 64.2178 84.3325 64.0132 cv84.3325 63.7578 84.23 63.4517 84.5874 63.3999 cv85.0981 63.4517 85.7632 63.5024 86.0181 64.0132 cvcpf58.2305 63.8599 mo58.0776 64.1665 57.771 64.1152 57.4644 64.1152 cv57.3623 63.5024 li57.6177 63.6558 58.0259 63.5024 58.2305 63.8599 cvcpf90.4614 63.7578 mo90.5132 64.3193 90.104 64.5752 89.5933 64.626 cv89.0825 64.4731 88.4692 64.4731 88.0093 64.1152 cv88.3169 63.3491 89.5425 63.6558 90.4614 63.7578 cvcpf138.527 65.2388 mo138.68 66.0049 138.323 67.0781 137.403 67.3335 cv137.301 67.2822 137.25 67.3843 137.148 67.4355 cv138.068 67.793 138.68 68.3037 138.884 69.2739 cv138.834 69.9893 138.068 70.5513 137.506 71.0112 cv138.017 71.4194 138.884 71.8286 138.884 72.6968 cv139.089 73.5645 138.426 74.1782 137.915 74.6885 cv138.323 75.0459 139.141 75.4551 138.987 76.1187 cv139.039 77.0381 138.119 77.8047 137.506 78.2134 cv138.323 78.8262 138.63 79.9502 138.119 80.8188 cv136.792 81.6357 li137.608 82.1973 138.272 83.3721 137.659 84.3428 cv137.046 84.9048 136.076 85.4155 135.309 84.854 cv134.748 84.3428 134.543 83.5771 134.849 82.8613 cv134.798 82.0957 135.717 81.9932 136.177 81.5337 cv135.053 81.1763 135.309 79.8994 135.463 79.0815 cv136.688 77.856 li135.872 77.4468 135.616 76.4766 135.921 75.6592 cv136.025 75.0459 136.688 75.0459 136.892 74.5356 cv136.433 74.1782 135.973 73.9229 135.821 73.3096 cv135.513 72.3389 136.229 71.6753 136.892 71.2153 cv135.921 70.7559 135.309 69.4277 135.821 68.4058 cv136.792 67.5376 li136.025 67.1802 135.463 66.6182 135.463 65.6992 cv135.412 65.0347 135.872 64.3193 136.535 64.1152 cv137.353 64.1152 138.221 64.4731 138.527 65.2388 cvcpf17.8774 68.4058 mo17.7949 69.5176 17.7246 70.4497 16.9077 71.1133 cv14.8643 73.1563 12.3931 71.0684 10.1968 72.7544 cv9.8584 72.6714 9.7373 70.896 10.0117 69.9893 cv11.7998 70.5005 15.79 70.5576 16.0396 69.8867 cv16.499 69.1211 16.7544 67.9146 16.2944 67.0459 cv16.0396 65.9863 12.208 66.0049 10.2671 66.3115 cv9.75635 65.6992 10.1646 64.8813 10.4204 64.2686 cv12.6045 65.0854 18.127 63.1768 17.8774 68.4058 cvcpf77.8452 65.6992 mo77.5894 66.1074 76.9263 66.0049 76.6191 65.8525 cv76.313 65.4434 76.7725 65.3413 77.0786 65.2388 cv77.2837 65.4951 77.9468 65.1367 77.8452 65.6992 cvcpf81.3696 65.6992 mo81.3696 65.9033 81.1646 66.1074 81.0122 66.1074 cv79.5308 65.9541 li79.3267 64.9839 81.1138 65.2388 81.3696 65.6992 cvcpf51.6924 65.9541 mo51.8457 66.21 51.5386 66.4141 51.3345 66.4648 cv49.7515 66.5161 48.27 66.4141 46.7881 66.1074 cv47.0444 65.5962 li48.4746 65.6479 50.2622 65.5962 51.6924 65.9541 cvcpf85.0474 65.9541 mo85.0474 66.21 li84.5874 66.3628 83.8218 66.5161 83.4634 65.9541 cv83.7183 65.5454 84.7407 65.3413 85.0474 65.9541 cvcpf57.7202 65.8525 mo58.0259 66.5674 57.1577 66.5674 56.749 66.5674 cv56.4429 66.5674 56.1367 66.6182 55.9834 66.3115 cv56.2896 65.75 57.1069 65.5454 57.7202 65.8525 cvcpf89.3384 66.21 mo89.4399 66.6689 88.9302 66.6182 88.7251 66.8228 cv88.2134 66.6182 87.3462 66.873 87.2437 66.1074 cv87.9595 66.1074 88.8267 65.4434 89.3384 66.21 cvcpf92.5552 65.9541 mo92.5552 66.2607 92.5054 66.6689 92.147 66.7202 cv91.8921 66.4141 91.0747 66.8228 91.3296 66.1074 cv91.5854 65.6992 92.1978 65.8008 92.5552 65.9541 cvcpf64.8198 66.8228 mo64.8198 67.0781 li63.1851 66.8228 60.938 66.5674 59.3032 66.5674 cv59.1499 66.3628 59.2012 66.1074 59.457 65.9541 cv61.2446 66.2607 63.3389 65.8008 64.8198 66.8228 cvcpf54.3999 66.21 mo54.604 66.772 53.8379 66.6182 53.5317 66.8228 cv53.3784 66.772 53.1738 66.7202 53.0713 66.5674 cv53.0205 65.75 54.0425 66.1582 54.3999 66.21 cvcpf79.7856 67.793 mo79.2759 68.5591 78.7134 67.4355 78.2026 67.793 cv78.2026 67.6909 78.1509 67.4863 78.3052 67.4355 cv78.6626 67.2822 78.6626 67.6909 78.8159 67.793 cv78.8667 67.5376 79.2241 67.0781 79.5308 67.4355 cv79.7349 67.3843 79.8364 67.6401 79.7856 67.793 cvcpf83.4634 68.0488 mo82.9019 68.5591 82.0845 68.1504 81.5229 67.9458 cv81.9321 67.231 82.647 67.5884 83.3618 67.6909 cv83.5142 67.7417 83.4634 67.8955 83.4634 68.0488 cvcpf60.1719 68.3037 mo60.1719 68.6616 li59.5586 68.5591 58.4863 68.8657 57.8218 68.4058 cv58.0259 67.4355 59.8145 67.6401 60.1719 68.3037 cvcpf55.9834 68.5591 mo54.3999 69.2231 52.5098 68.8145 50.7222 68.4058 cv51.0796 67.9458 li52.6631 68.3037 54.7573 67.5884 55.9834 68.5591 cvcpf87.4985 68.4058 mo87.4985 68.6616 li86.7837 68.9678 85.9673 68.6616 85.3032 68.4058 cv85.4048 67.9458 li86.1714 67.8955 86.9888 67.8955 87.4985 68.4058 cvcpf48.8833 68.3037 mo48.8833 68.5591 li48.5762 68.7124 48.0654 68.7124 47.8105 68.4058 cv47.8105 67.8442 48.6787 67.9458 48.8833 68.3037 cvcpf65.79 69.1724 mo64.6157 68.9678 62.8789 69.019 61.7549 68.6616 cv61.7036 67.7417 62.7256 68.4058 63.1343 68.0488 cv64.1045 68.1504 65.3813 68.2529 65.79 69.1724 cvcpf89.9507 68.6616 mo89.9507 69.019 li89.5933 69.1724 88.9302 69.3252 88.6226 68.917 cv88.4692 68.2017 89.4399 68.5591 89.6958 68.5591 cv89.7974 68.6104 89.8491 68.7124 89.9507 68.6616 cvcpf122.54 71.2324 mo122.467 71.4692 122.381 71.9683 122.335 72.1729 cv122.642 73.1431 122.846 73.8203 123.817 74.2803 cv124.991 74.8931 126.371 74.3823 127.239 73.4629 cv127.699 72.5947 127.955 71.3179 127.494 70.3979 cv126.625 68.7124 124.379 68.7632 123.204 69.8867 cv122.93 70.3325 122.959 69.8296 122.54 71.2324 cvcp121.164 70.7866 mo121.568 69.1455 121.63 69.4268 122.08 68.917 cv122.948 68.0488 123.969 67.5376 125.145 67.4355 cv126.932 67.3843 128.108 68.7124 128.924 70.1426 cv129.538 71.7773 129.026 73.7183 127.955 74.8931 cv126.881 76.0166 125.348 76.3232 123.918 76.1187 cv122.233 75.6079 121.211 74.0249 120.956 72.3389 cv120.977 71.812 121.042 71.2847 121.164 70.7866 cvcpf80.5005 69.5303 mo80.604 69.9385 80.3989 70.1938 80.0415 70.2451 cv79.6841 69.9385 78.7134 70.4497 78.8159 69.6318 cv79.3774 69.5811 79.939 69.1724 80.5005 69.5303 cvcpf84.0767 70.1426 mo84.0767 70.3979 li83.6685 70.5005 82.9526 70.6538 82.5952 70.2451 cv82.5952 69.7852 li83.1577 69.7852 83.7183 69.6826 84.0767 70.1426 cvcpf47.8105 70.5005 mo47.8613 70.6538 47.6064 70.7559 47.5552 70.8579 cv47.2998 70.9087 47.0952 70.8579 46.9419 70.6025 cv47.0444 70.1426 li47.3506 70.1426 47.6064 70.2451 47.8105 70.5005 cvcpf55.0127 70.3979 mo55.2168 71.1133 54.3999 70.9087 54.0425 71.1133 cv52.3057 71.0112 50.8755 71.3179 49.2407 70.8579 cv49.2407 70.5005 li51.2329 70.2451 53.0713 70.5005 54.9106 70.2451 cv55.0127 70.3979 licpf65.4331 71.2153 mo65.1772 71.4712 li63.3389 70.9087 61.6528 71.062 59.6611 70.8579 cv59.457 70.3979 60.0186 70.1938 60.2734 70.1426 cv62.1641 70.1426 64.2075 69.9385 65.4331 71.2153 cvcpf58.0776 70.5005 mo58.0776 70.8579 li57.6685 71.0112 56.9531 71.1641 56.5962 70.7559 cv56.5962 69.9385 57.8726 70.1938 58.0776 70.5005 cvcpf87.397 70.6025 mo87.2954 71.3179 86.4771 70.8579 86.0181 71.0112 cv85.7632 70.8579 85.7114 70.4497 85.9146 70.2451 cv86.4771 70.1938 86.9888 70.2959 87.397 70.6025 cvcpf79.4282 71.8286 mo79.4282 72.2368 li78.5591 72.2368 li78.3052 71.5732 79.1733 71.6753 79.4282 71.8286 cvcpf83.4634 72.2368 mo83.5669 72.4922 83.3618 72.7988 83.106 72.8501 cv82.4937 72.9009 81.9321 72.7988 81.5229 72.3389 cv81.6763 71.4712 83.0044 71.8286 83.4634 72.2368 cvcpf86.5288 72.5947 mo86.3755 73.1055 85.5581 73.0029 85.2007 72.8501 cv84.9458 72.748 85.0981 72.4922 85.0474 72.3389 cv85.5063 71.8286 86.1714 72.2368 86.5288 72.5947 cvcpf60.1719 72.8501 mo59.8145 73.207 li57.1069 73.0547 li56.8003 72.8501 57.1069 72.3906 57.3623 72.3389 cv58.2817 72.4922 59.5586 71.9307 60.1719 72.8501 cvcpf50.4663 72.6968 mo50.6196 72.9521 50.3135 73.1563 50.1089 73.207 cv49.292 73.1055 48.0146 73.4121 47.1978 72.9521 cv47.9639 71.9307 49.394 72.7988 50.4663 72.6968 cvcpf55.3701 72.9521 mo54.3999 73.6675 52.7651 73.2588 51.6924 72.8501 cv52.2031 72.186 54.144 72.4922 55.2681 72.5947 cv55.3701 72.9521 licpf79.0708 74.0757 mo79.1226 74.5864 78.5093 74.5356 78.2026 74.5356 cv77.7427 74.6377 77.3345 74.4844 77.2319 74.0757 cv77.5894 73.6675 78.5591 73.7183 79.0708 74.0757 cvcpf82.5952 74.6885 mo82.186 74.791 81.4722 74.9443 81.1138 74.5356 cv81.1138 73.9229 li82.5952 74.0757 li82.5952 74.6885 licpf86.1714 74.6885 mo86.1714 75.0459 li85.5581 75.3018 84.8433 75.0459 84.3325 74.791 cv84.3325 74.0249 85.7632 74.1782 86.1714 74.6885 cvcpf59.0479 75.0459 mo59.0479 75.4038 li58.2817 75.1997 56.8521 76.1187 56.5962 74.8931 cv57.2095 74.3823 58.5371 74.2803 59.0479 75.0459 cvcpf51.0796 74.791 mo51.1816 75.0972 50.9775 75.353 50.7222 75.4038 cv49.5469 75.6592 48.2188 75.5063 47.1978 75.0459 cv47.4019 74.6885 li48.4746 75.0972 49.8535 74.3823 51.0796 74.791 cvcpf55.0127 75.1484 mo54.604 75.6592 53.6333 75.7104 52.9185 75.5063 cv52.7144 75.1484 li53.2759 74.6377 54.7061 74.3315 55.0127 75.1484 cvcpf65.6885 75.5063 mo65.7393 76.2217 64.9731 75.9653 64.5649 75.9146 cv63.4409 75.353 61.4995 75.9146 60.1719 75.4038 cv60.376 74.8418 61.2954 74.9956 61.9077 74.791 cv63.2363 74.8418 64.5132 75.0972 65.6885 75.5063 cvcpf88.2651 75.0459 mo88.2651 75.4038 li87.9595 75.6592 87.4985 75.5063 87.2437 75.3018 cv87.1929 74.8931 87.7544 74.6377 88.0093 74.8931 cv88.1128 74.8931 88.1636 74.9956 88.2651 75.0459 cvcpf79.7856 76.7324 mo79.0708 77.1411 77.9976 77.0381 77.2319 76.8848 cv77.2319 76.6299 77.1304 76.3232 77.436 76.2725 cv78.2544 76.4258 79.4282 75.8643 79.7856 76.7324 cvcpf83.4634 77.3452 mo82.8511 77.6509 82.186 77.3955 81.6255 77.1411 cv81.6255 76.1694 82.8511 76.834 83.3618 76.9873 cv83.5142 77.0894 83.4634 77.2422 83.4634 77.3452 cvcpf54.9106 77.2422 mo55.0127 77.958 54.1953 77.3955 53.9399 77.7534 cv52.4072 77.6006 50.8237 78.0088 49.394 77.3452 cv49.394 76.9873 li51.2329 77.0894 53.2759 76.2217 54.9106 77.2422 cvcpf58.5879 77.498 mo58.1289 77.9067 57.2603 77.7534 56.749 77.6006 cv56.5962 77.2422 57.0049 76.9873 57.2095 76.8848 cv57.8218 76.7324 58.4346 77.0381 58.5879 77.498 cvcpf65.79 77.856 mo65.8926 78.0601 65.6885 78.2134 65.5854 78.3662 cv64.0029 77.7534 62.0615 78.0601 60.4268 77.6006 cv60.1719 77.0381 60.8872 77.1914 61.1421 76.9873 cv62.8789 76.834 64.4624 77.1411 65.79 77.856 cvcpf86.5288 77.6006 mo86.5288 77.7534 li85.8638 77.958 84.895 77.958 84.5874 77.2422 cv85.1489 76.834 86.3247 76.9365 86.5288 77.6006 cvcpf15.1709 78.2134 mo15.1196 78.7754 15.1709 79.3882 14.5576 79.6948 cv14.0981 79.7964 13.8423 79.7461 13.4849 79.439 cv13.1787 79.0815 12.9229 78.2642 13.3315 77.7534 cv13.894 77.3452 15.0684 77.3452 15.1709 78.2134 cvcpf79.7856 78.7236 mo79.5308 79.6948 78.4077 78.8774 77.6919 78.9795 cv77.436 78.7754 77.5894 78.4688 77.8452 78.3662 cv78.5591 78.2642 79.2241 78.418 79.7856 78.7236 cvcpf83.4634 79.1841 mo82.8511 79.5923 82.0845 79.5923 81.5229 79.1841 cv81.6255 78.7236 li82.3403 78.6221 82.9526 78.8774 83.4634 79.1841 cvcpf54.2974 79.439 mo54.2974 79.7964 li52.6631 80.2051 51.0283 80.2051 49.394 79.7964 cv49.292 79.4897 49.4961 79.2856 49.7515 79.1841 cv51.4375 79.2856 52.7651 78.9795 54.2974 79.439 cvcpf86.2729 79.439 mo86.2729 79.6948 li85.4048 79.6948 li85.4048 79.1841 li85.7632 79.1328 86.0181 79.3369 86.2729 79.439 cvcpf47.6567 79.439 mo47.6567 79.6948 li47.1978 79.6948 li47.1978 79.3369 li47.3506 79.3882 47.5552 79.2349 47.6567 79.439 cvcpf89.2349 79.6948 mo89.0825 80.2568 88.52 80.2051 88.1128 79.9502 cv88.0093 79.7964 li88.1636 79.3882 88.98 78.9795 89.2349 79.6948 cvcpf57.3623 79.7964 mo57.6177 80.6143 56.647 80.1035 56.3916 80.4097 cv55.6255 80.3076 li55.2681 79.6948 56.1875 79.5415 56.5962 79.439 cv56.8003 79.6948 57.2095 79.439 57.3623 79.7964 cvcpf64.9731 80.665 mo64.7178 80.9199 li62.7256 80.4097 60.9888 80.5625 58.9458 80.2051 cv58.8438 79.7461 59.354 79.7964 59.5586 79.5923 cv61.3462 79.9502 63.6963 79.1841 64.9731 80.665 cvcpf79.2759 80.8188 mo79.4282 81.1245 79.0708 81.1245 78.9175 81.2783 cv76.9761 81.0229 li76.7217 80.5117 77.3853 80.6143 77.5894 80.4097 cv78.2026 80.3584 78.8159 80.5117 79.2759 80.8188 cvcpf82.7485 81.2783 mo82.5952 81.6357 li81.9829 81.7378 81.4722 81.5845 81.0122 81.2783 cv81.1646 80.7158 82.3911 80.7158 82.7485 81.2783 cvcpf125.98 81.4087 mo125.591 81.3687 124.797 81.2593 124.435 81.2075 cv123.868 82.6318 123.976 82.8232 123.765 84.062 cv124.072 84.3169 124.155 85.1787 125.202 85.0771 cv126.198 84.1128 126.48 82.9063 126.53 81.6294 cv126.428 81.4336 126.414 81.4531 125.98 81.4087 cvcp126.521 79.6924 mo127.031 79.749 126.837 79.7383 127.341 79.7964 cv127.545 79.7461 127.699 79.4897 127.955 79.5923 cv128.209 79.9502 li127.392 82.4531 127.647 86.0288 124.788 87.0498 cv123.664 87.2031 123.05 86.1304 122.693 85.3135 cv122.54 85.1089 122.54 84.751 122.182 84.7007 cv119.398 85.9897 li119.008 85.8369 119.539 84.7007 119.692 84.0869 cv120.663 83.6279 121.869 83.4741 122.635 82.5039 cv122.891 81.7378 123.197 80.8823 122.744 80.8188 cv120.598 80.5625 li120.855 78.5703 li122.389 79.2002 124.809 79.5 126.521 79.6924 cvcpf49.8535 82.0439 mo49.1895 82.5552 48.4238 82.0439 47.6567 82.0439 cv47.6567 81.4312 li48.4746 81.4824 49.5981 81.2271 49.8535 82.0439 cvcpf57.2095 82.2485 mo55.6255 82.7085 53.6333 81.8906 51.9478 82.5039 cv51.6924 82.3511 51.1304 82.4014 51.2329 81.8906 cv53.1738 81.3804 55.3701 81.2271 57.2095 82.0439 cv57.2095 82.2485 licpf86.0181 81.6357 mo86.0181 81.8398 86.0679 82.1973 85.814 82.146 cv85.354 82.2998 85.1489 81.8398 84.7915 81.6357 cv84.9458 81.2783 85.7632 81.2783 86.0181 81.6357 cvcpf64.9731 82.5039 mo64.9731 82.8613 li62.981 82.7593 60.938 82.0957 59.0479 82.5039 cv58.8438 82.3511 58.7925 82.146 58.8438 81.8906 cv60.8872 81.3804 63.2363 81.7378 64.9731 82.5039 cvcpf77.436 83.27 mo76.9263 83.6787 76.0063 83.5254 75.3931 83.3721 cv75.189 82.6572 76.0063 82.8613 76.3638 82.6572 cv76.6704 82.9126 77.5386 82.5039 77.436 83.27 cvcpf81.0122 83.4741 mo80.604 84.0869 79.3774 83.9346 78.8159 83.6279 cv78.4585 83.4741 78.4585 83.0146 78.8159 82.8613 cv79.48 83.2197 80.6548 82.6572 81.0122 83.4741 cvcpf83.7183 83.9854 mo83.3618 84.2915 82.9019 83.9854 82.5952 83.7295 cv82.7485 83.0146 83.8218 83.4741 83.7183 83.9854 cvcpf49.1387 84.2402 mo48.8833 84.6494 48.27 84.4966 47.9131 84.3428 cv47.6064 84.1387 47.9131 83.7813 48.168 83.7295 cv48.5254 83.7813 49.1387 83.832 49.1387 84.2402 cvcpf57.9751 83.9854 mo58.2305 84.1387 58.2305 84.3936 58.0776 84.5977 cv55.7793 85.0063 53.1738 84.2915 50.7222 84.7007 cv50.5176 84.4448 50.5176 84.2915 50.7222 83.9854 cv53.1226 83.27 55.7275 84.3428 57.9751 83.9854 cvcpf65.4331 84.7007 mo65.4331 85.2109 li63.6963 84.8022 61.5503 85.0063 59.9165 84.5977 cv59.9165 83.7813 60.9888 84.0869 61.4995 83.8828 cv62.7764 84.2915 64.3604 83.8828 65.4331 84.7007 cvcpf88.1128 84.5977 mo87.4478 84.854 86.6304 84.7007 86.0181 84.3428 cv86.0181 83.9854 li88.1128 84.2402 li88.1128 84.5977 licpf19.1167 85.3008 mo18.9102 84.8916 21.2227 90.9541 21.0068 91.2832 cv18.5547 91.8452 16.1924 92.9746 14.0981 94.3032 cv13.1787 92.2603 12.1182 90.3638 11.8125 88.1162 cv12.0742 87.8931 12.8594 87.4141 13.2676 87.4653 cv13.8877 88.8247 14.2959 91.085 14.8447 91.73 cv15.3047 91.6216 15.8159 91.4297 15.9365 91.2383 cv16.0132 90.2041 14.6855 88.231 14.876 88.0283 cv14.9185 87.7266 15.5728 87.5225 16.0649 87.4331 cv16.9136 87.8228 17.5078 90.7725 17.8203 90.4722 cv18.5166 89.9937 19.1167 90.0703 18.9956 89.8594 cv18.5864 89.5015 17.4438 85.7285 17.6929 85.4409 cv19.2251 85.0322 18.9746 85.0195 19.1167 85.3008 cvcpf137.046 86.7944 mo137.608 88.4292 134.798 88.2754 135.921 89.604 cv136.076 90.4722 135.821 91.3408 134.952 91.5962 cv134.288 91.4937 133.368 91.4424 133.214 90.6255 cv133.062 89.7573 133.471 88.9907 134.237 88.7866 cv135.105 88.4292 133.879 87.8164 134.083 87.1519 cv134.186 86.5903 134.186 85.9263 134.849 85.5688 cv135.872 85.2622 136.688 85.9775 137.046 86.7944 cvcpf65.6885 86.9478 mo65.6885 87.5605 li63.6963 86.9478 61.3462 87.1519 59.2012 86.9478 cv59.0479 86.1304 60.0186 86.437 60.4268 86.1816 cv62.0107 86.0796 64.1045 86.335 65.6885 86.9478 cvcpf46.3291 86.6919 mo46.3291 87.8799 45.0889 89.7813 44.7988 90.7148 cv44.8115 91.1875 45.2617 91.1885 45.9717 91.5962 cv46.3291 91.9536 45.7671 92.3623 45.563 92.5664 cv44.5928 92.311 43.6729 91.749 43.0093 91.085 cv43.8257 89.604 44.5928 88.0205 44.9502 86.335 cv45.4609 86.2837 45.9717 86.335 46.3291 86.6919 cvcpf5.5166 87.9185 mo5.82373 88.8887 4.90381 89.5015 4.49463 90.1147 cv5.3125 90.064 6.07861 90.6255 6.33398 91.3408 cv6.69141 92.1064 6.38525 92.9746 5.87451 93.5371 cv6.48682 93.7417 7.25342 94.2012 7.45752 94.916 cv8.12158 95.9888 5.5166 97.521 7.96826 97.3677 cv8.83691 97.7764 8.83691 99.1558 8.42822 99.9219 cv7.91748 100.688 9.04102 100.28 9.29639 100.637 cv10.3179 101.25 10.2163 102.527 9.80713 103.497 cv9.39893 103.855 li9.90967 103.957 10.9312 103.6 11.3906 104.212 cv12.106 104.928 11.7485 105.898 11.3906 106.665 cv10.7778 107.277 10.1646 107.022 9.39893 106.92 cv8.68359 106.357 8.73438 105.336 8.93896 104.57 cv9.29639 104.111 li8.42822 103.906 7.20215 104.111 6.94727 102.987 cv6.896 102.322 7.04932 101.454 7.35547 100.791 cv6.53809 100.534 5.67041 100.126 5.5166 99.207 cv5.3125 98.4404 5.82373 97.981 5.97656 97.3677 cv5.3125 96.9595 4.29053 96.7041 4.13721 95.7334 cv4.13721 95.0186 4.54639 94.457 5.00586 93.894 cv4.29053 93.6392 3.16699 93.3325 3.16699 92.311 cv3.32031 91.5962 3.32031 90.7275 4.03516 90.3696 cv3.26953 90.064 1.99268 89.6553 2.04346 88.5313 cv2.146 87.7139 2.60498 86.8457 3.42285 86.5391 cv4.39307 86.5391 5.26123 86.8965 5.5166 87.9185 cvcpf88.0093 88.9526 mo87.8052 90.1787 87.3013 91.5449 87.3013 92.8218 cv87.8882 93.1284 88.6226 93.1025 89.2349 93.3076 cv89.2349 93.8877 89.0181 94.8457 88.6929 94.7949 cv87.6714 94.6929 86.3755 94.5586 85.5581 93.894 cv85.7632 92.209 85.9546 90.1338 86.7202 88.499 cv87.2817 88.6079 88.0034 88.7231 88.0093 88.9526 cvcpf65.6885 89.2466 mo65.6885 89.604 li64.0537 88.9907 61.5503 89.8594 59.9165 88.8887 cv61.04 87.8672 62.7764 88.7358 64.2075 88.6333 cv65.6885 89.2466 licpf52.1016 90.8296 mo52.1519 91.1875 51.7432 91.4937 51.4883 91.5962 cv50.8569 91.5542 50.2158 90.4297 49.6494 90.2051 cv49.5278 90.1567 49.3374 91.0288 49.2021 91.0474 cv49.5044 91.436 50.0298 91.7231 50.2114 92.0005 cv50.3521 92.2148 50.2866 92.4238 49.7515 92.6685 cv49.3105 92.7891 49.1216 92.0234 48.7646 91.9492 cv48.666 91.9292 48.1084 92.7031 47.9766 92.7583 cv48.2451 93.4736 49.3687 93.7944 49.626 94.2681 cv49.7798 94.5522 49.3662 95.1187 48.9722 95.2739 cv48.0654 94.1113 46.0225 93.1025 46.1504 92.8345 cv46.7119 91.6563 48.998 88.2246 49.3428 88.5059 cv50.1602 89.0674 51.4375 90.1655 52.1016 90.8296 cvcpf125.042 91.8516 mo124.999 92.5688 124.777 93.0898 124.436 93.4819 cv124.293 93.8789 120.383 95.356 118.759 95.9888 cv119.833 96.7041 121.199 97.3486 122.527 97.7573 cv122.565 98.147 122.335 98.9517 121.978 99.3091 cv119.73 98.3896 117.535 97.2661 115.439 95.9888 cv115.592 95.3755 li117.687 94.5078 119.934 94.0474 121.825 92.6685 cv120.719 91.9282 119.105 91.4365 117.535 91.1743 cv117.535 90.8169 117.789 89.8594 118.147 89.3999 cv120.394 90.3696 122.59 91.3916 125.042 91.8516 cvcpf91.981 90.0825 mo91.4321 95.0117 li91.3628 95.2354 90.5581 95.0825 90.021 94.8906 cv90.1743 93.0327 90.4429 91.4106 90.5952 89.8276 cv90.6782 89.4893 92.0005 89.8716 91.981 90.0825 cvcpf97.4595 91.4424 mo97.3062 92.311 li96.3364 92.8218 95.7231 91.2383 94.5991 91.9536 cv93.7817 92.6177 93.9282 93.7158 94.2349 94.5332 cv94.4907 94.8394 95.2437 95.0698 95.6519 95.0186 cv95.9038 95.02 95.9478 94.3711 95.7544 94.0322 cv95.6138 93.7856 94.8423 94.0547 94.7944 93.6484 cv94.7466 93.4014 94.7222 92.959 95.0522 92.6943 cv95.8696 92.6943 96.8462 93.0264 97.0513 93.7925 cv97.0122 94.7119 97.0259 96.1802 96.3931 96.3149 cv95.1675 96.519 94.0376 96.1421 93.1694 95.5293 cv92.4019 94.7119 92.2505 93.4858 92.5552 92.4644 cv92.811 91.3916 93.7817 90.4214 94.855 90.2168 cv96.0298 89.8594 96.6421 90.9321 97.4595 91.4424 cvcpf106.846 91.5645 mo106.948 91.8008 105.818 92.1001 105.727 92.3047 cv105.72 92.5942 106.244 94.4756 105.994 95.2368 cv105.924 95.4478 104.744 95.8594 104.598 95.7593 cv104.336 95.8018 104.563 93.3452 104.319 92.6563 cv104.284 92.5332 103.568 92.8477 103.174 92.7837 cv102.906 92.7905 102.893 91.8008 102.88 91.5005 cv103.206 91.3281 105.223 91.1045 106.398 90.4404 cv106.846 91.5645 licpf58.4346 91.085 mo58.5371 91.5962 57.9751 91.5449 57.7202 91.6982 cv57.4644 91.749 57.2603 91.6982 57.1069 91.4424 cv56.9023 90.8296 57.6177 90.8809 57.9751 90.7275 cv58.1289 90.8809 58.333 90.8809 58.4346 91.085 cvcpf65.3306 91.8516 mo63.645 92.0562 61.9077 91.3916 60.2734 91.4424 cv60.1719 90.9834 60.478 90.9321 60.7842 90.7275 cv62.3682 90.9321 64.3086 90.7275 65.3306 91.8516 cvcpf99.6626 91.1553 mo99.8149 91.6152 99.4517 93.1152 99.6235 93.0776 cv99.9595 93.1445 100.612 93.2998 100.74 93.1548 cv100.734 92.5684 100.727 91.5361 100.803 91.1514 cv100.863 91.0288 101.843 91.0728 102.083 91.2383 cv102.388 91.2065 102.063 95.0757 102.364 95.8867 cv102.292 96.1548 101.022 96.1611 100.856 96.0469 cv100.786 95.5996 100.952 94.7275 100.757 94.6792 cv100.608 94.5776 99.7642 94.5391 99.4712 94.6035 cv99.3296 95.0503 99.7446 96.2314 99.4575 96.251 cv97.9194 96.3398 li97.9829 91.0278 li97.9966 90.6318 99.688 90.9834 99.6626 91.1553 cvcpf134.952 93.1797 mo135.208 94.3545 134.134 95.1714 133.214 95.5293 cv133.93 95.938 134.338 96.9087 133.981 97.7251 cv133.675 98.6445 132.551 98.5938 131.887 98.5938 cv131.376 98.1343 130.814 97.4702 131.019 96.6016 cv131.53 95.9888 131.887 95.4272 132.602 95.1201 cv131.887 94.6611 131.631 93.4858 132.142 92.6685 cv132.653 91.4424 134.849 91.749 134.952 93.1797 cvcpf53.5952 92.0562 mo54.3105 93.1797 54.7573 94.457 55.6255 95.3755 cv55.3701 95.8232 55.1914 96.0654 54.7573 96.4995 cv54.2974 96.3975 54.2466 95.6313 53.6846 95.5293 cv52.7651 96.04 52.0757 97.1895 51.105 97.6875 cv50.6455 97.4316 50.3647 96.6523 50.3647 96.2441 cv51.0371 95.4521 52.73 95.0317 52.9434 94.0928 cv52.8091 93.6079 52.627 93.2939 52.4331 92.9502 cv52.7651 92.5791 53.1226 92.0688 53.5952 92.0562 cvcpf65.5854 93.7925 mo65.5854 94.0474 li63.9004 93.6392 61.8574 94.0474 60.0693 93.894 cv59.8145 93.5371 li60.7339 92.6685 62.5723 93.1284 63.8496 93.1797 cv64.4116 93.3838 65.1265 93.2305 65.5854 93.7925 cvcpf23.1387 96.3467 mo22.1685 96.6016 21.3516 97.2661 20.5854 97.981 cv21.0957 99.0532 22.271 100.962 22.6924 100.797 cv23.5605 100.542 24.6455 99.3154 25.0483 99.5386 cv25.2524 99.9473 26 100.637 25.9487 101.148 cv23.9053 102.221 22.1177 103.957 20.0742 105.184 cv19.4609 105.081 19.0913 104.174 18.7847 103.664 cv19.2954 102.642 21.0767 102.297 21.0391 101.633 cv20.0679 100.867 19.5127 98.3706 19.0337 98.8623 cv18.4209 99.1685 17.3989 99.9985 16.6836 100.049 cv16.3774 99.4878 15.7837 98.9004 15.7837 98.1851 cv18.1333 97.3677 20.1763 96.04 22.271 94.6611 cv22.833 95.0186 23.0879 95.6826 23.1387 96.3467 cvcpf59.354 101.045 mo59.6099 101.557 58.7803 101.71 58.4731 102.271 cv58.2563 102.45 57.9751 101.429 57.5537 101.059 cv56.647 101.787 55.6255 102.833 54.7573 103.497 cv54.2129 103.008 53.9556 102.595 54.1318 102.214 cv54.5078 101.408 56.1665 100.625 56.7993 99.7813 cv56.6377 99.4453 56.4365 99.1514 56.2642 98.8242 cv55.9575 98.1597 56.7749 98.147 57.1328 97.8525 cv57.8477 98.6196 58.7925 100.229 59.354 101.045 cvcpf132.142 99.207 mo132.449 99.8198 132.909 100.688 132.398 101.403 cv132.091 102.68 128.924 101.302 130.661 103.089 cv131.122 104.008 130.406 104.876 129.69 105.336 cv129.384 105.336 129.079 105.234 128.924 105.541 cv129.435 106.153 129.538 107.022 129.333 107.789 cv128.822 108.605 127.699 108.708 126.881 108.605 cv127.239 109.576 127.801 110.598 126.881 111.466 cv126.319 111.977 125.247 111.772 124.634 111.824 cv125.196 112.487 125.196 113.356 124.889 114.122 cv124.327 114.888 123.101 114.837 122.438 114.633 cv122.999 115.195 122.846 116.268 122.693 116.982 cv122.182 117.493 121.467 117.493 120.751 117.442 cv120.598 118.208 121.059 118.974 120.343 119.639 cv119.781 119.996 119.118 120.558 118.402 120.149 cv118.044 121.069 118.3 122.55 116.92 122.703 cv114.571 121.989 116.461 125.104 114.623 125.309 cv114.009 125.513 113.243 124.798 112.988 125.563 cv113.141 126.381 112.885 127.3 112.017 127.504 cv110.434 127.402 li110.333 128.424 110.076 129.65 108.851 129.854 cv107.471 129.701 li107.215 130.468 107.215 131.438 106.245 131.796 cv105.632 132.102 104.968 131.796 104.406 131.54 cv104.151 132.408 103.896 133.583 102.823 133.737 cv102.108 133.89 101.647 133.532 101.137 133.277 cv100.984 134.196 100.576 135.474 99.4009 135.474 cv98.6851 135.524 98.022 135.014 97.8169 134.35 cv97.8169 133.583 97.9702 132.663 98.7876 132.408 cv99.5024 132.204 100.422 132.204 100.881 133.021 cv100.984 133.021 li101.085 132.255 101.188 131.029 102.108 130.57 cv102.772 130.161 103.334 130.825 103.947 130.927 cv104.151 130.11 104.355 129.191 105.275 128.731 cv107.778 129.65 106.705 124.747 109.565 126.535 cv110.536 126.892 109.718 125.309 110.333 124.951 cv110.689 124.236 111.353 124.287 112.017 124.338 cv112.17 124.44 li112.784 123.98 112.324 123.367 112.63 122.703 cv112.988 121.171 115.951 122.908 115.083 120.507 cv115.184 119.894 115.848 119.639 116.308 119.435 cv116.767 119.332 117.38 119.639 117.687 119.179 cv117.33 118.311 117.687 117.34 118.504 116.982 cv121.313 117.851 118.963 112.947 122.335 114.531 cv122.233 113.867 121.875 112.845 122.182 112.079 cv122.693 111.364 123.51 111.415 124.276 111.466 cv124.072 110.546 124.022 109.014 125.247 108.503 cv126.625 108.503 li126.217 107.941 125.809 106.613 126.473 105.949 cv126.831 105.184 127.647 105.438 128.209 105.184 cv127.699 104.519 127.545 103.14 128.311 102.476 cv129.946 101.863 li129.333 101.403 129.231 100.688 129.333 99.9219 cv129.792 99.2583 130.202 98.7979 131.019 98.6958 cv131.376 98.9517 131.938 98.6445 132.142 99.207 cvcpf120.138 102.629 mo120.547 103.293 119.833 103.804 119.526 104.315 cv118.658 104.672 118.096 103.14 117.176 102.987 cv112.885 100.534 li112.784 99.8711 113.447 99.5645 113.754 99.0532 cv115.848 100.024 117.789 101.965 120.138 102.629 cvcpf60.4268 102.885 mo60.2227 103.549 58.958 104.57 59.0479 104.762 cv59.3032 104.864 59.8398 105.694 60.146 105.592 cv60.5166 105.081 61.168 103.97 61.3721 104.085 cv61.7295 104.392 62.189 105.107 62.0361 105.157 cv61.0654 106.333 59.8145 108.121 58.9458 109.244 cv58.6519 109.333 58.1025 108.797 57.8477 108.439 cv57.8799 107.822 58.7622 106.95 59.2344 106.424 cv59.2568 106.405 58.8911 105.883 58.333 105.566 cv57.8564 105.957 57.4321 106.79 56.9292 107.031 cv56.6445 107.023 56.2607 106.611 55.8809 105.949 cv57.0562 104.57 58.2817 103.446 59.457 102.016 cv60.1206 101.71 60.2227 102.527 60.4268 102.885 cvcpf30.1367 107.022 mo28.3496 107.789 26.7148 109.321 25.4888 110.853 cv25.6421 111.772 27.3213 112.264 27.1362 112.96 cv26.7085 113.496 26 114.052 25.9043 113.886 cv21.3384 108.19 li21.1406 107.948 21.7598 107.38 22.271 107.175 cv23.1909 107.584 23.4717 109.167 24.397 109.346 cv25.9292 108.069 27.7363 106.767 28.8091 105.184 cv29.4219 105.49 30.0352 106.256 30.1367 107.022 cvcpf81.8921 105.587 mo82.1753 105.543 82.3345 106.107 82.6216 106.307 cv82.2378 106.907 81.5864 107.149 80.9868 107.66 cv81.1401 107.725 81.3022 108.414 81.4634 108.375 cv81.894 108 82.2026 107.531 82.2847 107.566 cv82.4478 107.585 82.8315 107.973 82.8892 108.273 cv81.9829 109.244 li82.186 109.308 82.3403 109.975 82.5601 109.817 cv82.7466 109.685 83.2681 108.481 83.9849 108.231 cv84.1743 108.165 84.4126 108.718 84.562 108.886 cv84.0513 109.806 82.7876 110.623 82.02 111.338 cv80.897 110.585 80.2466 108.708 79.5308 107.38 cv80.2505 106.992 81.2739 106.3 81.8921 105.587 cvcpf65.4331 106.92 mo64.8198 108.082 li64.8198 108.21 63.3765 107.163 63.3257 107.252 cv63.3159 107.369 62.7837 107.924 62.853 108.027 cv63.0068 108.252 63.8638 108.392 63.998 108.666 cv64.1216 108.917 63.8013 108.918 63.5938 109.538 cv62.2656 108.925 li62.1348 109.238 61.8452 109.705 61.8701 109.834 cv62.4873 110.093 63.2949 110.498 63.7949 110.75 cv63.916 110.969 63.6445 111.435 63.4023 111.798 cv62.125 111.491 61.104 110.993 60.0693 109.985 cv60.6826 108.401 61.4487 106.869 62.7256 105.541 cv63.6963 105.898 64.7178 106.256 65.4331 106.92 cvcpf13.5874 108.401 mo13.7915 109.474 12.9229 110.291 12.0039 110.444 cv11.3906 110.394 10.7266 109.729 10.625 109.116 cv10.5737 108.35 10.625 107.584 11.3906 107.175 cv12.4639 106.869 13.23 107.482 13.5874 108.401 cvcpf111.111 108.561 mo111.672 108.152 112.049 107.258 112.375 107.175 cv113.089 108.173 li113.499 108.758 li113.53 109.276 li112.662 109.225 112.037 108.969 111.111 108.561 cvcp115.235 108.605 mo114.272 107.216 li111.405 102.987 li110.536 103.977 li110.568 104.162 110.88 104.902 111.34 105.208 cv111.576 105.745 110.619 107.156 109.597 108.024 cv109.265 108.261 108.289 107.789 107.625 107.635 cv107.114 107.993 106.506 108.893 106.655 109.218 cv112.988 110.853 li113.881 111.728 li114.699 111.319 116.052 109.883 116.052 108.861 cv115.796 108.81 115.491 108.81 115.235 108.605 cvcpf73.542 108.747 mo73.8115 108.845 73.5566 109.543 73.6182 109.883 cv73.5034 110.15 72.3159 110.023 71.6899 109.92 cv71.7349 110.146 71.6304 110.849 71.5552 110.817 cv71.8433 110.97 72.4937 110.984 72.8359 110.943 cv72.9771 111.051 72.9746 111.594 72.8774 111.849 cv72.8394 111.9 71.8687 112.092 71.3965 111.9 cv71.4731 112.092 71.2788 112.72 71.4932 112.796 cv72.0591 112.887 73.4067 112.688 73.354 112.718 cv73.5146 112.827 73.458 113.42 73.3623 113.828 cv72.2651 113.969 70.9492 113.879 69.8765 113.407 cv69.9277 111.721 70.1836 110.087 70.5918 108.503 cv71.3682 108.521 72.8535 108.967 73.542 108.747 cvcpf67.6929 110.431 mo66.8247 110.304 li66.8247 109.954 66.9492 109.478 67.0591 109.139 cv67.1221 108.941 67.1328 108.918 67.2075 108.758 cv67.2754 108.743 67.6587 108.801 67.7183 108.803 cv68.062 108.81 68.1523 109.065 68.3701 109.282 cv68.4468 109.729 68.4341 110.227 67.6929 110.431 cvcp69.1357 107.89 mo68.3574 107.315 67.3228 107.124 66.3008 107.175 cv66.0449 107.707 65.9609 108.005 65.7427 108.614 cv65.3203 109.674 64.8174 111.26 64.6533 112.341 cv64.7051 112.475 65.7393 112.807 66.0967 112.858 cv66.1626 112.5 66.2798 111.917 66.3677 111.7 cv66.9985 111.988 67.2251 111.737 67.2827 111.905 cv67.3008 112.115 67.3105 113.111 67.5747 113.337 cv68.0942 113.307 68.4209 113.338 69.0083 113.215 cv68.8364 112.366 68.2891 111.639 68.4224 111.659 cv69.1245 111.263 69.5137 110.711 69.7236 110.24 cv69.8765 109.423 69.6978 108.554 69.1357 107.89 cvcpf15.1709 111.313 mo15.3237 112.232 14.9668 113.151 14.0981 113.407 cv13.3315 113.663 12.8721 112.896 12.4639 112.539 cv12.3613 111.721 12.5654 110.546 13.4849 110.24 cv14.4556 109.831 14.915 110.751 15.1709 111.313 cvcpf79.1987 111.67 mo78.9429 111.977 78.3433 112.232 77.9858 112.245 cv77.9087 112.143 77.7397 111.517 77.6851 111.3 cv77.6724 111.231 77.6919 111.274 77.6919 111.146 cv78.1509 110.687 79.7993 110.342 79.1987 111.67 cvcp76.9897 109.026 mo76.9897 108.822 77.8706 108.542 78.0366 109.014 cv78.4321 109.5 77.4751 109.831 77.3726 109.985 cv77.2153 109.672 li76.9897 109.026 licp80.4692 110.667 mo80.063 110.099 79.7349 109.924 79.2056 109.745 cv79.4126 109.142 79.5435 108.589 79.0464 107.98 cv78.1646 107.418 76.9897 107.826 75.8535 108.401 cv75.8677 108.912 75.9033 109.315 76.1299 110.128 cv76.2769 110.861 76.3643 111.131 76.5757 111.845 cv76.7212 112.334 76.897 113.045 77.0151 113.535 cv77.9468 113.561 78.6118 113.356 79.2759 113.151 cv80.3481 112.743 80.7886 111.983 80.4692 110.667 cvcpf17.1626 113.765 mo17.0093 115.144 li17.8271 115.092 19.0527 115.042 19.4609 115.961 cv19.6143 118.055 li20.0742 117.901 20.79 117.8 21.1982 118.208 cv21.9644 118.617 21.6577 119.639 21.5557 120.251 cv21.5044 120.354 21.4023 120.405 21.4536 120.507 cv21.9131 120.354 22.9863 120.251 23.4961 120.66 cv23.9053 121.171 24.314 121.732 24.1099 122.499 cv25.0293 122.703 26.3057 122.397 26.7148 123.572 cv25.9487 125.819 29.3198 124.185 29.0132 126.279 cv29.064 126.586 28.8091 126.79 28.9111 127.147 cv29.4219 126.892 30.6475 126.636 31.2607 127.25 cv31.6694 127.76 31.8228 128.526 31.7202 129.088 cv32.3843 128.526 33.2017 128.629 33.917 128.987 cv34.6826 129.344 34.5298 130.11 34.5298 130.825 cv35.3467 130.876 36.8794 130.008 37.1348 131.54 cv37.2373 133.124 li37.6963 132.306 38.6162 131.744 39.5864 132.153 cv40.0972 132.612 40.6592 133.277 40.4551 134.146 cv40.3013 134.247 li40.9658 134.247 41.6299 133.175 42.498 133.737 cv43.2134 134.35 43.52 135.269 43.3667 136.087 cv43.8257 135.167 44.9502 134.655 45.8184 135.218 cv46.4312 135.831 46.584 136.75 46.3291 137.567 cv45.8184 138.283 44.9502 138.742 44.2349 138.18 cv43.7241 137.721 43.1626 137.057 43.3667 136.188 cv42.856 136.597 41.6807 137.313 40.8125 136.699 cv40.251 136.239 40.3013 135.524 40.3013 134.86 cv39.7397 135.115 38.6162 135.933 37.8501 135.115 cv37.4922 134.503 37.084 133.941 37.2373 133.124 cv36.8794 133.634 35.6021 134.299 34.9385 133.532 cv34.1719 133.073 34.3765 132.051 34.1719 131.54 cv33.6611 131.796 32.9458 132.102 32.3335 131.796 cv31.7202 131.285 31.3628 130.723 31.3628 129.957 cv30.8008 130.263 29.7793 130.212 29.1665 129.701 cv28.4512 129.037 28.7578 128.067 29.0132 127.25 cv28.5537 127.556 27.3784 128.526 26.5615 127.607 cv25.9487 127.045 26.2549 126.33 26.2041 125.563 cv25.6929 125.41 24.876 125.717 24.3647 125.309 cv23.854 124.798 23.6499 124.185 23.7524 123.47 cv23.1909 123.112 22.6279 123.929 22.0664 123.47 cv21.1982 123.061 20.9424 122.193 21.0449 121.273 cv21.1982 121.12 li20.8916 120.865 20.0742 121.171 19.6143 120.865 cv18.4404 120.507 18.7461 119.026 18.8486 118.311 cv17.9292 118.668 16.8052 118.311 16.5498 117.34 cv16.6519 115.757 li16.1406 115.706 15.2729 115.91 14.813 115.348 cv14.3535 114.735 14.5068 114.02 14.813 113.407 cv15.4263 112.487 16.7544 112.998 17.1626 113.765 cvcpf104.56 116.574 mo104.508 117.238 104.304 117.8 103.588 117.8 cv103.027 117.953 102.516 117.544 102.465 117.085 cv102.261 116.522 102.72 116.216 103.079 115.858 cv103.743 115.706 104.304 116.063 104.56 116.574 cvcpf36.2661 116.727 mo36.3687 117.391 36.0112 118.004 35.3979 118.311 cv34.9385 118.208 34.3765 118.158 34.1719 117.596 cv34.0186 116.881 34.3257 116.114 35.0405 115.961 cv35.6021 115.858 36.062 116.268 36.2661 116.727 cvcpf69.0981 87.6631 mo68.3042 87.3975 67.5415 86.7583 66.812 87.4072 cv66.8623 87.501 66.9224 87.5854 66.9893 87.6631 cv69.0981 87.6631 licpf92.6021 50.5391 mo92.5581 51.1011 91.4321 51.2432 91.3296 50.375 cv91.6919 49.8525 92.4165 49.9658 92.6021 50.5391 cvcpf68.0972 71.3682 mo67.4888 71.0928 66.8691 70.9321 66.1992 71.3682 cv66.1992 71.3682 li68.0972 71.3682 licpf86.9868 122.82 mo87.0132 123.33 li85.4233 123.255 82.6382 124.061 82.7046 125.131 cv82.8423 126.85 86.5581 124.478 88.2759 126.08 cv88.8179 126.717 88.9692 127.681 88.7554 128.51 cv87.7339 130.607 85.4497 130.926 83.2524 130.985 cv82.6226 130.658 82.5435 130.1 82.561 129.434 cv84.1001 129.51 86.4614 129.699 87.397 127.965 cv86.772 125.694 84.2759 127.916 82.7124 127.33 cv81.8833 127.115 81.3521 126.733 81.0083 125.983 cv80.8804 124.455 82.2476 123.159 83.436 122.383 cv84.4487 122.18 86.7827 120.784 86.9868 122.82 cvcpf58.5889 128.69 mo58.1196 129.431 56.9614 129.98 56.1943 129.884 cv55.3296 129.979 54.1719 129.333 53.5342 128.854 cv53.6934 128.978 53.6616 127.697 54.2666 126.212 cv54.5933 125.413 54.708 125.137 54.7246 124.536 cv55.6929 124.462 57.1523 124.517 58.2705 125.382 cv59.1831 126.256 59.2524 127.634 58.5889 128.69 cvcp60.811 127.096 mo60.5186 125.333 59.8008 124.282 58.3311 123.538 cv56.7598 122.798 54.9185 122.788 53.2144 122.464 cv52.792 123.713 52.7373 124.386 52.4287 125.677 cv52.249 126.429 51.8779 127.818 51.5747 128.53 cv51.5518 129.094 50.6792 129.035 50.9165 129.688 cv53.6152 130.474 56.8525 132.816 59.6504 130.479 cv60.418 129.468 60.979 128.417 60.811 127.096 cvcpf69.8257 125.315 mo70.4858 127.021 71.3052 128.834 72.5479 130.152 cv72.7534 129.669 li73.708 128.292 74.2944 126.728 74.8809 125.165 cv75.3687 124.68 76.2505 124.942 76.9595 124.805 cv77.355 125.028 76.6499 125.511 76.1719 126.43 cv75.5034 128.407 74.0361 130.257 73.8882 132.412 cv73.1284 132.553 71.521 132.633 71.3091 132.478 cv70.5234 130.062 68.9678 127.608 67.3818 125.54 cv67.1138 125.041 67.9233 125.129 68.4775 124.96 cv69.2085 125 69.6826 125.016 69.8257 125.315 cvcpf79.6001 124.417 mo79.5181 127.387 80.2056 129.105 80.6294 131.437 cv80.0005 131.672 79.3071 131.848 78.6479 131.982 cv78.3882 129.848 78.1841 127.288 77.5356 125.07 cv77.4302 124.5 79.3599 124.225 79.6001 124.417 cvcpf63.8076 128.979 mo63.7783 128.713 64.1802 127.93 64.3398 127.607 cv64.5688 127.142 64.6138 127.136 64.8252 126.831 cv65.3296 127.458 65.1611 128.438 65.5469 128.981 cv65.1484 129.206 64.3149 128.902 63.8076 128.979 cvcp66.0596 124.928 mo63.3945 124.806 li63.1284 125.678 63.1929 125.837 62.8657 126.743 cv62.7061 127.185 62.2402 128.399 62.0093 128.813 cv61.6196 129.97 60.7949 130.868 60.5884 131.851 cv60.3701 132.335 61.9258 132.513 62.3877 132.54 cv62.7344 132.318 63.0532 131.535 63.2041 130.722 cv63.6714 130.354 65.291 130.784 66.0815 130.731 cv66.4536 130.764 66.3198 132.177 67.0649 132.754 cv67.7153 132.466 68.3125 133.151 68.792 132.515 cv67.6973 130.063 66.4551 127.721 66.0596 124.928 cvcpf97.6636 134.86 mo97.8677 135.933 97.5103 137.21 96.3364 137.313 cv95.4673 137.261 94.6509 137.005 94.4966 136.087 cv94.4966 135.218 94.855 134.35 95.6216 133.992 cv96.438 133.941 97.3062 134.043 97.6636 134.86 cvcpf94.1392 136.699 mo94.1392 137.567 93.7817 138.487 92.9136 138.794 cv92.0962 139.049 91.228 138.437 90.8188 137.67 cv90.6665 136.699 91.4321 135.831 92.3013 135.575 cv93.0161 135.626 93.9351 135.883 94.1392 136.699 cvcpf49.6494 137.823 mo49.6494 138.18 li50.0576 137.517 51.1304 137.313 51.9478 137.823 cv52.6631 138.18 52.6631 139.253 52.459 140.019 cv51.999 140.581 51.0796 140.837 50.4663 140.377 cv50.0068 139.968 49.6494 139.509 49.6494 138.896 cv49.2407 139.457 48.0146 139.968 47.1978 139.406 cv46.4824 138.946 46.4312 138.078 46.584 137.414 cv46.7881 136.903 47.3506 136.647 47.8105 136.444 cv48.5254 136.597 49.394 137.005 49.6494 137.823 cvcpf90.4614 137.567 mo90.5132 138.588 90.4614 139.56 89.3384 139.765 cv88.4185 139.917 87.4478 139.406 87.2437 138.537 cv87.2954 137.772 87.5503 136.903 88.3677 136.699 cv89.2349 136.597 90.104 136.699 90.4614 137.567 cvcpf87.1411 138.896 mo87.3462 139.968 86.7837 140.99 85.814 141.245 cv84.9966 141.194 84.1782 140.786 83.9751 140.019 cv84.2808 139.253 84.1782 138.026 85.3032 137.925 cv86.0181 137.976 86.8345 138.129 87.1411 138.896 cvcpf55.2681 138.794 mo55.5742 139.1 55.9834 139.814 55.6255 140.377 cv55.2168 140.99 54.3481 141.5 53.5317 141.092 cv52.8164 140.633 52.8672 139.61 53.0713 138.896 cv53.5825 138.333 54.7573 137.925 55.2681 138.794 cvcpf59.2012 139.866 mo59.354 140.837 58.5879 141.704 57.7202 141.858 cv56.8003 141.858 56.0337 141.041 55.9834 140.121 cv56.0337 139.406 56.4429 138.896 57.1069 138.641 cv57.9751 138.641 58.9971 139.1 59.2012 139.866 cvcpf83.7183 140.019 mo83.7183 140.938 83.3101 141.603 82.4937 141.96 cv81.6763 141.908 80.7563 141.908 80.3989 140.99 cv80.1431 141.704 79.5308 142.267 78.8159 142.471 cv78.1011 142.369 77.436 142.216 77.2319 141.5 cv76.9761 140.325 77.4878 139.406 78.5591 139.253 cv79.2241 139.406 79.939 139.713 80.2964 140.377 cv80.4507 139.713 80.9604 138.998 81.6255 138.794 cv82.4937 138.794 83.4136 139.1 83.7183 140.019 cvcpf62.6235 140.377 mo62.6235 141.092 62.2656 141.908 61.4995 142.114 cv60.6309 142.216 60.0186 141.5 59.5586 140.888 cv59.3032 140.121 59.7632 139.56 60.4268 139.151 cv61.3462 138.794 62.3174 139.457 62.6235 140.377 cvcpf65.9434 140.633 mo65.79 141.245 65.79 141.808 65.1772 142.114 cv64.5649 142.471 63.9512 142.471 63.3389 142.114 cv62.7764 141.603 62.9297 140.529 63.2363 140.019 cv63.7983 139.253 65.8926 139.151 65.9434 140.633 cvcpf73.146 140.888 mo73.4521 141.808 72.7881 142.522 72.0728 142.828 cv71.4092 143.084 70.7451 142.727 70.2344 142.318 cv69.9277 142.114 70.1318 141.654 69.7236 141.5 cv69.3662 142.012 69.0591 142.88 68.2427 142.931 cv67.374 142.828 66.4033 142.267 66.4033 141.245 cv66.4033 140.529 66.8628 139.814 67.5273 139.661 cv68.7529 139.304 69.417 140.377 69.8765 141.092 cv69.8257 140.479 70.3359 139.814 70.9492 139.661 cv71.8179 139.457 72.9927 139.814 73.146 140.888 cvcpf76.8232 140.734 mo76.9761 141.654 76.6191 142.573 75.7505 142.828 cv74.9849 143.033 73.9121 142.624 73.6563 141.704 cv73.5034 140.938 73.8608 140.428 74.2695 139.866 cv75.1382 139.406 76.5684 139.56 76.8232 140.734 cvcpf50.3516 47.2974 mo50.7666 45.6694 li51.1499 47.2974 li50.3516 47.2974 licp51.5015 44.7944 mo51.4814 44.437 50.7026 44.6094 49.9878 44.6606 cv49.9028 45.001 49.2939 48.1519 49.1704 49.0474 cv49.6372 49.2021 49.8389 49.0264 50.0332 49.0459 cv50.2417 48.6592 50.1572 48.5791 50.2749 48.1787 cv50.4414 48.1021 51.1177 48.0732 51.2344 48.1201 cv51.2466 48.1201 51.4106 49.0654 51.4941 49.063 cv51.5962 49.1387 52.1875 48.9951 52.3242 48.9829 cv52.2354 48.2686 51.5518 45.9185 51.5015 44.7944 cvcpf128.209 90.0122 mo127.548 95.2598 125.917 100.073 122.75 104.289 cv122.001 105.285 121.167 106.248 120.241 107.175 cv116.819 111.415 115.083 118.004 109.31 120.047 cv106.296 122.958 102.415 124.134 99.6558 127.402 cv98.8892 127.964 98.022 127.811 97.2046 127.504 cv95.1606 125.972 95.5688 123.266 94.4966 121.273 cv94.0103 120.723 93.2319 119.83 92.769 119.264 cv92.1157 118.465 91.8364 117.969 91.688 116.982 cv92.3979 116.818 93.5298 116.378 94.188 116.106 cv95.3755 115.615 96.0327 115.162 97.0513 114.276 cv98.2739 112.969 100.11 111.449 101.575 110.372 cv102.803 109.468 103.637 108.97 104.917 108.248 cv104.917 108.248 107.625 105.528 108.135 104.762 cv108.646 103.995 109.718 101.761 109.718 101.761 cv109.88 101.276 110.053 100.797 110.239 100.323 cv110.989 98.3975 111.932 96.561 113.08 94.7881 cv113.613 93.9648 114.217 93.0732 114.827 92.311 cv115.005 90.6377 115.652 89.1489 116.306 87.6631 cv117.149 85.7471 118.006 83.835 117.891 81.5337 cv119.625 78.2603 119.369 74.8501 118.932 71.3682 cv118.572 68.4927 118.088 65.5684 118.504 62.6338 cv116.642 56.2915 116.874 49.3584 112.029 43.3711 cv111.403 42.5557 111.005 42.1621 110.178 41.4355 cv106.347 36.9922 103.435 30.3008 97.0513 28.8193 cv93.1177 24.0181 87.397 22.9966 82.2378 20.8511 cv72.1753 18.7568 li71.1533 18.042 71.4092 16.4072 70.2344 16.0498 cv69.6211 17.1226 69.187 17.9395 68.5166 19.0439 cv61.5703 18.4316 55.8809 22.792 49.2407 23.3027 cv44.6436 28.5645 37.2881 29.5859 33.457 35.2046 cv30.6475 39.1377 26.9697 42.8662 26.3574 47.9233 cv22.0151 53.8994 20.6362 61.2036 19.9722 68.5591 cv20.0542 69.4844 20.0762 70.4248 20.0752 71.3682 cv20.0718 75.7397 19.5825 80.2012 22.271 83.7295 cv21.8618 90.2681 26 95.1714 28.6553 100.534 cv30.9565 103 34.2168 107.257 36.6846 109.745 cv38.0513 111.124 38.6665 111.473 39.9507 111.83 cv40.5 112.456 41.189 112.845 41.8101 113.348 cv44.3433 115.335 45.7798 115.948 47.6567 117.442 cv46.9976 118.832 46.6479 119.604 46.1177 121.048 cv45.4966 122.734 44.7227 125.103 44.3369 126.892 cv43.6729 128.016 42.498 128.731 41.1699 128.22 cv35.2959 126.432 31.2095 120.967 25.9487 117.596 cv24.314 115.961 23.8032 113.561 22.4233 111.824 cv17.8271 107.277 14.0474 101.71 12.7188 95.5293 cv10.4204 90.9321 9.24512 85.875 8.0708 80.8188 cv8.24658 77.6685 8.00977 74.4937 7.81104 71.3682 cv7.43115 65.4219 7.18555 59.6528 10.1646 54.563 cv10.7266 48.7915 13.2808 43.5811 16.1406 38.9839 cv18.8994 36.6855 18.6445 32.7524 21.5557 30.6582 cv23.0879 28.9727 24.5181 27.3379 26.459 26.3677 cv30.1367 22.0771 33.917 18.0928 38.8203 16.0498 cv42.2939 14.1602 45.3076 11.2993 49.4961 11.2993 cv50.1602 11.8608 50.3135 10.584 51.0796 10.6865 cv53.6333 9.10254 57.1069 9.86865 59.5586 8.08154 cv64.4116 6.44678 70.5918 6.08936 75.7505 7.00879 cv80.9604 8.43896 86.3755 9.51172 91.688 10.7881 cv95.3647 12.2188 99.0942 14.1084 101.955 16.918 cv109.208 20.4937 116.206 26.4189 119.526 33.8252 cv127.341 40.4658 126.728 50.9883 131.171 59.2124 cv131.924 63.3042 131.172 67.3291 131.684 71.3682 cv131.797 72.2695 131.974 73.1719 132.245 74.0757 cv132.091 79.8472 129.435 84.6494 128.209 90.0122 cvcp94.4966 126.023 mo94.395 126.33 93.9858 126.483 93.6284 126.381 cv90.9214 122.958 li90.2573 120.66 90.6665 117.442 87.7544 116.472 cv87.1929 116.216 86.3247 116.42 86.0181 115.757 cv86.6821 113.203 89.8491 114.224 91.5347 112.896 cv92.3013 113.049 li93.0669 114.786 90.3091 114.939 90.564 116.727 cv90.6597 118.054 91.3354 119.15 92.105 120.207 cv93.3794 121.958 94.9106 123.604 94.4966 126.023 cvcp86.2407 117.123 mo86.3628 117.327 86.8345 117.391 87.0396 117.442 cv87.0396 117.596 87.104 117.781 86.9507 117.832 cv86.6841 117.891 li86.3687 117.959 li86.2407 117.123 licp88.98 132.153 mo86.4263 132.715 83.5142 132.408 81.3696 133.89 cv78.9683 133.839 77.2837 135.422 74.8823 135.371 cv69.6724 134.86 63.6963 135.014 58.4346 133.379 cv54.6553 133.43 50.1602 134.35 48.168 130.672 cv48.0747 130.327 47.9585 129.769 47.9395 129.445 cv47.8066 127.18 49.3906 125.618 50.4316 123.638 cv51.0444 122.47 51.3828 121.296 51.3345 119.792 cv52.2544 119.23 53.0713 120.405 54.0425 120.507 cv55.7173 120.389 57.3003 120.552 58.8447 120.846 cv63.2793 121.689 67.3911 123.603 72.4302 122.958 cv76.1592 122.448 78.8667 119.384 82.9526 119.639 cv84.4438 119.792 85.8218 119.63 87.062 119.153 cv87.48 118.993 87.8804 118.797 88.2651 118.566 cv88.8774 120.251 li88.98 123.367 90.8188 125.717 92.3013 128.22 cv92.6587 130.263 90.1548 130.978 88.98 132.153 cvcp52.8164 117.8 mo52.8164 118.17 li52.8164 118.566 li52.459 118.413 51.3857 118.413 51.9478 117.697 cv52.8164 117.8 licp47.7061 110.114 mo47.8008 109.818 47.7334 109.985 47.9131 109.729 cv48.5762 110.955 50.1602 111.21 51.3345 110.699 cv51.7949 110.24 52.561 110.036 52.7144 109.372 cv52.6631 108.503 51.9478 107.635 51.0796 107.38 cv50.5176 107.482 50.0068 107.89 49.7515 108.401 cv49.6494 108.708 49.9048 108.912 50.1089 109.116 cv50.6196 109.116 li50.6196 109.321 50.3647 109.423 50.2622 109.627 cv49.9048 109.423 49.3428 109.474 49.2407 109.014 cv49.6494 107.839 50.1602 106.205 49.1387 105.184 cv49.2285 104.751 49.2939 104.438 49.3296 104.289 cv49.5786 103.54 49.8662 102.539 50.4023 102.144 cv52.0371 104.276 li52.0464 104.302 52.3115 104.774 52.3203 104.8 cv52.9946 106.605 54.1514 107.61 54.6553 109.474 cv54.3193 110.42 54.2573 111.459 54.0977 112.457 cv53.7354 113.958 53.8389 113.782 53.5317 114.377 cv51.7432 113.458 50.1602 111.619 47.9131 112.079 cv46.7881 113.305 li47.21 112.462 47.293 111.479 47.7061 110.114 cvcp45.563 114.377 mo44.439 114.02 43.8135 113.439 42.1846 112.066 cv41.2275 111.172 40.6079 110.444 39.4331 109.985 cv39.0762 109.627 li39.689 109.065 39.9438 108.146 40.5576 107.789 cv40.6313 108.217 40.6885 108.681 40.7749 109.135 cv41.1055 110.269 41.3813 111.308 42.6514 111.67 cv43.3154 112.13 43.6216 114.02 45.103 113.509 cv45.563 114.377 licp46.3247 109.226 mo46.1333 109.986 46.1602 110.088 45.8184 110.24 cv45.3076 109.525 44.2861 108.708 44.4902 107.789 cv45.1543 108.197 47.04 107.796 46.3247 109.226 cvcp44.2349 105.694 mo43.9287 106.665 42.856 107.329 43.0093 108.503 cv43.6729 109.831 45.0015 110.598 45.3589 112.079 cv45.2559 112.283 44.8984 112.334 44.5928 112.283 cv44.0303 111.619 44.3369 110.291 43.0093 110.444 cv42.2695 110.133 42.0562 109.316 42.0083 108.753 cv41.9302 107.838 42.2866 107.066 41.5278 106.307 cv40.8086 105.618 39.8442 105.052 39.3853 104.289 cv39.061 103.752 38.9897 102.989 39.4331 102.144 cv44.4395 102.144 li45.0518 102.195 44.8608 102.885 44.8477 103.702 cv44.7998 103.905 44.7915 104.103 44.8149 104.289 cv44.8916 104.898 45.3101 105.384 45.8184 105.541 cv46.9932 105.49 48.168 106 48.6279 107.022 cv47.0952 107.175 45.4097 106.46 44.2349 105.694 cvcp48.0146 102.374 mo47.9927 102.752 47.6489 103.945 47.5537 104.289 cv47.5039 104.41 47.458 104.446 47.2998 104.723 cv46.8911 104.723 46.5278 104.706 46.3232 104.297 cv45.9863 103.267 46.6982 101.208 48.0146 102.374 cvcp37.7793 100.152 mo37.7793 93.7222 li39.0854 93.7471 li39.0762 99.3296 li39.0762 99.3296 44.5542 99.2959 46.8418 99.3232 cv47.4658 100.152 li37.7793 100.152 licp69.3662 26.8784 mo68.2935 29.1768 67.2524 31.2461 65.5923 33.4678 cv65.541 31.6802 65.6621 30.4922 65.79 28.5645 cv65.2744 27.8843 64.5562 27.2197 63.9043 26.5317 cv63.3301 25.9258 62.8081 25.3003 62.5215 24.6304 cv64.9858 25.2314 67.1187 26.125 69.3662 26.8784 cvcp70.3306 25.7163 mo69.4619 24.8735 68.8042 23.9858 68.1396 23.1694 cv68.2139 22.8516 68.5361 22.1812 68.6997 21.8496 cv69.1699 20.8921 69.7095 20.1792 70.0747 18.7373 cv70.3623 18.3545 li70.4712 21.0815 70.3237 23.252 70.3306 25.7163 cvcp113.922 87.6631 mo113.733 87.1357 113.651 86.5347 113.613 86.1509 cv113.506 85.0537 113.763 84.5728 112.885 83.8828 cv111.098 81.3804 108.442 79.2349 106.245 77.2422 cv106.092 76.2725 107.215 76.374 107.625 75.7612 cv108.339 74.8418 109.106 74.0757 109.922 73.4629 cv113.415 77.1357 li116.92 80.8188 li116.744 83.2534 116.068 85.5347 115.092 87.6631 cv114.943 87.9897 114.786 88.3135 114.623 88.6333 cv114.297 88.458 114.076 88.0845 113.922 87.6631 cvcp113.397 89.7573 mo113.856 89.7065 114.009 90.2681 114.112 90.6255 cv113.852 91.895 112.91 93.3003 112.137 94.3623 cv111.387 95.3936 110.809 96.0825 110.333 97.2144 cv109.872 97.2144 109.667 96.7041 109.565 96.3467 cv110.28 93.8433 112.733 92.311 113.397 89.7573 cvcp108.851 94.0474 mo108.851 94.0474 108.263 94.8652 107.305 95.6313 cv106.347 96.3975 104.988 96.793 104.988 96.793 cv102.579 97.0786 98.2925 97.793 95.2671 97.5068 cv94.2144 97.4082 93.4312 97.1694 92.4019 96.6016 cv87.9077 95.938 82.8511 96.0908 79.1733 92.9243 cv77.6919 92.9243 li78.3472 91.249 77.0298 89.1069 77.4966 87.6631 cv77.6841 87.0815 78.1606 86.6133 79.1733 86.335 cv81.9673 85.3545 83.6157 86.5342 86.1255 87.3755 cv86.23 87.4106 89.0171 87.9873 89.1216 88.0205 cv92.1538 88.4224 91.9106 89.0869 94.8228 89.3423 cv94.8228 89.3423 96.2271 89.3613 96.4956 89.3999 cv100.083 89.1162 105.827 91.6816 107.656 87.6631 cv107.824 87.334 107.967 86.9619 108.084 86.5391 cv108.446 85.7183 108.438 84.855 108.227 83.9722 cv108.11 83.4819 107.909 82.9414 107.726 82.5039 cv109.259 83.6787 112.11 83.9185 112.006 86.2778 cv112.006 86.2778 111.891 87.2017 111.768 87.6631 cv111.174 89.8857 109.678 92.0776 108.851 94.0474 cvcp101.239 102.221 mo103.079 102.118 101.955 100.075 102.72 99.0532 cv104.866 98.8491 106.807 98.083 108.697 97.3677 cv109.463 98.7979 li109.384 99.2031 109.278 99.5928 109.148 99.9697 cv108.097 103.022 105.509 105.254 103.692 107.89 cv103.334 107.789 li102.772 105.949 101.647 104.06 101.239 102.221 cvcp72.3579 99.7651 mo72.7476 100.019 73.0752 100.361 73.2988 100.791 cv72.564 101.125 71.4375 101.242 70.209 101.269 cv69.25 101.219 68.9053 101.065 68.1396 100.534 cv68.2427 99.6665 69.3662 99.6152 69.9785 99.207 cv70.8208 99.1421 71.6836 99.3232 72.3579 99.7651 cvcp71.4326 88.0054 mo71.2368 87.5674 li71.3643 86.7563 72.2651 86.5513 73.2988 86.1816 cv73.8701 85.9912 75.0234 85.8984 75.3652 85.8667 cv75.9146 85.8115 76.2197 85.7598 76.7217 85.5688 cv77.1304 85.4663 77.3853 85.7217 77.6919 85.8242 cv76.313 88.1738 73.2715 86.3711 71.4326 88.0054 cvcp71.2051 90.2168 mo71.2559 88.7866 73.248 88.5825 74.3721 88.0205 cv75.0352 88.6333 76.3638 87.3057 76.3638 88.7866 cv75.749 89.2983 74.9165 89.3999 74.0718 89.5024 cv73.231 89.6045 72.3774 89.707 71.7153 90.2168 cv71.2051 90.2168 licp76.4658 91.3408 mo75.5752 91.27 75.0259 91.3296 74.2534 91.543 cv73.3418 91.7949 72.2192 92.2349 71.3066 92.5664 cv70.8984 91.749 72.022 91.2896 72.5327 90.9834 cv72.9663 90.7148 73.4736 90.4478 74.0068 90.3564 cv74.7935 90.2202 75.6333 90.3398 76.3638 90.3696 cv76.6191 90.9834 li76.4658 91.0342 76.4658 91.1875 76.4658 91.3408 cvcp72.7881 97.5718 mo73.0439 97.3677 73.4014 97.3677 73.6563 97.2144 cv73.8345 97.5264 73.9922 98.1963 74.0601 98.5391 cv74.2061 98.918 74.1504 99.0942 74.5249 99.4111 cv74.4287 99.4546 73.6987 98.814 73.2646 98.5176 cv72.8491 98.2334 72.688 98.022 72.7881 97.5718 cvcp71.3066 95.0186 mo70.8472 93.4351 72.9414 93.6899 73.6563 92.8218 cv73.7681 92.7847 74.522 92.5874 74.6411 92.5498 cv75.3398 92.3311 75.5122 92.3047 76.2104 92.5664 cv76.4473 93.7871 75.1982 93.6128 73.8125 93.7441 cv73.5571 93.7695 73.3042 93.8813 73.0762 93.9907 cv71.3066 95.0186 licp73.8516 95.0986 mo74.4604 94.9912 74.5044 94.916 74.7803 94.916 cv74.7524 95.3774 74.6455 95.6406 74.4702 95.8052 cv73.9526 96.2119 73.1836 96.2949 71.8179 96.8569 cv71.46 96.8569 li72.0728 96.1626 72.7559 95.3691 73.8516 95.0986 cvcp64.9092 102.157 mo65.6792 102.132 66.2827 102.139 67.1548 102.146 cv68.1162 102.712 69.25 103.063 70.625 103.028 cv70.8774 103.007 71.4541 102.961 71.7153 102.885 cv72.5967 102.686 73.4395 102.502 74.3076 102.144 cv76.6064 102.042 78.854 102.233 81.3306 102.157 cv81.3306 103.332 80.5005 104.519 79.4282 104.826 cv74.0137 106.205 67.9736 105.521 63.6836 102.15 cv64.1328 102.15 64.5303 102.154 64.9092 102.157 cvcp63.8237 99.3345 mo66.6968 99.3345 li66.1226 100.165 li64.7495 100.165 li62.2915 100.165 li61.8442 99.3345 li63.8237 99.3345 licp61.3594 95.7334 mo62.9771 95.7354 64.9502 96.4604 65.4312 96.6597 cv66.0024 96.8965 66.7168 97.2671 67.2715 97.5718 cv66.4541 97.2144 60.4976 96.6465 61.3594 95.7334 cvcp61.2954 97.3037 mo62.8789 97.5083 65.458 97.4316 66.48 98.5557 cv65.6753 98.5322 64.5996 98.4209 63.8242 98.3257 cv62.9131 98.2139 62.3057 98.1196 61.4229 98.147 cv61.3213 97.6875 60.9888 97.5083 61.2954 97.3037 cvcp82.6099 96.9912 mo82.3716 97.1719 82.1284 97.354 81.8481 97.438 cv81.6743 97.1235 81.6011 96.7925 81.6011 96.6206 cv81.6011 95.8867 82.9185 96.395 83.2095 96.6016 cv83.0005 96.6948 82.8081 96.8428 82.6099 96.9912 cvcp95.5239 99.4375 mo97.2886 99.4863 99.5083 99.542 101.208 99.4429 cv101.233 99.7241 101.247 99.9092 101.208 100.177 cv84.7915 100.177 li84.3325 99.6665 li84.9956 99.5674 86.6841 99.4609 87.3521 99.4063 cv90.4126 99.1558 92.4907 99.3516 95.5239 99.4375 cvcp86.5874 97.9868 mo83.1763 98.1851 li84.4702 97.5928 li85.2769 97.2144 li88.6929 97.8281 li86.5874 97.9868 licp80.3989 98.1851 mo80.8589 99.2583 82.1353 99.8711 82.7485 100.637 cv81.6763 101.557 80.2964 100.586 79.0708 100.534 cv77.7427 99.7686 76.2744 99.188 75.6553 98.2427 cv75.0171 97.3979 75.2217 96.4277 75.4165 95.9395 cv75.6084 95.4595 75.7788 95.3477 76.1079 95.0186 cv76.8232 94.6611 77.4878 94.2012 78.3052 94.1504 cv79.2241 94.4053 80.2466 94.7627 80.6548 95.6313 cv80.6196 95.9287 80.6274 95.8755 80.5132 96.1714 cv80.2935 96.7383 79.9634 97.6479 80.3989 98.1851 cvcp99.0103 66.2671 mo98.1812 65.9409 li98.1753 38.9658 li99.0103 39.061 li99.0103 66.2671 licp98.4302 70.5005 mo97.6138 70.6025 96.8462 70.3979 96.438 69.7852 cv96.689 69.5156 97.564 69.293 97.98 69.2139 cv98.6636 69.0825 98.9224 69.2832 99.145 69.8867 cv99.3501 70.3979 98.7876 70.5513 98.4302 70.5005 cvcp102.536 77.0132 mo103.148 77.064 104.56 76.9365 104.815 77.6006 cv104.049 77.6006 103.295 78.1753 102.53 78.1753 cv102.448 78.0796 102.348 77.7329 102.303 77.6016 cv102.176 77.2422 102.236 77.0498 102.536 77.0132 cvcp99.8921 76.0811 mo100.319 76.2339 100.473 76.5786 101.169 76.8916 cv101.169 77.249 101.169 77.1548 101.201 77.4121 cv101.201 77.7329 101.169 78.5327 101.169 78.5068 cv100.863 78.6094 100.097 78.9155 99.8853 78.9478 cv99.895 78.043 li99.8921 76.0811 licp99.0103 79.0815 mo98.1753 79.3057 li98.1753 79.3057 98.1636 75.4419 98.1636 74.9707 cv98.4155 75.2104 98.6753 75.4316 99.0103 75.5063 cv99.0054 78.0405 li99.0063 78.2813 99.0103 78.8418 99.0103 79.0815 cvcp97.313 74.2974 mo97.4937 74.3784 97.6509 74.502 97.8013 74.6357 cv97.5884 74.4795 97.3599 74.3286 97.313 74.2974 cvcp96.5659 74.21 mo96.8511 74.1597 97.0874 74.2017 97.2964 74.292 cv97.2739 79.4067 li97.2808 79.3691 96.9429 79.5352 96.5718 79.5352 cv96.5894 78.8081 li96.5659 74.21 licp94.8667 78.8384 mo94.855 74.561 li94.9839 74.4873 95.6616 74.1963 95.7056 74.3701 cv95.731 75.5229 95.7603 77.3223 95.7407 78.8071 cv95.7466 79.2681 95.7563 79.293 95.7485 79.5664 cv94.855 79.6626 li94.8579 79.3408 94.8794 79.249 94.8667 78.8384 cvcp92.9136 77.7534 mo93.1177 77.7026 93.4712 77.6509 93.7183 77.5049 cv93.7085 78.0239 93.7349 78.2236 93.7222 78.5508 cv93.7104 78.8364 93.6704 79.2813 93.7183 79.6304 cv93.2642 79.6689 93.0415 79.2856 92.6968 79.0493 cv92.5396 78.8828 92.1177 78.2852 92.0034 78.0923 cv91.7339 77.5625 91.8013 77.1255 92.0454 76.2725 cv92.3013 75.8057 93.0288 74.7202 93.6919 74.8228 cv93.6997 76.2783 li93.2241 76.708 92.3657 76.8335 92.9136 77.7534 cvcp97.8804 88.3013 mo97.8296 88.3521 97.2046 88.3271 97.0513 88.2754 cv96.9146 88.1177 96.9263 87.896 96.9849 87.6631 cv97.0591 87.3711 97.2075 87.0601 97.2358 86.8325 cv97.2778 86.9155 97.5044 87.332 97.6704 87.6631 cv97.7935 87.9351 97.8647 88.0698 97.8804 88.3013 cvcp99.0103 88.3652 mo98.6851 88.3335 li98.6157 88.1069 98.6714 88.2891 98.4692 87.6631 cv98.2798 87.1133 97.8921 86.3403 99.0103 86.2461 cv98.9966 87.6631 li98.9907 87.8867 99.0083 88.166 99.0103 88.3652 cvcp101.169 88.5313 mo100.222 88.4004 100.663 88.521 99.8853 88.3975 cv99.9067 87.6631 li99.8872 87.2251 99.8853 86.5576 99.9106 85.9834 cv100.372 85.7793 100.665 85.626 101.176 85.4023 cv101.186 85.9902 101.173 86.9653 101.176 87.5996 cv101.164 88.1831 101.162 88.2158 101.169 88.5313 cvcp103.792 80.9199 mo100.678 83.0146 97.7144 86.335 93.3735 84.854 cv92.3013 84.6494 91.5347 83.9346 91.1763 82.8613 cv91.0884 81.835 90.7554 80.3799 90.5376 79.415 cv90.3765 78.7002 90.3364 78.4712 90.2065 77.7534 cv90.5435 78.3384 90.7847 78.7075 91.3687 79.2578 cv92.1118 79.958 93.2534 80.7939 94.1392 81.0229 cv97.1978 81.4951 101.801 79.0308 105.786 78.9795 cv106.959 79.3882 108.186 80.2051 108.851 81.4312 cv107.42 81.2271 105.53 79.8994 103.792 80.9199 cvcp103.435 83.8828 mo104.406 83.3721 105.428 82.2998 106.5 82.8613 cv107.151 84.5308 li107.267 84.9556 li107.205 86.0464 107.104 86.5732 106.531 87.4072 cv106.415 87.5459 105.885 88.0498 105.697 88.1479 cv105.546 88.0176 105.373 87.7695 105.292 87.6563 cv104.756 86.6807 103.947 84.8408 103.435 83.8828 cvcp102.855 86.335 mo103.044 86.6509 103.476 87.252 103.776 87.6606 cv103.992 88.1479 li104.061 88.4863 104.1 88.1992 104.202 88.6333 cv102.855 88.6333 li102.855 88.562 102.881 88.6621 102.883 87.5996 cv102.862 87.3867 102.86 86.8994 102.855 86.335 cvcp104.049 64.3711 mo103.588 64.3711 103.031 64.064 102.877 63.6558 cv102.877 62.334 li102.877 61.8174 li103.286 62.7363 105.122 63.2983 104.049 64.3711 cvcp109.821 64.4731 mo109.872 65.3921 110.689 65.75 111.301 66.3115 cv110.893 67.0781 109.975 67.1294 109.208 67.3335 cv109.055 64.8813 107.267 63.5024 106.245 61.4082 cv106.143 60.5908 105.683 59.6714 104.815 59.3643 cv103.896 59.1602 102.955 60.0928 102.877 60.7949 cv102.921 59.6665 102.864 55.7905 102.877 54.9849 cv110.536 61.3062 li109.718 62.1226 109.616 63.3999 109.821 64.4731 cvcp102.877 66.21 mo103.592 66.3115 104.253 67.1294 104.662 67.6909 cv104.1 68.5083 104.001 69.8867 102.877 70.1426 cv102.78 69.5513 102.881 68.1064 102.877 67.4736 cv102.897 66.9766 102.847 66.7808 102.877 66.21 cvcp99.8853 66.6953 mo99.8853 39.1948 li100.347 39.2295 100.596 39.2754 101.176 39.3931 cv101.18 66.8037 li101.176 69.7852 li100.626 69.8867 li100.626 69.8867 100.633 68.9741 100.473 68.2085 cv100.314 67.4419 99.8853 66.6953 99.8853 66.6953 cvcp102.077 71.4526 mo102.917 71.4424 li103.683 71.3486 104.433 70.9116 104.815 69.8867 cv105.223 68.8657 106.042 67.8442 105.53 66.5674 cv103.947 65.1367 106.194 62.5322 104.049 61.3062 cv103.997 60.9995 104.049 60.5908 104.406 60.5908 cv105.326 62.0723 106.042 63.8599 106.859 65.4951 cv107.318 66.6689 107.012 68.1504 107.625 69.2739 cv109.106 68.3037 111.456 68.5083 112.273 66.7202 cv112.426 64.9839 109.514 64.8306 110.944 62.8896 cv111.148 62.6338 li111.71 63.0942 111.71 63.7065 111.405 64.2686 cv112.273 65.5454 113.447 67.0781 112.63 68.7632 cv112.039 69.3389 111.875 69.4829 111.428 69.8359 cv110.459 70.606 107.651 72.8931 106.859 74.1782 cv105.581 75.25 103.692 75.7612 101.955 75.1484 cv100.726 74.7124 99.144 73.082 98.3491 71.9961 cv98.2456 71.8579 98.2349 71.8276 98.1753 71.7261 cv98.4038 71.563 98.646 71.4478 98.8979 71.3682 cv99.854 71.0693 101.071 71.3716 102.077 71.4526 cvcp96.5659 38.8569 mo97.2681 38.895 li97.2681 65.8267 li96.5718 65.8267 li96.5659 38.8569 licp94.855 66.2734 mo94.855 57.6919 94.855 47.1826 94.855 38.8569 cv95.7153 38.8569 li95.7153 65.9092 li95.728 65.8892 94.856 66.2646 94.855 66.2734 cvcp98.2769 67.4355 mo98.6851 67.9458 li98.2681 68.0977 97.9272 68.0977 97.438 68.1543 cv96.6089 68.249 95.6548 68.4448 95.3647 69.377 cv95.3267 70.2217 95.7349 70.6113 96.2368 71.2334 cv96.4019 71.4385 96.7192 71.8677 96.8462 72.0835 cv95.979 72.6968 94.4966 72.4922 93.5269 72.6968 cv92.0962 73.3604 90.564 74.6377 90.7173 76.374 cv90.4614 76.6299 li89.5933 76.1958 89.7593 74.6763 89.8999 73.9351 cv90.0405 73.1953 90.1548 73.2329 90.2065 72.5947 cv90.7681 70.4497 93.6802 70.6025 93.7817 68.3037 cv95.1099 67.3335 96.5903 67.0781 98.2769 67.4355 cvcp70.6943 44.6543 mo70.2344 42.8662 73.708 43.5811 72.0728 42.0493 cv71.2051 42.3042 li71.5112 41.5386 72.4302 40.3633 73.4014 39.8525 cv78.0718 37.1089 82.6001 39.209 88.1177 39.6421 cv89.9731 39.7935 91.7876 39.6387 93.6919 38.9526 cv93.7124 66.6343 li93.645 67.2192 93.5093 67.1646 92.5552 67.9458 cv91.9937 67.793 91.4829 68.0488 91.3296 68.5591 cv91.5347 68.7124 91.3804 69.019 91.688 69.1724 cv91.1763 69.6318 90.3091 71.2661 89.0825 70.6025 cv88.8774 70.7559 88.8267 70.96 88.8774 71.2153 cv88.9419 71.2627 88.9507 71.4897 89.0024 71.5439 cv89.2808 71.8398 89.4243 72.0527 89.3384 72.4409 cv88.7759 72.9009 87.9595 72.0327 87.4985 72.8501 cv87.5503 73.6162 88.4185 73.4629 88.8774 73.8203 cv88.7456 74.1382 88.7554 74.1396 88.7661 74.4971 cv88.7964 75.5171 89.0679 76.9287 87.856 77.3452 cv87.6011 78.418 88.8267 77.856 89.2349 78.3662 cv89.3384 78.9028 89.3823 78.9219 89.5044 79.4775 cv89.6255 80.0327 89.8228 81.1245 89.8491 81.6357 cv88.1128 81.7886 li87.8052 83.2197 90.5132 81.8398 90.3091 83.6279 cv90.9214 84.2915 88.4692 84.9048 90.2065 85.3135 cv91.7388 84.8022 92.3511 86.437 93.6284 86.437 cv94.1157 86.6992 94.0259 87.1826 93.9829 87.6631 cv93.9683 87.8369 93.9595 88.0107 93.9858 88.1738 cv93.731 88.4292 93.3735 88.3652 93.1694 88.1099 cv93.2661 88.0327 93.3286 87.7583 93.3843 87.6655 cv93.4731 87.5151 93.5269 87.3418 93.5269 87.1519 cv92.3013 86.1304 90.5132 87.7139 89.4907 86.335 cv87.0396 86.0796 85.0474 85.875 82.8511 85.1089 cv81.1646 84.9048 79.3774 85.4155 77.9468 84.7007 cv77.4878 84.8022 76.8745 84.4966 76.6191 84.9556 cv76.0645 84.9238 75.501 84.9419 74.9375 84.979 cv73.9683 85.0313 72.4341 85.2993 71.3066 85.7217 cv70.8472 84.9556 71.6133 84.3936 72.1753 84.0869 cv72.9414 83.9854 73.7583 83.9346 74.3721 83.4741 cv74.4229 83.1675 74.3721 82.8101 74.0137 82.7593 cv71.3066 83.27 li71.6646 81.8906 73.248 82.0439 74.2695 81.5337 cv74.8823 81.5845 75.3931 81.4824 75.8535 81.1763 cv75.9551 80.7671 75.4956 80.665 75.2393 80.5625 cv73.9121 80.2568 72.686 80.9717 71.46 81.2783 cv71.0518 81.1245 71.1533 80.665 71.3066 80.4097 cv72.686 79.4897 74.3721 79.2349 76.1079 79.1841 cv76.4658 78.8262 li75.189 77.7534 73.6055 78.8262 72.1753 78.8262 cv71.8687 78.9282 71.6133 79.1841 71.2051 79.0815 cv70.8984 78.8262 71.3066 78.7236 71.3066 78.4688 cv72.6348 77.3955 74.2695 77.0381 76.0063 76.8848 cv76.0063 76.6807 76.4146 76.4766 76.1079 76.2725 cv75.1382 75.7104 73.6563 76.1694 72.5327 76.5273 cv72.1753 76.7832 71.7671 76.9365 71.46 77.3452 cv70.8984 77.0381 70.9492 76.1694 71.3066 75.7612 cv72.4302 74.7397 74.1675 75.1997 75.5977 74.8931 cv75.8022 74.7397 76.2104 74.4331 75.8535 74.1782 cv74.3208 73.4629 72.8394 74.4331 71.2051 74.2803 cv71.5112 73.7183 72.2261 73.207 72.9414 73.0547 cv74.0137 72.5435 75.5977 72.645 76.6191 72.2368 cv75.8535 71.1641 74.0137 71.6235 72.9414 71.8286 cv72.3286 72.0327 71.7153 72.5435 71.103 72.3389 cv71.02 71.8857 71.1792 71.5898 71.438 71.3682 cv71.8213 71.042 72.4229 70.8765 72.7881 70.6025 cv74.3721 70.3467 75.6489 70.0918 77.2319 69.8867 cv77.2837 69.5303 76.8745 69.2739 76.6191 69.1724 cv74.6777 69.2739 72.7881 69.377 71.103 69.9893 cv70.7959 69.3252 71.46 68.5591 72.1753 68.5591 cv73.5542 67.9458 75.2915 68.2017 76.7217 67.793 cv76.9263 67.3335 76.3638 67.1294 76.1079 67.0781 cv74.3208 66.9761 72.686 67.231 71.103 67.6909 cv71.6133 66.8228 72.7881 66.4648 73.7583 66.21 cv74.2188 65.8525 75.1382 66.4648 75.2393 65.5962 cv74.627 64.626 73.2988 65.3413 72.4302 65.4951 cv71.9712 65.6479 71.6646 66.1074 71.103 65.9541 cv70.6431 64.8306 72.2261 64.6772 72.9414 64.2686 cv73.5542 63.8091 74.9849 64.4219 74.9849 63.2476 cv73.7583 62.9404 72.2261 63.2983 71.103 63.8599 cv70.8472 63.7578 71.0005 63.4517 70.9492 63.2476 cv72.1753 62.2256 73.7583 61.8682 75.1382 61.2036 cv75.1382 60.9487 75.0869 60.6934 74.8823 60.5908 cv73.4521 60.6416 72.2261 61.3062 70.9492 61.8174 cv70.7451 61.6128 70.8984 61.3062 70.8472 61.0503 cv72.0728 59.6206 74.0654 59.8755 75.5977 59.1094 cv75.6489 58.752 75.2393 58.4971 74.9849 58.3438 cv73.6055 58.4971 72.3286 59.0078 70.9492 59.3643 cv71.2559 58.3945 72.4819 58.2407 73.2988 57.7305 cv74.1162 57.4238 75.0869 57.3726 75.8535 56.9131 cv75.9038 56.5557 75.4956 56.2495 75.2393 56.147 cv73.6563 56.4023 72.2261 57.0664 70.6943 57.5264 cv71.4092 55.2275 74.3721 55.8916 75.5977 54.563 cv73.9634 53.7461 72.1753 54.7676 70.6943 55.4316 cv70.4385 54.563 71.6646 54.0015 72.3286 53.6948 cv73.5034 53.1333 75.0352 53.3887 76.2104 52.7251 cv76.1592 51.6523 74.627 52.2139 73.9121 52.2139 cv72.7373 52.2139 71.7671 53.1846 70.6943 53.082 cv70.7451 52.3159 71.6646 51.958 72.1753 51.6006 cv73.5034 51.0898 75.0869 51.0391 76.3638 50.375 cv75.6489 49.4556 74.1675 50.1196 73.146 50.2729 cv72.4302 50.7324 71.5112 50.8345 70.6943 51.1411 cv71.4092 48.9956 74.1162 49.0474 76.0063 48.4341 cv76.0063 48.0762 75.5977 47.7188 75.2393 47.7188 cv73.6055 47.7188 72.022 48.6382 70.6943 48.7915 cv70.7451 48.0254 71.6133 47.8213 72.0728 47.3101 cv73.4521 46.9526 74.627 46.0845 76.2104 46.2378 cv76.8232 45.6245 li76.0063 44.7051 74.4736 45.4204 73.4014 45.7271 cv72.5327 46.0845 71.6133 46.4932 70.6943 46.8506 cv70.4385 46.186 71.1533 45.5737 71.5625 45.1138 cv71.46 44.7559 71.103 44.5518 70.6943 44.6543 cvcp46.5884 76.5273 mo46.5884 39.5972 li54.1479 40.1079 64.769 34.6934 69.1104 43.2749 cv68.3442 42.8154 67.6294 41.4878 66.6587 42.2026 cv67.1694 43.4282 68.8042 44.0923 69.3662 45.4712 cv67.8848 44.1938 65.9434 44.0923 64.4624 42.8154 cv63.6963 42.7129 62.6743 41.998 62.0107 42.8154 cv62.0615 44.041 63.4922 43.4282 64.2075 43.7856 cv66.0967 44.6543 68.4468 45.7271 69.3662 47.7188 cv68.6001 47.7188 67.7314 46.5952 66.9141 47.106 cv67.2715 48.1787 68.8042 48.4854 69.2637 49.5576 cv68.6001 49.5063 67.4756 47.9746 66.6587 49.0474 cv67.4756 49.8638 68.8042 50.5283 69.2637 51.7539 cv68.4468 51.7539 67.2715 50.4771 66.5566 51.499 cv67.4756 52.2646 69.1621 52.8267 69.3662 54.3081 cv68.6509 54.7168 67.4756 52.9292 67.2715 54.4614 cv67.9868 55.1255 69.1104 55.4824 69.3662 56.4023 cv68.5483 56.2495 67.3228 55.1768 66.4033 55.8916 cv67.1187 56.9639 69.1621 57.1685 69.3662 58.752 cv68.4468 58.752 67.3228 57.1177 66.812 58.5986 cv67.5781 59.5693 69.8765 59.6206 69.2637 61.2036 cv68.395 60.9995 67.7822 59.9272 66.9141 60.1821 cv66.5566 60.5908 li67.374 61.5103 69.2129 61.9702 69.4683 63.2476 cv68.4976 63.2476 66.8628 61.5103 66.1992 63.042 cv67.374 63.5024 68.7017 63.9624 69.4683 65.0854 cv69.4683 65.8525 li66.4033 65.188 63.5938 63.042 60.1719 63.8599 cv60.0693 64.1665 60.2734 64.4731 60.5298 64.4731 cv63.9512 64.5239 66.9141 65.6479 69.6211 67.3335 cv69.6211 67.6909 li68.5483 67.8442 67.5273 66.5161 66.4033 67.1802 cv66.9141 68.4058 68.6001 68.2529 69.4683 69.2739 cv69.4683 69.8867 li68.4976 69.6318 67.5781 68.8657 66.5566 69.1724 cv66.4541 70.4497 68.4468 70.1426 69.2637 71.0112 cv69.2637 71.0112 69.2983 71.1753 69.3389 71.3682 cv69.3975 71.6455 69.4683 71.9814 69.4683 71.9814 cv69.0073 71.8501 68.5557 71.5767 68.0972 71.3682 cv66.1992 71.3682 li66.5059 72.4922 68.1909 72.0327 69.0083 72.8501 cv69.3662 73.207 69.8765 73.5645 69.7236 74.1782 cv68.855 74.2803 67.9868 73.4629 67.0166 73.3096 cv65.1265 73.1563 63.1343 72.0835 61.2954 72.8501 cv61.2446 73.3604 61.8574 73.4629 62.2656 73.5645 cv65.0239 73.6675 67.7314 74.1782 69.7236 75.9146 cv69.7236 76.6299 li68.6509 76.5273 67.2207 74.9956 66.5566 76.2725 cv67.6802 76.9873 69.8257 77.1411 69.7236 78.9795 cv68.7529 78.9282 67.9355 77.6509 66.9141 78.4688 cv67.1694 79.7964 69.2637 79.3369 69.7236 80.665 cv69.7236 81.2783 li68.6001 80.9199 67.1187 79.8472 66.0459 80.8188 cv66.9141 81.8398 68.9575 81.3804 69.7236 82.8613 cv69.7236 83.3721 li68.7529 83.0659 67.5781 82.0957 66.5566 83.0146 cv67.2715 84.2402 69.8257 83.6279 69.7236 85.7217 cv68.7529 85.5688 67.7314 84.3936 66.812 85.2109 cv67.3628 86.5132 69.7793 85.9985 69.7295 87.6631 cv69.7285 87.6963 69.7261 87.73 69.7236 87.7646 cv69.5127 87.7754 69.3042 87.7319 69.0981 87.6631 cv66.9893 87.6631 li67.8062 88.606 69.7354 88.5098 69.8765 90.1147 cv68.8042 90.3193 67.4248 88.5313 66.5566 89.8594 cv67.8335 90.3193 69.6724 90.8809 69.8765 92.4644 cv68.8042 92.5664 67.2715 90.6255 66.5566 92.209 cv67.6802 92.9746 69.6724 92.9746 69.8765 94.7627 cv68.9058 94.916 67.2715 92.8735 66.9141 94.5078 cv67.9355 95.2739 70.1318 95.3755 69.8765 97.1128 cv68.666 96.4282 66.7354 95.7744 65.3901 95.3999 cv64.1245 95.0474 63.4497 94.9614 62.1123 94.7627 cv59.7632 95.7334 58.7925 92.6177 56.8521 91.8516 cv55.2681 90.0122 li55.9834 89.604 57.5669 89.8081 58.2305 88.8887 cv57.0562 87.7646 55.6768 88.9907 54.2974 88.7866 cv54.2974 88.7866 53.231 88.1421 52.4365 87.6631 cv51.9653 87.3784 51.5903 87.1519 51.5903 87.1519 cv53.4287 87.459 55.2168 86.5903 57.1069 87.0498 cv57.4644 86.6919 li56.8521 86.0796 li54.9106 86.1304 52.9185 85.875 50.9775 86.335 cv50.7222 86.7944 li49.292 85.6709 47.7119 84.7383 46.5884 83.564 cv46.5884 77.856 li46.9463 77.5493 47.6064 77.958 47.9131 77.498 cv47.8613 76.7324 46.9971 76.8848 46.5884 76.5273 cvcp44.4927 83.2129 mo44.4927 39.6992 li45.2104 39.6675 li45.2104 83.3081 li45.1089 83.2573 44.4927 83.2129 44.4927 83.2129 cvcp43.6572 83.2441 mo42.9146 83.2271 li42.9146 39.8994 li42.9146 39.8994 43.6567 39.7388 43.6572 39.8594 cv43.6572 39.8594 43.6699 83.2197 43.6572 83.2441 cvcp41.3228 83.6597 mo41.3203 81.248 41.3228 40.3438 41.3228 40.3438 cv41.2729 40.3525 42.1807 40.0288 42.1802 40.0649 cv42.1802 83.3228 li42.2314 83.4258 41.2783 83.6533 41.3228 83.6597 cvcp39.9473 84.2153 mo39.9473 40.8232 li39.9736 40.8228 40.7705 40.4297 40.6821 40.5303 cv40.6821 83.8896 li39.9473 84.2153 licp39.0767 84.3809 mo38.7954 84.6938 38.0352 84.7134 37.7793 84.7642 cv37.7793 84.7642 37.7959 50.6118 37.7476 39.3418 cv37.7817 39.334 39.0767 39.6138 39.0767 40.0825 cv39.0767 40.0825 39.0874 81.5879 39.0767 84.3809 cvcp36.0112 98.4404 mo35.0918 99.0532 34.2231 101.097 32.8442 100.177 cv32.2695 99.2197 31.3755 97.792 31.1743 96.5977 cv31.1079 96.1992 31.1455 96.1675 31.2607 95.7334 cv31.6182 95.0186 32.1289 93.9458 33.0996 93.894 cv33.6582 95.439 li33.917 96.1421 li34.2744 97.4702 36.4194 96.9595 36.0112 98.4404 cvcp34.6826 95.6313 mo34.6113 95.4014 34.5625 95.1968 34.5991 94.9858 cv34.5654 93.9976 35.1187 93.895 35.6538 93.7925 cv36.1152 93.7925 li36.1152 94.7339 li36.1152 94.7388 li36.1152 96.2061 li35.5532 96.5122 34.9385 96.0908 34.6826 95.6313 cvcp40.6777 94.0864 mo40.6777 98.146 li39.9507 98.146 li39.9507 93.959 li40.6777 94.0864 licp42.1836 94.4922 mo42.1836 98.146 li41.3296 98.146 li41.3296 94.2837 li42.1836 94.4922 licp43.6523 95.0566 mo43.6523 98.146 li42.916 98.146 li42.916 94.8018 li43.6523 95.0566 licp45.2114 95.6313 mo45.2114 98.146 li44.5732 98.146 li44.5732 95.2798 li45.2114 95.6313 licp61.9077 120.405 mo60.9697 120.106 59.6445 119.779 58.6489 119.593 cv57.2612 119.333 56.1851 119.286 54.7573 119.435 cv54.5181 119.089 54.5376 118.957 54.6411 118.333 cv54.7378 117.965 54.9106 117.554 54.9106 117.187 cv54.4805 115.646 54.752 114.697 55.4604 112.52 cv55.5181 112.348 55.6206 112.203 55.8809 111.21 cv56.8584 111.822 58.208 112.959 59.2183 113.681 cv60.3193 114.467 61.0898 114.824 62.3682 115.144 cv62.6235 115.501 li62.0107 117.289 62.8789 118.77 61.9077 120.405 cvcp71.3066 117.085 mo70.9492 121.631 li68.6509 121.732 65.8926 121.478 63.5938 120.865 cv64.0537 119.23 63.645 117.238 64.4624 115.757 cv65.4844 115.667 67.0483 116.058 67.9487 116.329 cv69.1177 116.681 69.606 116.849 70.9434 116.957 cv71.3066 117.085 licp76.3066 114.946 mo75.2183 115.102 75.3438 115.064 75.1826 115.086 cv72.3608 115.622 70.9897 115.318 68.2983 114.701 cv66.1172 114.2 63.7793 113.503 61.6528 113.024 cv61.0576 112.806 59.9629 112.296 59.4502 112.009 cv56.5103 110.046 55.084 107.531 53.3555 104.289 cv51.1992 100.247 49.21 95.9888 44.9502 93.7925 cv42.3447 92.8735 39.4849 90.9321 36.5225 92.209 cv33.917 91.9536 li34.5342 90.7534 34.1387 88.9312 34.5688 87.6631 cv34.7798 87.042 35.188 86.5527 36.0112 86.335 cv39.4849 86.9985 41.8853 83.9346 45.563 85.2109 cv46.9009 86.167 48.3555 86.9033 49.7788 87.6631 cv51.0176 88.3247 52.2334 89.0034 53.3271 89.8594 cv55.7275 93.0776 59.0986 94.9673 60.5298 98.7979 cv61.1294 101.295 62.8643 103.049 64.9468 104.289 cv66.2305 105.054 67.6455 105.624 69.0083 106.052 cv72.9414 106.716 76.5874 106.938 80.3667 105.764 cv81.0229 105.366 81.5435 104.871 81.9185 104.289 cv82.3599 103.602 82.6479 102.837 82.9526 102.118 cv83.8726 101.863 84.3833 102.578 85.0474 102.885 cv85.3628 103.299 85.5386 103.203 85.7974 104.289 cv86.1089 105.355 86.1235 106.565 85.814 107.635 cv84.3423 111.658 80.2466 114.252 76.3066 114.946 cvcp80.3989 118.566 mo79.7856 118.974 79.0708 119.23 78.3052 119.281 cv76.4658 119.996 74.8311 121.324 72.7881 121.631 cv72.5327 121.273 li72.7881 117.085 li74.0098 116.877 75.002 116.754 77.1675 116.443 cv78.3657 116.267 78.8872 116.16 80.0415 115.858 cv80.7056 116.522 80.2964 117.646 80.3989 118.566 cvcp85.0474 117.085 mo85.2007 117.442 85.354 117.749 85.3032 118.208 cv84.4341 118.668 83.2593 118.821 82.2378 118.566 cv82.0845 117.34 81.5229 116.114 81.7271 114.888 cv85.354 112.59 88.4692 108.714 87.6519 104.27 cv87.6138 104.079 87.4507 103.763 87.4048 103.578 cv86.7632 101.946 87.0396 103.11 86.8862 102.208 cv88.1128 101.851 88.98 102.425 89.2349 103.497 cv89.4097 105.484 89.8521 106.634 90.3804 108.499 cv90.6255 109.367 91.0142 110.915 91.1763 111.824 cv90.2065 113.151 88.1128 112.437 86.7837 113.151 cv85.5063 114.071 84.23 115.501 85.0474 117.085 cvcp93.9155 114.862 mo93.8589 115.054 93.5981 115.293 93.2915 115.491 cv92.7808 115.821 92.2261 115.985 92.1157 115.725 cv93.4243 114.147 li93.9155 114.862 licp92.9136 111.824 mo92.147 111.006 92.0132 108.842 91.6558 107.871 cv90.9634 105.807 90.7974 104.228 90.2446 102.118 cv93.2231 102.171 96.2183 102.159 99.2993 102.118 cv100.729 103.906 100.881 106.357 101.955 108.401 cv101.852 109.014 li101.448 109.237 101.255 109.346 100.885 109.594 cv98.9683 110.88 97.2661 112.605 95.4673 114.276 cv94.2925 113.918 94.4468 111.926 92.9136 111.824 cvcp117.934 71.3682 mo118.329 73.998 118.648 76.54 117.278 78.9795 cv116.151 77.8525 115.103 76.6489 113.964 75.3701 cv113.039 74.3315 112.031 73.2217 111.046 72.2368 cv111.293 71.7417 111.967 71.4536 112.395 71.2734 cv113.015 71.0454 113.584 70.606 113.754 69.9893 cv114.417 68.8657 114.52 67.231 114.112 65.9541 cv113.499 65.29 113.397 64.4219 112.988 63.6558 cv114.623 64.1152 115.491 65.75 116.92 66.4648 cv117.483 66.0566 117.125 65.5962 117.075 65.0854 cv112.324 60.9487 107.833 56.5679 102.877 53.0439 cv102.877 47.0742 li114.827 53.8486 li115.235 53.6948 115.031 53.2866 115.083 52.98 cv102.877 45.082 li102.877 39.7183 li108.697 41.5889 li109.988 42.7119 113.211 47.6016 114.367 49.3022 cv116.052 54.1035 115.899 59.6714 117.789 64.3711 cv117.197 66.7617 117.592 69.0977 117.934 71.3682 cvcp64.2988 34.4004 mo64.3286 34.8779 63.9004 35.7153 64.5649 35.8174 cv66.71 35.0518 68.5483 33.6211 70.5918 32.7524 cv71.2349 33.0039 71.5317 33.1533 72.1387 33.479 cv73.7505 34.3438 75.6187 35.4834 77.436 35.8174 cv77.6919 35.562 li77.3853 33.3145 76.3638 31.3735 76.2104 29.0747 cv77.1304 27.4917 78.9683 26.061 80.1431 24.5288 cv80.3989 24.0181 81.0122 23.7109 80.9097 23.0474 cv79.5259 22.7334 77.7642 22.5996 76.3359 22.4487 cv75.4448 22.3545 74.8779 22.2729 74.0137 22.0771 cv73.5542 20.9531 li80.0923 21.6172 86.3755 23.7109 92.147 26.4697 cv97.0513 30.5562 li101.559 32.1143 104.483 35.7026 107.012 39.1377 cv105.441 38.6011 103.588 38.0649 101.955 37.2988 cv78.2026 28.2065 li77.8452 28.3604 77.8452 28.8193 78.2026 28.9219 cv84.6382 32.1909 91.3296 34.8979 98.0728 37.5029 cv96.3872 37.4009 94.2925 36.6855 92.5552 37.6567 cv87.9077 34.9238 83.438 32.4336 78.5854 30.1343 cv78.0747 30.4414 78.355 30.5562 78.5591 30.9136 cv82.4937 33.519 86.3755 35.5107 90.3091 38.1157 cv89.436 38.3071 88.5503 38.439 87.6714 38.4282 cv86.2974 38.3872 86.1431 38.2993 85.4048 38.0142 cv83.2593 36.0728 80.9604 34.0293 78.8159 32.5996 cv78.4077 32.8545 78.5591 33.519 78.6626 33.8252 cv82.7485 37.6567 li81.5747 37.2476 79.3267 38.1157 78.5591 36.4302 cv77.3345 36.4814 77.2319 38.1157 75.8535 37.5029 cv75.1382 36.7373 75.5771 36.0029 74.5044 35.3896 cv73.687 35.1855 73.687 36.1563 73.8911 36.6157 cv74.2998 37.2285 74.4229 37.4009 74.2695 38.269 cv73.2988 38.5249 li72.2773 37.1455 72.8901 34.7446 71.3066 33.9785 cv70.9492 34.3364 li71.3066 36.124 71.8179 38.0142 71.9204 39.7505 cv71.1533 40.312 70.4897 41.0781 69.7236 41.5889 cv69.2129 40.5166 70.1836 39.4438 69.8765 38.1157 cv69.6724 36.7881 70.7959 35.5107 69.8765 34.3364 cv68.6001 35.6641 68.8042 37.7578 68.2427 39.4951 cv68.2427 39.5972 li67.7314 39.9038 67.1694 39.1885 66.9141 38.729 cv67.1694 37.3496 68.395 36.1748 68.395 34.8472 cv66.4033 34.7954 66.71 37.8101 64.9731 38.1157 cv64.4116 37.7578 65.5347 36.7373 64.4624 36.5322 cv63.543 36.7373 63.0835 37.9629 61.9077 37.5029 cv61.9077 36.9897 62.4932 36.0938 62.8799 35.6245 cv63.2358 35.1929 63.4629 35.0864 63.6128 34.5786 cv63.6128 34.5786 63.7319 33.1763 63.2246 33.4155 cv62.7168 33.6538 62.498 34.165 61.7822 35.0654 cv61.2363 35.7529 60.5381 36.6763 59.9165 37.2988 cv59.354 37.5029 58.6392 37.3496 57.9751 37.4009 cv59.6099 35.1528 61.6509 33.1763 63.5918 31.1841 cv63.7446 30.7754 63.4385 30.418 63.1318 30.3164 cv60.1694 32.1548 58.6392 35.0005 55.8809 37.0435 cv54.4507 38.269 52.459 38.2183 50.7222 38.269 cv54.8086 35.5107 58.7412 32.5483 62.8789 29.5342 cv63.0317 29.0747 62.6235 28.8706 62.3682 28.5645 cv60.0186 30.0967 57.5669 31.5269 55.5234 33.4678 cv52.8164 34.8472 50.3647 36.7373 47.8105 38.3716 cv44.874 38.333 li44.4902 38.3457 40.2002 39.0352 40.2002 39.3418 cv39.689 38.4731 38.7695 38.0142 37.8501 37.9111 cv37.1855 38.0142 36.3052 38.3076 36.1011 39.0737 cv36.1011 47.438 li25.3354 54.666 li25.3354 55.4316 li26.2041 55.4316 li29.5239 53.4907 32.8823 51.0771 36.2026 49.085 cv36.1646 55.1768 li22.6797 68.7632 li22.7813 69.0698 22.4233 69.4277 22.5264 69.7852 cv22.8838 69.7593 li36.1709 57.4688 li36.1323 61.21 36.1895 65.8525 36.1895 65.8325 cv34.7715 67.5493 26.2549 77.0181 23.9053 80.3076 cv23.7524 80.665 24.0586 80.8188 24.2627 81.0229 cv27.6226 78.0933 36.1035 68.3682 36.1035 68.3682 cv36.1035 77.7983 li33.7837 81.0688 27.9834 89.8735 27.1738 90.9834 cv26.9189 91.3916 27.123 91.9023 27.583 92.209 cv28.9678 90.8447 34.332 82.7485 36.1064 80.5693 cv36.1011 84.8916 li34.6699 84.854 33.8145 86.3862 33.3037 87.6631 cv33.6104 90.6763 32.1802 93.4351 30.1367 95.5293 cv30.0415 96.061 30.0273 96.1904 30.0811 96.6846 cv30.1265 98.1465 31.4697 100.561 32.8442 102.016 cv34.1719 102.578 34.9897 101.097 36.1646 100.892 cv36.2661 101.506 36.6753 102.169 37.3906 102.271 cv38.5615 102.423 37.9155 103.385 37.811 104.289 cv37.7739 104.607 37.8037 104.917 38.0034 105.184 cv40.0972 105.949 38.0542 107.941 38.3608 109.218 cv37.894 108.824 37.8511 108.809 37.3184 108.314 cv32.731 104.058 28.5371 98.3018 26.459 92.6685 cv23.1387 89.1953 25.3354 83.4741 22.4233 79.7964 cv22.6001 77.062 22.2534 74.2129 22.0112 71.3682 cv21.6924 67.626 21.5566 63.8916 23.0371 60.4375 cv24.2119 55.9937 25.2334 51.3965 28.2979 47.8213 cv30.6992 39.1377 38.3101 31.8843 46.4312 27.9507 cv50.8237 23.0474 57.7959 23.4502 62.981 21.209 cv64.4624 21.0049 66.333 20.7554 67.6294 21.106 cv67.5493 21.3105 67.5254 21.3804 67.3345 21.6611 cv67.1133 21.9854 66.7227 22.5078 66.627 22.4658 cv64.6348 22.5688 62.3682 22.6387 60.5298 23.3027 cv60.915 24.7769 62.3042 26.2813 63.4067 27.4741 cv63.9087 28.0176 64.1489 28.2437 64.5649 28.8193 cv64.5522 30.2944 64.52 31.584 64.3604 33.0078 cv64.2988 34.4004 licp75.9492 33.9849 mo75.1123 33.6177 73.5503 32.896 72.4731 32.3291 cv71.7324 31.9395 71.2314 31.6914 70.7319 31.3101 cv70.5537 30.001 70.5474 28.2515 70.5986 27.0762 cv72.2329 29.1191 74.6714 31.6865 75.9492 33.9849 cvcp77.0786 26.1123 mo76.7725 26.4697 76.1079 27.4468 75.5977 27.6514 cv74.1421 27.3442 72.8394 26.8276 71.46 26.3677 cv72.1245 25.3462 72.603 24.3945 73.4014 23.3027 cv76.3384 23.5459 li78.8091 23.75 li77.0718 24.8735 74.4805 25.2568 72.9414 26.1123 cv74.5044 26.0532 75.4922 25.959 77.0786 26.1123 cvcp47.2998 126.892 mo46.8398 126.943 46.4824 126.688 46.3291 126.279 cv46.6719 124.884 47.4912 122.523 47.9878 121.17 cv48.5273 119.698 48.7554 119.237 49.394 117.8 cv49.7007 116.063 48.3213 114.888 48.6279 113.305 cv50.3647 113.765 52.1016 114.531 53.3271 115.961 cv53.0713 117.596 50.8755 115.757 50.3647 117.596 cv50.3926 119.557 49.8501 121.743 49.1885 123.432 cv48.6602 124.778 48.1152 125.668 47.2998 126.892 cvcp133.592 71.3682 mo133.209 67.8481 133.693 64.333 133.368 60.5908 cv132.755 56.7598 130.763 53.5415 129.435 50.0171 cv128.362 42.8154 124.838 36.6343 119.628 31.1694 cv117.789 26.4189 113.703 22.3833 109.463 19.5229 cv102.772 16.5093 97.3062 10.6353 90.104 8.9502 cv85.5063 9.05176 81.7271 7.05957 77.436 6.39551 cv75.7505 6.34424 74.2695 5.42529 72.5327 5.78223 cv70.541 5.32275 68.0894 5.62988 66.0459 5.52734 cv63.4922 5.93604 61.0913 6.65088 58.5879 7.26367 cv56.2896 8.59229 53.2246 8.08154 50.9775 9.5625 cv46.4824 10.584 42.1919 12.1162 38.4629 14.9766 cv35.5005 15.7944 33.0996 18.4507 30.6475 20.2378 cv27.7876 23.915 24.1606 26.2148 21.0449 29.5342 cv17.8271 32.1909 18.0825 36.4814 14.7109 39.1377 cv12.668 43.8882 9.60303 48.1787 9.39893 53.6948 cv5.77246 58.7881 6.69629 65.1797 6.85547 71.3682 cv6.896 72.939 6.8877 74.4971 6.74268 76.0166 cv6.84424 83.4238 8.83691 90.1147 12.106 96.2441 cv13.0259 102.169 16.9585 107.022 20.687 111.568 cv22.8838 116.165 26.6631 120.2 30.75 123.316 cv34.3257 125.563 36.9307 129.395 41.1699 130.059 cv43.0601 130.774 44.4902 129.497 45.8184 128.476 cv46.3989 128.849 46.5425 128.992 46.7266 129.563 cv47.0449 130.549 47.2295 132.055 48.168 132.767 cv50.7729 135.474 54.8594 135.779 58.4346 134.963 cv63.4922 136.802 69.4683 136.444 74.9849 137.21 cv77.1304 137.057 78.9683 136.239 81.0122 135.983 cv84.2808 133.073 88.8774 135.729 91.9429 132.306 cv93.271 131.386 93.731 129.905 94.395 128.629 cv95.2632 128.169 96.1313 128.271 96.8462 128.987 cv98.4302 129.65 100.064 129.395 101.341 128.22 cv106.092 124.695 110.792 121.171 115.592 117.442 cv118.23 112.874 121.388 108.437 124.868 104.289 cv125.162 103.938 125.458 103.589 125.757 103.242 cv127.903 99.207 129.588 94.814 129.792 90.1147 cv132.398 85.2109 133.112 79.5923 134.083 74.0757 cv133.843 73.1704 133.689 72.2695 133.592 71.3682 cvcpf46.3247 109.226 mo46.3462 109.129 46.272 109.305 46.3247 109.226 cv46.3247 109.226 licpf92.6528 45.207 mo92.9927 45.5786 92.5396 45.8369 92.2173 45.8369 cv91.9907 45.9658 91.7808 45.9824 91.5708 45.8369 cv91.5552 45.1426 92.1841 45.2554 92.6528 45.207 cvcpf92.5894 42.7485 mo92.9282 43.1206 92.731 43.187 92.4399 43.4106 cv92.2144 43.54 92.0044 43.5562 91.7944 43.4106 cv91.7778 42.7158 92.1216 42.7969 92.5894 42.7485 cvcpf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]][/CSD [/0 /1 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.1%%For: (University Relations UC Davis) (UC Davis)%%Title: (Seal295_132.eps)%%CreationDate: 2/22/07 10:57 AM%AI9_DataStream%Gb"-6k?8ftehDDf5kcD:Qn57Y2n$On8:ZOD)'$EnaWLZuQGfBJmuQqkcO/2_W"o#oq9JTCB@p$d@F_BCX&dj=Cq9/kDRA-ljj(Wm%MQ5qU2-VSGVGf<NX"ZWIdlM4:U30)*-?Q=kEXZVhg/)0\d)%?e[UVY1Xj5bgF0j[emWS#e]j@Q,eEQ\X$F?56`_ET.e?!f(ch2b7%/dX(-e=6#El`"n!qL%&a_@XT"@dSp(SbMFDc*\bocGdE_];O7MoD#;6f50e;_s8AXY\r\!dq6?*_"Q?:8cY$sCTlW@Q@K\4O#ITq%NXi*Y78o,0MZp&hj;4hV+U]e*=*oLaCIM)7,ulaY$N*s=7WM#odP.Z'VC-ME<VW!^G1+$Ap%mKj^X[&u=PsLW24n6IlMW%Q>SC^H%F%l>CZ3DG6hC;,(TMa['iAg>UZ=.RPj"EajY?(7%CW1r&?)ufMoH"jSa/qF0Oj.eD[.QY6@oH6_QD8Kbam2m3HerZ5!FJgeE3k0l%U\Q0nW,:q$Nn>->./m#FE)uGa2u>j/SYoPZj''hGneJ8#If8_IQ^8$a3-o;IcT2jFXf^WZ/-C@$-/6g@R&b**I.3%gA&'1T*)<1N%(%)lb_*6Z"OcYWT16/rJqc8&<'1GW(K%]S#)?G.]"95.X1Xsb^bOg9<^bGM3^Y+nd!(*h.q#(Lr3]MhuX6iBQo8H<CF?3W\"`FKQ%4E^)fSbG4ZJ`a-h4:h;ck-+rq@GRU&_BHUtDiUGriRN+\oD5cIrm`IAD`0Ycc/N`Vs%k722;=,I6;a'=T1*VuV>IC0RTrmn[pBh*%q`F*f`S;8jDLXV6qTr=[pqNB6[ee7b*M)%1R_$IYpU0`l4R7*\4SZds4>:>$Q"'^lN\QQn62RV*R#[4Q.mul/0);[i"_srr!&+AA%H`tqkSm(mEqTD7l/noihpYJI=DMZ,Za1G'\4oOXE2[<LbrI!@FCA"0HC(-=Hf=V"4h,Eq;mp<d)4Lhl&jtBQ%!OP^<[Ja1uWUg`&%dOV<+)oXK'mRpU4\4jY@m07M8n[":rcLVG/ro300rM<*Dp)e$Ko/$[i5LnN]DNW)T/lDNHrIR->M^0qH3]1e?0Esu'b"@C^e;NF3%i:V9&hIqJI"[0WVD)U.l+9Z&@$\cr7+Q(^Y\P`-&G[GFZh^1HsH7JE#d8PasL<l`I8"iG,8#&S0a.UJ+a.gV/a!kD'S+s0\:Bd=A%HE-Jan0n`i'RE`'1jX7g%!kTl/:),WS,r_GIIY&Z4BqGWiMkd7&b%4@W:4KmkjTG]R.+5Mf^Lj(S0NVcTtW#ODi:2:4>hMp"?[#S%.QeV43]mU0-9N&,2EX`c&;G7:^p#Kk=,!Q,:K>3*d%eIQdA+Thcssq&d::)S'G1"pXt%[._5^C?<W#q9V^C>!kY^<dkgA?DkV;&$%kcs)d$G;IVHU\jtOTEA6C:1o>OFe$1&LonNiX,c/;cpnk`rQO_7B6DlE$dG2./6S<1e!2?:e\i[a&X1SP;93BTWS:DX^Q^ZU8k3t%O04).%$.7=WWUQoX?S>j(*Ecn+Z'A'Bpto7#!AbpJZ3L%%Zh[W8-.:aMf;bH"V.W7\u+LP6T9,q*a<iM14bfB\6ORC)G\4I$l/Xq%FMfe+GV$`j^jn'<!LJX6[U9saDo,Hb5VVJGXCn!!A_QW55itV*'j,ffY*pYU`g1@R33HgpV?Qu,Q>JY#%:u1k,`sQ-!?tCG<LeoJ%gBR@a>;l6an8&/g,@,3'b2ZA+7mY?YR\Kt87_pf"$gSCk15AKYP[(26gh9;4FP3iAg!4.g@^Q:-)=s4I=j(A+@OE?'+GhRE7g8nK%"Nn!#OA%p#%Rd/qaU')Z.Ze-DLiX5[Z%6piTOT"n7Kj\H5[%0\rsE__-Lcaq!*#?$3BHYl$D\hq!is*a'c;0/\BtNC1gqDH?sFH!%=9'UHJ>`ORD$#YS5\gGV3_VhnWJCTeEtr:gJU).MN,=rm#rp94)_,5a!5V_;;\b\Y-K*/R/=M)c*>#7QM?P-7$:q?#qDSGgFobX^%KXK39NDs"3!R+JrorGl#DShjrYdu/4ZORAG_SQ[gYpp;P"]2`9jC&.aQp<>dOH'Z9,RQe4<M6B":tR+rU^]_)!r;(GL+3b1!,en?%M,o./2h>d^+<qO*=U1*jJ[>T"F;;m1!fOJn*+0S5),)/^*S<^_7M3Ek<FD@)0[V5/N"'T7!e]aQ5q9+/!9$`X5-+`KD?=J)5d)O(%WX`:7!r%QRa:MH'@-]R%31pE,h#qVHTn-nmE)kHsU7`35DouA4($O@SL3,Hbp`TdS!\=9tkuG8q&1(796r`GOO-N)gns63N>TK-3%erF+L02KjSig0mLf7h<'d%dMmLp+t.^pM&Lc_=FZFlnt/[Dp`tO@MlM<f(TB[-hMbA6aJNRG/u"0SnbO$riAjJr#!"!=>JeP%'Wr%JdDNN_^'N%9*.Bl;$nZ0]1.IjUf&?N\4Hh@,\)tL15Kn:FHC_]P\MW7;25\p+W6OQ,lAWR9h8&N;$MkJ:!sbQ(=?0B"R-[Nb;.H^%;OKoC('tFAbpZsM9p67r1e1N#FGH+$["m/?8`JNk1l,+eFJtDM=.'t`*btpWJm4BhbG6a1,#4V,#SO(%8jss[,shcUWY)?W[3E:>%`?NPf"k$55,[D[%,[ZQ'Qm.C^J*#A`atlhb"XKNb)28s8+gL-%W7W&RB3q5Y/H0,?_oT0JAn/AreU2].r!T<'n1WZm(VY%3[M`:]%CmVD,`\n]=A8I=329*'A)e*W<Yn:R_a9H,^N9i33IBi1YQ5A:]Cilr(`<I-J>AS,\W<J#W_6^K#b$l<J%4j9<UiFAN'cU1i<j>N@%-5@J!A59\T'Ur!:8?j&O7MM=gCd=-Y,`O00S_.ghX,1\j>(K?o2ON-%@Uk6h,rV"?9O\rt/L7cca>tM(6RCmsh$U35rWG4o'lkC2%j>Nst//[Fnf]3p7aWmaI+/"_oYERLtp:`n+IYEaX>(Nc$Q#(_uCj;EXpG*WQeXC-Ae];cD)nnXZX\?$;Zc5b09et!<3G1s^5UUiT%Oj$b#o7/Aj/!*P(,n[XU@^%%>O%g7B%Z*SX\gSn^7YAXS/mT?[`$@OfJ[GO[<[F0E7<5^YIA9N"TD5)F`(lOgU=:<*W_6tt-*`=<%13BW`IT_qHlk[^rMY,a`8_uKRF)C1(R3[+gP/"SM#??r)pn3#5'aS5J'$=E(Qn-V"g`upfOH?oI,ANCG2Fq6AdU?-IE8uT1VH+hs%[Rrl6MZe;oHGH!qclEba[WId/'(,r1G[7o1.LCEK:jUY![#e:NqHG6@/(-rF,Rr[bXY[8\Ug4_#:9c`UQ6fXFUYB@XrFYZ#=KZj6%MYY"S-^nh3rN?k5?R<ogR#1NdFkZl\1o\rW0?-D3ETN*1L&\H1Y,<h467j\4"q%YEU911IE;0n12"pruCA&"8HgT+ng@RmTXYBcl%X8/gqqUGPM:g?/b5<"MDL"4Z'1H;d['i@*aCsPWHmA/[oRsP<_gJJY<s+Wa%_(WQsk[-clGYn>36PLJ9H?iE(?,FcS@?om!mg@$6%(`**D!5a\Bn-72.\Gk"EpR;<(nSKFd58QWN'k4efa*1jJa235c""rp@rOeksHh`f)NW)g)hA>>K54BYGs)?lkLkICb")O!Wj_G98%:]o70"nHTLXe<f<b=Lp5Hs9F*d;Z_0;sS?8Qg^VV\Ju+'Hi417KYQM#L2%PSZNsO8ighL6pPd7.*sdZ1N=QEpL]LF0,2a;0n@1aZ%+B_/:-7'!40<\`:d2R(h1=-t\YB]k1;\BBm$I:)63g$t/pf'Y#.S1:n!F]ZYYeZ;*0I7qJNY.&%JI7$?)'PB33)%OX61fou[g_=%%Cd+2l,1@./fgP!9T1Wo@,!$/FSjmf7mKs2,n[KtQ%'QrINfaI*>j)/Y*]!t-;M$Uug_<&V.soDLLuh1g1)&-!W2It58rPtL/V-.:%."fOLR-7%uEN!J>V+-P*Gc!3-=(7<pJ4^YWNJJ'r5Lu;>P8sX&SDd(0OQDEHSdV/c$I6GOoe\hUS4Wj,_H`hjWQ*UI_SZEHLA;MF%&s=,@mbesN=C"L[)mnmm0g5/`iK*W.,tJMLFXnqqPh76K>SfCBjq"J=2)Q[N+e_I=Ku>rMNNfA%a$u"S6B`N!M96:m7O^g;4]-;L%$*kecn>.Q27Zt9&Knks:4TZ"pKI?$-O/QI1Z<M^&N<)hn&VWEKI>gSe'-Q)_/;Qp8dg59>J9Wa\%>u(!0a;\\MujpX0jat$i/I5p%''?NnTeQtmQ,ID3OtJR#2*MOXg4e[_,u2ApGsR"t9Gu5cnX0MG9nG4AEoCU%!KD/+eF)hbN,Y@$iOl\fOV?\Nkss3YM8'%M,u@^\%4JH;H-5)Mp&i!"K(?8:<#-#q,;(EmnW0&L/98RWaS/=.SJku[H0M>kF:\7!FIhuS7Ht.IZHHJ2%bWYe1c&Tu=F6WO__g'K(i'mq,%jd>L/'h32j'u@*KGT(bss2\[5-rQG\\V/KrGe@&Ff*eoDX7"m'`T(=-47n-jh7rdSbCfc2:8=6Pnm-87hp5)8GeI#DpUdQ^f7('8%:gD#?S)%u\s-kVfd!q_>h*^M-d;?>&N`o]D"jD40nONUt4D]dkkMN^p2h0Ai]lsk'ePk\FI35Wg=.PjsWf,uPP^;`nZ`GJsl%T-5%^D&cs::lnr0i+@Pa(?P,B&&ius4M\R[OC$"aY>^sNmhV?O<u],I_j_O>5g62Tk%UVfDJkGgS\X)_B6:fs#2\/g0_Bn*NT0p.2o+.%7u9)&=\8>5dG\94No=a&H,*m7amgJ9$\7?R#aG?RE,"dm^]'/!nUHo8H;CZTs4_+iU,aMC%&^U]d]>[0ch1YI7fOXX$Hn>,=V:"t%CCZ`]hg$R@pO@KE?4uORg&*oJ"9,32"&)eaF>B_5gZa@Qgi*2WEscEK=iK.nLF9(%,tAUN$1OYA\pqerZb2b,"koTehJ)/\He5'(%l2S9i#:9&8#3!,GY;a68)A`lr9K6W&1Am5hV?3#MS@Q22.)k4aZe+RCeL[:Ls4o>/)m+Sf[e8/895u@*TN'O$Gu-\CEPLAEJ$%Te%MoVA)b_B=s?pDnXH/kaXBR"q\!71>p@g&[c9;`l2<I\aTWjc5NCqR,I>\(p=]?X@,S+,QXEV$Tq.A#%9rFWP35;(O$*Ae_;fB8m#%\G[Y&^SE=$<9Rq\n^K5gDPd]5d7&'FYmp,EkI"[0k7g4NSKV5hD!j@'K4aSgK8iW%"<`kb9nZ[i^%Pg+bNq+fJ=PUlr<7`>[@U`t%l@'Js0Jp[O;5[Obp2<%cDPMH38ao.PJ8R:*h$)unJjJ`$B(6YcXXS*J-ml4JI^e2%^!qVan,A%O>7CSmJ!sgFM[qG,;q4l0*C(?o%Fa7A&e\GDof'U$LP(=J@!>nqhldVKuj6#cL]aGMWX4[=?d(4Q`mWO&eSsk#N^E\+;Wer7+5^pE);TCl#52S7;q)UXpWaVMb)*qS1%I%h#!5(1*Jd][fIrS@hnPM`nVL^-fTjY9Dp#^,74k$9&_EEdpm\*js^-J/H'k,HmK(Af5/o%!+"]:DGn+Y"q+n"*]9YTW/KrYlX6%*`+hh`JZ5X4+B-"0,P&i*#V#e?)QFj2WCI6\9cfl&+_itiN'\9?[_1(H4T[<Zg1B1`Gi'0YBI\1G^AWRl?L+@<U7KTp!]tWE47D%%;2Uq*.Sn=(RSR?iNe?p3C<*@gT3/SMm?Lp-pG/E@pIhLWdWj"Ng#qbR*=V+'mRZqm:e&M%-U9p_JcKQpW:fJaI@#f&-fpB@.'lg`%Gn40O<sD2lkq7t7A+eQ($4mkoZ;Eo/W41NPD"rOiEF&KB8R0"H?9Q&hAL&p8LtaeLZGbR:7!k&V9WE@[XdN&t0EVa<pZ4mXWVZ9i%H=YV1feJ"PmlCP#oWje]rqWfeb2Tkdof42spK/$k[FsdAq?>[LX.R"E^[mW#DV'(qEn"].9WGtZlHf.k@kS75NliEm3U-gAc;?Y/%[;Yo\\;%o4l-s_I>k7"4r-@P6<;b1W/QOo?)E!E0k>/i4*IhEErhX4J.!5't$9N&n7I#C5C:;h6>YP+#g:DY1q_;0k:B.$@Ferp4%UiI6\SYrA4.5fuk:;Tc0s&<`PO/,%SEO*3sB!T-(_Xk-[C#EG_[;uHCd`C6);hEUFOcNk\!so1taO)<9.V^086G5Wtc#Q]t"X=38%IC8S1@0,L0<7C$C'`5hL);mU"*`+f:FTZTCNC!t7hX=_Q8a2Ll36LFl"@K@QYhDI?>+E.-(3r./FaeOPJI[".qfY,,UL?T#L0GOB%)-AU97l'D\Hag-VF$2mu@9'HDe\)&#%i]+b?[#<%JE0D)iTfWn:6p<d2*E2_p8NM--2>'2;Q#G`+Tq4o'n:eoJ*;"S-QHTOep?TQ%>+rYCk_;R?04bcrXRfN;$&dC"h:8-dDI3M3rKTOdhVHB(h;@GuMsK0+Zb-OEdg$-+N<5p%%p%qor\><$Z<db%Us946mo6?C7u-XA%*O<USK_nH-V[X2b^X`)2%SqGJR33XNd;9?9X^o5h`YrAHFupQ]9N>CaoX<Jg1/(ZIed\GF"@?c9)oRu89t,Q`4kc:plkJ1phcDG=%g>m,rDr_D?WQ!-<XAE-J<N!DCo]dsTX$6o:ocdT484F!44MN"7(pJ=6RMR*LS.?gH)[C(BX<?1m-%QP!$ju/]_sY?U]uS\3#fq1D%JAc2.nFO9*-4\hUY)/HP^#)L-QVX/Vr*W\`Z%U`i1`4'6r)alhib7N?"UC146+8T`;!$DKl5tEoN[(W.0i`+uO&4biqlgY9^nZmR%#Z+$RTMV-k##:2ZjdmJo+*MtcC8gr"n08Sd5aq<%G+Y@48US<17X$)?#Rt3'hQ#DA>83PLo5<lBrW6hpB##@t^A(?`c#2pTDX7)u%]YlJJ!WJnLi/"JN>.=)3#l[o'qfnDQOPNqp=Ea0JnOp%5j\qB0$b&0FS9Ct)Y;RK@Tl0sMhKI[^P%pA:)WO>1:VHOMp1Q^%IucW-%[LJ:o-Ur45q?NR7-[i(tQL7B<7TlO-^_=g.KQ(#<%a2A)bG_R>#'_&[ar[N-8%hf$5E0kcRg/Qq5/5YNJc<kj_c/>6T\)#:biD<&%O;dO.@%!IY:7"J)<R)gb.)pcoFQVu$%UQO@lj-WAac5"l.#Q/?f3k$MGUElqSg)6ID#V<=[Fu(._RV,FD`*?hL)h^0QMC_WU.E%q%Su^u"K/0"*>WY[%j;EGONcsN)kT2WqcN=!Ml!_UTB1;P$F6Mn><Ie]h^]pae?he.tb;G03hqX(4"Q$J!SfNj`kQ$TfYZf?o?Cu/j%p"#<7a4UQ:;T'(ipE,hm)5\qXj>YDCs*A@eMnSso#Yr'=$lV7l/JdY8/=,/uhPtjJje^s^O1L":iQhGj]G=kii[]3+`?q@8L?@pl%lek1=63AeU@5+m!)lTRbmpHrUc!lU$Y'TW;r\pE1W5#u-[I3gG5k"C6!Q!N-Dc+a#mtO>JK1pOokW6KViEO"TC\n].A5O8T(b26p%]"[L=??-:-gii8[&Ut<r]KD[u8aTdH!54&Gism1YRtdoaBckR\H8h=#<MjpH]$]=C]uUI>Z+rjk?j+2H!kTCb'ru-T_+J?o$/CD'%KV\.`!g/q9h<3R+9`cq>[!dt`/NHZA=?7NMM;+'dNune<.[<c@d2H\KA1_:tP*=$"URk=Db/"eVLE'4U,5^<;BK4^_^slT'>###:%(=Zgh>k'p?pKc"*oKQFkcEostbo(ci^Uik@,h.GmkaZO^<d&\(A#kHZA$8Pk`n$p!EV+<X1u=gQUd*J%SN"=^(L#MCD"F_'r:U$2%cW\BcU5;@4g!3<udd=3hgY5L?^Mh:[%mFoL0"7)fml$C<HY]MK=tRs9<Hc+V:_l!l[P:cbpoO4s2kQEp/oFb0lI(6`^]1t?:>7bo%Qa_E(gQ+EP-QhVX^Vn[6pJtSrE+2")c+TYGR9G(7]ed'<=.5[`^1hta>#oF:;tE(6QjX[7Q*bsPC2*XabH)]FTs(T5/A-H5O?Ym$%OR"9*q:j4k)`3o0C<uYW^R`*WWkeOYG--1ic9#*G$F>71Kr/kN6e;4m]=23ZqfQV$Hg7`i;gSae\+[9(jk\-6piH<=g0SX,'Ar8$%]C1&Q]0G-m+,O"rFIlm:6"(HKG$FdF?U!g0-P$"5^:]XjW2]c&SOsjn[X5^!oE@\j%k@lJ/2,5;^HCm2%GI;^2Tofem]:oHg)#l;%E>0<l?as?eGB\.j1hcXVkM#jnm/*cS8V;nhfQa#DW&aIhIeV#/8ktbSIe@!rcH;amB0'=F=dqQh*LnAb\inNqNsmN6Knc/q['(RI%+o&_IrD*<EK.b*h]06*]Rl1%`cqNoHeo^9gXM,\JG]#.>Wqr-krBu8>2r.NPKDt*6\@=[n)0G8c3,dTUqL]Pq"2eHKS/nI:C9@Ir%SP($rrR=0C\$jdZ*q\*rL/B5p`oc!E>JF'6"uRG;k/ts9j?`Hm+%u([4U5R+UBFZ+DTr#5?Or;('t(a$jci'UR9@Ec2Gsam\cGF+%FjA8Fk;p<Tk/5sPk/2K(T\H++M_t(o]NppT4n,,pmuK?!YonXr(OC-EQO1KdYsESOSrGsm0*2?c?D<)?miMIiK3k\(7qPql[>\#J%X$:E6Y$]@]s7s!d4Qu5*X1a"*B."18o[M[d#DI:,&%bp>o<OlAkdMjX])UqNH-e_AHG<M8QqA82f&^_W[@95/df]4.BA0"_i^-m3%ab0#bba^P.(>mN4L"YZp0<RP3;?sn&Dr/.&%=0/2XDF,b"te'9YgoR'+73ql&]%h@c`U1OrB5S;?VVL2].&3YIkK-A87Rdm*hKh^%f4GP['*l4b^:[#X[+!ft^J>cT0T3giLnE5rX^hRdcB[Y;ro`+56+bsjPo2UGXgSdLRO)UOWmRJn=f"=<h[W;U[I1(r&NJupCs\pf%o7*pDQQKY_&)G="95C*!ANAtLZfho,1)Yk<rUk#r<Ol;I;KfqZi^?`V^MW#(.rh,+\FQN!]fUs7/,^lBX4?)R)ALe7^:G9rKl`5"%.@%8!CR)T;-u:MaYReM-TW@TKc.V=l=$&JtkbfkZ:`+o1.CFQq^iS=6qco"$pikmgooTL838`U(UDF^>pHs^X.[X&QQ/GlSs#d-\%[;Vma&V'iWG"QO4^EgSE(P$5NNFpo!/eGodbC:IsQMT.:W4kKro)"e+nF_Fds/;ph2D3q&DM\7T%6`r-;=`=5Z/=1idoohk_:08_%m;5iCh<gf0]tG#UQ,gVW=T&-,AT<#N1R7[B,gJRpbbr-3`;.oTP5dG7?`$6cFiom9j-".I>b"T<i3uQAe%^;D(\]F!8T+oFhtG$U%2pQ#=lU13]XB*d+*fI3XerR2I^Vu8WYDY$Q@dh'9ilCLpb@tl8EIIg]97-P5gmC$\s#*2R2dN8e\7_VEY0SWD:\>jlmHoj1IX>?n%`RsRWZM/Y@;bHAfNcOon[Sks?(6klWHZ,,*)V=A_GOPE9dkIZmNi2"T4rr'UF`)VV-iA./WjMA;S_lm_TA"d`HEVhpmCrg`<E9l2%Jf`Qlj(t^MkoI(^A,f505!c/I#.eT9P?^oJ>](sr+'8>\Q.joGFg^nMG'17d[JIU:^f"%1PY64c8pPPt.HnPFS:*_K1`e;(nr,Is%Xrp:roQ.bBP&L$/DU40i&!sK@);d\=rd+%:rkZfnlbi)kE7&d8B7F5L%LLqYZo[s?G_OZRqDeR**urdT5X2.[)&1\VL=NI[C"U?i%Ve_:Be3V4&8Jr49>OZ_!6$k.B=8hDs`h;'::12GggUB!<TOe"JK5*4kGtAXbB`5\e#Mjh9+aA;s32h<&`ZGom6)Bf,-s?QNHVB@A%'s7N)ab/k[hbj[_oKK=<5mt"b"G?B>3[e23NO2!@l%@]FT.`S*=EpuZ;ksh:n"<BpP;_XfaI3lV='IIrb7XgO9iCgkD"X"X]us96%XhOa=4mEEq>`Y_8\o3=u66X@N]n3.FpT<FD8EqR6ZJeoq\@D2lrhHcHXt4oa^'1'M^c!D0--/eFQeL*.M$Lq2Uu^RF*<`S*a2e)`%On`J2cI*5.cn@[0=:T<26*l9Z?]D'R@S_^2F_CUL(^f-Farg<"JAj'LAhN+1j_n?qog`p^0O53"Yb%l$o#L;eLN2AN@]h]aB)jbj%#pD!Yq=<f<F))P@!'tLYh/&1O$L=#mTU)Y%r'TIB8I>]O7[1Z"UV&;H@p[HBr9D5r*D[-9+8n0UXC''/UD3nnq&jATKBmaQ]''4A%5#'K'3o1KbDB*9X$Du&9h,4aZ/;0+MdFn(M`9tp)aaO'OAMTJrIOW`I52MFr8&r8$h>khMj?T"J"'I;9aOSU7-R*qGjQ2`T!$9r*%.=0A'LM:Q0\d/H9"/9Ge/^\,bm]MlQg!E:g69ca`-ubW*]B]-KWALlNba%PI,]G&o.XV&&:2OPh1,WuU6Dt[Ej3h/g9h<&T9_\=-%n>tL;XSfV^ao/e#R_?`pj0$pjY9B8`[:DnehKp3HeO.Ne[@2^L#qa4Ol%llAf@$DH5@9\?j&%T/-cqUcIG5^9Z`qSR?=I/`X8ZQ-%ASf)]@1[-3FX:agkB.8N]n9ll.a=k^_0SiSnQOf@VOOl]pd9YY@Hc%/h@Ijb/-SD3/XPWH83sbO;W/8'.]%'(s!9kRUX)M4=OrZ!%Ipu(ABQn/k[/6.?C\*E)R+5b$9eEWh=I@@?)?'6aN_7j#>0:%)TJ$N")r"!`c.pSIXJ\R$b,=+C%W;>M+)^6HP$DL$/Uqn,-%k8E%K0Oa48I&uW<EK#iQb@jrjp-i/^<&2_Aob(^JjCb=Q=C(Ca:cboc$<W)#k#AQGP8Xo0d:04UXl`WYX0501[aP[gn2cH@4Z6HNJXoI%C\(m\L,"p,,BkKp>&G=W^])8t>`"+AZYK=,3`QRt@iaIqUq2/3fpF:PXIscVLLhj2@hZ6a>coVb5#+n,.sGqCA1s.d@ZL"G.X&0X%n+QHr3Qcjk)2F'bPMbb#[%dU[2l/eq3FGd]c"2u5#Q^+Tmis7V]p;V_4=T4c0-fCCbmR'M?/hMfZ[L=Z>l0_dT_dt;jN:GMQfO@Z%[Uf/pOkX?!5k;hG!6st<O95)iAqVEb5Y=j?rR#Bk#\k%tiZjFKId[b%40h*YH:\*9IqBl+?oK80des&+!oWfj?3*k>&4ocLoU"]p%Ok>L5Oa[='(gnj^WE.aD;6&H>hs)_MjkmJer92ATn3lr2Ris*Hqd+Pi"kU5urtubYKIWA4O=ZuSXAfC"d$8T]Kiu&&BCY.\`8[ak%=s6'p8p!XOZSjs0<%Pl+SZaQ95@sV8_`/AM$ASol7n<i>A795q>i)HV9)e!Lg;_+b_'"4e/%hRhEW1cM?^VMa8@+mO_'g+j*"sgG%-EU=!Fs=Bfn8Y'0jjP`OLC$TF&J8L]MY0DJ+=Rnl:RUaA,Z,,/1_aPs`q7:)EBdo+CE)HC3J*+PVR4Z&07.,;H5,.OS1Cp;d(h'I%.`/lt-(IX@5rG%P0/%Z\76'#N4tP(1]KPd.Ull6Z<;EB<H!rU`dapZYKf.b$':RHm`VM=n^g9^h`R.T)Kp[[j912I>/aM\M`(jFb%V-k[;/NX1^ccl2hYtW7S.%SZrmN1`3?CiM2:*b+4R5+0tj6,C/SJQiQk\RVNCJn5ffs-qUR7>:EP;?nf=)DAp*/aJlIpm>%cCnR1%P'V-BpP7sFH$F"sHV)`5b&FWc'YR"BQ#^"Dq0"5'(?5&MjdEm$i7_[<TohDX#Fu<)2hdcN(IFFml'&d#kKQ3)/rd>TY+;MAq3`PV%^i;(ER$&!Y;4r"_LEW!OU7M/o/T"ea8@4:M?AUR"!frn3/($Jo&iuM47-d!N'B";oL`\nq`FpfOqI((pL:m^888)@HfR?G<Th4-g%V1)HDh>5ZWcI)raMNVh-@+6*]Caj-u.'Rj(RV8P=K3j^@d,S8f`Q#/>cU&&sJ??VFh*`D#Yf6oPAsX=e)nDq72JIX_3ZHeQ:PT>(%5,@V[jqT[R00+FE_B=$A<V)8/N@5M%lAof9F"_7Q>WCFn\=_.gl;3-:qoO3W.%:[V.ut!XSfc/*L@sfuV5Q#J:[\O9RS_L[=DdgZ%n*-SuNt6Z?a[EIkP+f3Rg%XD(,jE1!(i2+(.FSB.0);kVIJR=Q=q#_6mT>J&cNHuS;*SM6ZVi"HrlEe)(MkBRSijYD>ao)\BL==D%2ZnZp?up!K!9@?Kf?l&I(^A2JGpa1I96WooW:Ur_D>+KE"[$K`O]XJaQHIrjae+@#Dn<J1h%78qA'CI%EsX@BYqj6H[1pH)R2NSJ%MXXA`joR"[7DtQd`[rEm8M+:UX[Ek%m,Z(rC+42clLHDt1$(F+FqfPo@4FE$Ra,6]Uf&WfqF76M[`-O4WKr4NRrG7/ltfQf>eZYU%RjXet\2Ot'aao4cK6uT,b^S<i3d_mBLfBK6\0V0@*Z31N<n5f7@^UBcR-[ts2;jP#*'J+&?.<fVlROjUc,]/(g%o\G.>KN;K.^p3%NLE3NbQE`8d.q$e(b^Xs4+iQ:X!`urQ^pF/OtAY8%c(#p#+_)43+`Y+b+LMBcBjjWjj7ROd.u@Hj5nXa%uM6HWS)kjk0R[Pd"PPN%oGkI/$p$&&Dp034ljPq8OGof!Q^pDYfLMMTkX^0W8il=%jg3&kTS,,ja)Cug+*Pa8Or#*/o>JK!ad!na%Pae#3=XW_Bp&=3>@IDQ%0V6];]uP1mPJL0W`0>@=.5.8:MEZL7/ECc\?Z&G1_[@L:a\>Q&?(l_h-I1E<bK-1ECm`QX;h5jS;ihDc4S(;=R55E=W?;Y1>\2hB%/8K:&bf.jVjWiFDl;0u:;R1)=hiCYUm\,Ym<%2LN,LW&+Cj]O5p1OhZi`.\?mk]UPYk5FdSV4pl[sWrs"sggW`Ja=XH84))pP)<d%`"^:>Xl_SO12t,3d#r>^`:kg'3?l;b_V#?c4q69EU!=kX%(Bt!@RNV9`CY0C;^UD%YM!]Q42nQjI5>/"4Gf=JaY_4h[Hn#cg_UpH%\&Tnm3dfj:KX#LS&8g7bE0t/T&Q?q_:?:'4C2@Nr[SS$t^aq1O5J]Irldos41e\tJ+PUZd(pjX$'KQ=\pS""D"I$`f%]-%6SUj!d%8P%6&c]&ib#(Dq%^@^o?hY$L3pb#Uem`b!s'^7)5n)s-jIE+IuQ'X@idFj%tS)H&u9FbR[e,Eic9H+LPiP7*r+u48il$d9,XWB5:%JbN(Om%(sa].UE#ba(oFI`g'W+FunmXlRQN]\aU]g%-bkrl.4kG&?E,/?4]=fc:b2GHp!4T-D?Ykqn?l7NRdY4)flt4!R>n`A;7,%;qqS_lTeuKch!3JNkq^"MhO8@%ral30[YEL'cHQm2s.T\&N`nhdC\iXiF\rb1+:JB_A4Al`s$O0!q'fL7T@+k:(DX;p[2QO*jP?\%YW\9_:J'N9#a#m7F5^iCn4m`Z.P3S34joDm;Cj"*nG%%Q-%e$J6mb"5DQ&@b#"XC<?8M'bNlZV37jBdVOu2A:FM<RTo;<Q?R6db#%Zo;dlDoRgYE,>I$`")?$J"".Z,++f_5CDB4Z7#YLC&EbqY'D9:'A+0?.Lg71-?pd[PF0,bBbD!qbg(9pB]b0>_5ZRQSK,a3)&bMO%/?d'Qjd3[I4B.rJAOJ8t=Pb"s]3uXoT4\D"<6=H>BH-,8HKo0PG*nrJhMC%u$W/ZQDIF1BA$Md:;>lY2YAW"]L;io+.'ILi3KURu%""0k8*o+r,68F`?[u;TaV$B9kEj$9tP;-1(O`Sp@<%&\N%/CUnjlo1If/GB*Xt\(f\rlUC')#Y*ZUs>tNI4'8W-l+6'<2_iLDrH&%2,?D@mVK_Eo&0Xj/<CH&l$U"VRB*Y+;`,3?0U`LgoTFr(e]=9l=%LPkMlt75q/@B$HT;(n&N=eqgji\f@(t:G=p<G\igbYs@_'fQ%6>$DKBd3nZDa>b#d/lC&hpE;cj6JPRN`C8*dWt8EOG!GPoi[4>*FA"YlopIkX(3H(\4j's&\gc'kZLlj^B'iLSKPe&'X_7SN3Zmb%HR0V^q$pcI1(Y*':3DSa=Z%<:6cSqC*DN.&PDaM14t@;kYo:np9O-&"K+5_&j-VS]M6?qY5NB#BgP]UZEPC6prT*OGZbLWMrT#p)%;[n)>0GguibRF@%<7^:<QsV+n-1f+H]%!,X2<H$P,c34'-c`qp1*cJ8j>'WJ9I;"Wqk&^UUajhD'?Ne!IO:/=MS2\-,8L*D6q/Zg%YN>WiFE7(YGene-3b_Z;n;3ti)r>[HL\n="A&>UVRce1u]W#jY/XDj-1M/+A3')rmC]?dP>ip7g-^G++CF=,g<4JT.)*^YIWDpCC%-prE[I^i@e6CoirN0Xee0FZ'M9f3AuHPuh9&7:*'NI2K>T^[2OFcXp'+i\]_Eh9;JcMh?mrrg3ZDJVE]J;g&lF1?"rCm_9e7tsOh%>i6=)p]aL1f<hitcATPe2+-K%.#6<UB`V%mDg`._=!s8#0^$,ChtBSX06h"%r5flcD[\k$!deX2C;jMiR9JBmVbA[\SU?i/^:6AG%9>f)Q(=+m5r9Y?e<MigjD@H0#/fu[EN]qP+K-7dQ/`C6Lq2Ajnj&H]0Z(#k_n)E]Y^$,YQ5Rf*Qc/65qGtc=A>POe4?/5*F=RSbC%h9+kWb+Rlj-nQp;lunqf@CJC2,gB?GKtQ6Tnck*9@V+?Mp3u9s36*M3!quHM8RTn9ZJ3!ho>?eYNJGK6?P["s1@4Y6X/oj@H]^@f%W;Y@?c`ime>eRXAc`jH_%(\%A;?uU_mQ\ra"q>1s9mrWgcdNH<S2JdO[uiO:G$Ug#kr3hZmDIOFG"l-.BVq2qhXo3NWUNL#Pa^F[%S&\nP3R0WsLq8NQD3sE1l88BBC4hT&7P*3P\'NH3o&4gC7n6(nUNoE?4%5kj3UX0KR/O#H4<X/gH/6T<MPYbLa$4W&WLMt3U._IE%jUJ^k0'C[-9b2I1.cXjBJN&TWcLm0BM-LTfTrrurAWBFEEmHE:60*^f^demsB?W#T4?O?(NfI]P2=N;2%Zj4b%_=kW5G%TAmn"XI%2bPJ>G9%ir/d]B[7d>Z4ku'2niG?(NCGbuBc;Cq4P,9#lWlE]EF@j#bWV_r*B@@<Tq)ECQ?!s)5B_+2\lf;ln,j-C;aV2go)gD^9%,2%'P)L8XAFEsV3j(HgejjMO]-CRYqEOKM3flV6)Bl%GEM3!lqQ_ZjYmj_!^Rk@:>-LQbOPt`%r8`nG)U8&CEVG#(.j(s`IB%&'.%?T?IqM/9c!>e7:Hs$k>3)gR3_W,0$bq3;W7VG#(.)]rPlm`l[[A%Ar1OtelZCq?EZ'UJZ\bbe%uTJ/IlCq:nKp7nCHb,.hSV9AWH%79UK0ZK[N5#YUOVACDjddREVP*']oF.@2[*q\.)K91lrjq$KhG3eh\U,@<D=:MBB:\d1j0"#sOTC=iPllc#$2k-kstN:;\9S;D?%%f2SX0(aW?%]7]OON1`E6[PN25?(uHrepV[4(R4$p2du3(F]g_?JUOfZ6+9nW`m[:SI1Q+I:AWHEha8=_.HA'PNiVI9K#FQKZ7hor%Ml1Z/:Ai7;#+c%U5+;gU>f$J;jp3.er,iV=NUs[Fqa58h>JqbDT0LI3#"uYlDQ)#\,@>MYOT,s.k\d?jLnUfiC[T3!?0&c_NjAoo%>]_no0SZdA)uG#'Y&!G4\M=T6^#ffCAK#g@?-\MaVI+B\V;tmZ&;S!^DM[buJR4]]OVe/rAT)%'(,(#sbbDILd2WJ[CS)u9bHmQ$%/B4?Ya!l<rhH=W!o/nCh$\K,W`]f"SZ5;,XUEO5g<a*4q0G$=sLtp0.fLSKZI,%T=]BMddF<O;V=hdP@l>5+k/j1*l*r.W,g&.$p%%7StMj.92ibf?uV%hIN0-aA$LG`I6-c)FF[IY*$g^>"p"M=]UQpEU5ud:C6[M3CN4Q(A0!)WkOd[D/15p6,!EIJn&@I/0%[/NiB9%0iaU;hDC@@EppB+$^F":E[cCnC\/&.7=7`EbD&c&8BlV[3::u*0Hk4P2]/,^ncm#'&O-g<iVe\[fG@Q:[;/?j%)^pVK`)=Oa:Q)g%K)1m'53Gi9le/',PB"!2kcAN-0H1(GAGG%,m-oVo'k]l^)`OB[hSbk/a5)i6>q+o`i!`1`2B:\1]@;2.jW/PTW_RiWh>!D!H#C.8%F]7/Lq*aXFH"40hjpcN%hNTtY%<i,fb_5Do)lg6[&Pt--Jo8)VhtK0oK,/Q"`F"AIjVShY"&dQq1M>'Y8$TC*\ZhK6NZ7/:cLeAI%(Vk2M1&#/@bf=-*CV<hW[%Hk%CVN8Blh#N:#PXG^,?=!Vnk8+hiJ(!7_Cn\S&(cc,hk"eoVF'GucEe6f:,]cLB'*/)OiAY&_M1co%,)i@1K\`M\mtPl;$"FK+NXOu/N.l46k2ON'QZ-4?T>ZuZ=5J%?I>9F:M.ph@7!^acmgkcF$6Wn,0a59MShnF[2R_X<AXS9]+b,Mf%q6KOZ7O80)UJ&8oD7jq5iCO7!>*#05$CtaWROVjc%*ES'm1"R$@lhV!%8XuFntm,C)AjX<odWo%7C&M+!L8imP*LY=JbStah)K'q%N[NFd^XqkQrAQK'muqgH\UA,cj5\Y;?0N$"oi3ELYGCPIDZW,ngB`&p[npgC\#7GnKDZV$LM^4#F&K0ORsnS/9hiOk^A][c"DK*.%c/!a>55iL3aPD0H/tji$Y?ADc^Qm;77IA^cC$M@Ffsf,%S%H&_^IHd;Cus-]T]+D-hTS>CO:R+O)+*ihT/Y*Q>U0&`$gC6-JDLh$%2pT8)f,Tp=qe+3e3I+Z/dus3LAEC`%oT5U`ao0t#rcsVekZi2cH:U]G/#<_ZR"\uCk>LKsm@CFVV%,QZn]/dTBMFtV4$<HgQ_?+F%;#/gic;AZAqXqB^Yb!lHkIPtb'WEI('1+R9#>',;9k)u)pW\NAksf4GT4=n-p=bL^UYu-0YNf$G`*mF=@5mE)<mn7pd;C[#Su\]@%QkCVhMlAW7\#nVL<i(EOk&0rUMPFcfeZus0PQ,6\XW0j3;T$$WO71iSE(?s,nJ!m%a3%"Y9QdLmbt8poha*d(P.IAi+*KQ\3N^O$%-/S*RIX3[u`GMPP=o_H8(?`;\a3jL1<%36b%)9GJ5M574fYpY,L;h\0>[1Q9LPdgahjIB5^uoC7QD8XgNLl,/rI0mr9@"CE3l':&%m.+D`N-_9HPjF\Uf,?,&L09$OD-;Wih-_#V\<1@H!K;K31Nmpu+(C!&A7Kp*VODg+.qa7r-"Q]9r)D[&41FLI6"/P2&uK!)S<&&u%9kT)XaM$o!0u6^OG*VPKBL#V<a7+/'lln0L8,EH99__eZBRk*`UYab>h3Ri$Zf/&u)ec_.NGSDg!=+#8@&P'GgL7g;OFC-`F9JB_%XmlrniG`F1,,!H,)6&-pGs>I^-Ws'$m=Db'jA+h'-Dfrp4Gt@D)jK.nm#!W?7V;gAdE)P.Xp]D2R-+!81.Nrmrlt`8>RlImJbSC;%K<^AgZrjnYWca]#!uTas)Ta5HP6:#sLLd23^q;[X"0D"n=b&\FZ?$#$M'n@5URjut,@pn1@*$CiN8J*1L6HUpeFR]L8'1lA."]Y_%^fZms.QYS[;3*"&aB=$"'1tq;9)"J>A-"#Z-Kdt,6@18HGjl5Kb3.['p.o#;QPG4DgnfCt;7MHhb#cY91^<"RAst+;S]$$;;SMXK%8cR;:Ho\p;2M"Ns#+U7:d%u,3J)s^\N(`u`+>jhCQY#_XL1a=tE5oS?fj8QVDaWWtf5GUTf-KeWj%QVtI2a[3?G@XZgQ$N^?hUUN%,CLL\iEj:c#pmW"LVMFoELA0ED5cC+IbDb8#+cg[H*:TK=fHqY*:$qG9S7b3').=C]mbTC8pMHTm!J]:cSL:#>*haof.T7okXBA6%`%;Ykouj5YUtZbV\^rJ`lYZbO<$V/6AM\4)IcWsMs6t%A-^K4GHE5r]q^_9ol^,k=q6SMh\K2l6f>,K%qB`u>CV)=,3U/Q60':;r%+(+G@i9X\H-?L?eJE5&3p[J^&f.X`PR56Vl]maCOU=jh6dW5,0rB/@s][\\3%AH_goug*+iV;(#p\G&8<rsl-FW'p[^[,2'gl.qH%n+H9NV34OH&[KghbW3e*8@C+*^Xk.9<ket152GOkB=E3bHi:6snaGKW5OTco<kmV^iu@*#mV"LKr*I.co,df_1FI[IHhb7/ls'G:%rKlL2oc$+G/^M+Zg#fr60f8%+IUTa\hVnglGiHDc_cu/rh!:<Tb=-&[mko?n?Zn(_mc,7?%3rOtN=C\oj\7'n^X[7u0Bsh<laN+(%X'^6e,W"*toj5D,ZdL1CI<"1G^U25]@INm4[[@>K[41:PI_"n,bE7RLk8q=DB\'E^nVn=#N8;N5p,B)dDY6rG*oH2UqBbJXjnO#q%YkS!*a0j\.r4)Lt-0768BX';\onuL!ijL4^kA$f>rNb8Q_M%@MbMLJP?u2okrB`"P]@ARXY=oO5M>-k+H?sP?Hi:5Z6hZ\_^Xk-^%0YHf3RGLNjlaNI2WulU&'=cXIHcLlBnHn":QapOZfsML(f5EhD<kn-1dcgH%V+!Go^>(Kt]mf2giN`=1gO=pmoX,RkB;DiS3MeFN%X;M4i`)QXq?X&MEG+gJ0bi(@8e8<pUqafFMLn7os0e?Fsj,3:9L=bPM;EK[;8e^\lT^("nMSuFIR;@&qXE;)?-`rH1rV)pB(&Q1R%3k%;d79)%2$?LL<NpGN#g$_RPV_AfA20Zb*0NIu=HZSH-qB'A7rO\8oV6e`_7oZP(=%2fVb*o9rIGPUE:2=3QIs+l2rpJa)fRNmC%092Wm&*!4HF2ZaLlU%-9*e&qRd7:@P\GktI^8tS`Mm(=e$f]4ooT?Yt^AK9p::.b1WEmf+T*Ot[]A7@I[G1T8H.RIEg)&Ss)gf:X%B>$`di1uF%ST?<``m2uWU%@U1`K.4s;i>R,09>#Cn".>[Rlrskrq,pCEHZZ^=Zr:IH+KL$eXa0>\%aT*hClI>J5`Yp0DaX'=qXSW%gT6s:c&+I)#*^-P&g`?=Q[Os]!(F)H$)RMt/*/9EE!<&M7rYT#JuggMd.-s&r-X"-d-VmW/>^W+8'r,*QelM!+%<<E<u/2NGFuhI%dG].bk1[Jegsmi6hYNl0dKf[=RolfK9OU]UB2Q@HDWmNRZ$Oo)Nc:3.5&T4mOO3-^rHN*cC;0E30S-:pG&$"7Tg#li3d6,m[p)dL%[d;PDjb8a;Z0]rhdc]l4_CR%j*oa5[WKg2[0suCJ\MLYgB*RL%s'n]jk3FhR-'Xm;Pf8ONY0s>R.QFJuO72e?]!OH)Wd8'jDl582%o)8MJr-%U#`qdU=j)g,]CN#a+^(Bn4<VdA_ik53VGB4AMln%XN^ZPMHiL`d6caEQ`r,Y=+\Za0d5RR.aGE74n*6$PFS'RZ(hWE[]%00_]/oGn8%]!^J2#gQiV_c#D]rCuC+qkCCU^JN*\cSt%kNj?C2lG!DTl[I<"F/4%6Y$o.YT>^$gLIJs/3:_6(3Ue4Ho(HsXFQN';%W3Ykbd*KpfqP3f^'jdFZoV]-;4p?EWJ+WWP+VPI1C<K^j&T$fGRA:,r65sJ"^(')c#T!./BGDc8bG6Zg]RbZUl?8:+BD)%h[X)oh%W'T`*5l](*)19%!"-fCrlIEV0R%Ndp5@NNqY:EhXp%NCVmb;gG[J*]"GCYk4FNj-qcU#T/Bu<X#G?h\Hd;>]._JG6M>mX0[/psrh%48*jbj';1lCUYIjWJ((Q.P<$>WCpI=Z`ge4S_[RoiTXsO0MA2GQ0Pr9KR/a,DN@g0=j)>'WssQMY7_5YDjNf$h;;LghnCOUrN>!`%X6\'6$EJ>SfB>.HWZZFl-)gHdSq7$Zj3JkO^jH"H'E6VahBt=fr9*/i=TCkYcWtsW;k'-Q"Gg_ONMGV[nKKC9dm]]gB(J4FpWNA=%;+".rg;]Io]lpaOD%G=6K^:hI(Mu'WO*JTgB2N]Y1;0]*XaF=SNrH9LXp4G\QjZ_k.A;$-ahBV0=RbZfUUHU2*!+1>&g*9j9,k[Q%qE,\d-./*P?ZZ$fNM\G6<3Op1]4E(NM8j/SVE"AR"gq5n5lBj%5*hh<gGNR<V'<?3^$gce494!&QO\\#!qlW:aMT<-[I=YZ=Xe%#%qFeI"iPe%L8`X\U@s";n&i!b7S65W,>&B)8CjW5;rG_KhCr;>hnpZW?.&sFNc>Id^!2D<^hY4hQib,?FfA#=MT`".X^:a:/=7oMU%F9e(+ICOTH%>N_bkQ;)][JJEnYR@4)Mftc\Ie,W\Fmg$1js&^d#tQgYm:K+!GV32kU%?G#ot<VZ?BAak5Dui6EI%rCcWI2R>jgNR%2*uOXg4q\@hLGJ1(2)jjiAq7[V&Fh.!d,X!=IA"@p(T2el*=Ll>/XJ1eGCWqhSSVQq_oK>R+#kW>_Tp$1%29'3V16O=ZB*f^0"\B%M2:+d91UQ9baeFJ5n!?dm@\pEAUOIP;%$'2pAIt2LRUO&'SebjAbE?!1_5N%]%X9%bH33*4..]L+n2E<f1:5fmeOf/NtsA<`D".N%cRL!_l6S`%R,qc<67A\[L!Va'qBGAp7$^.8qn+0>IJLeHi^^52];("S/cpAkBe[X*`)EAf0(<Y$j1mqUaPP@*e-3lU1/S@!ad`QB%9G-aQ7tgSg.$'R#+::'"L>-C&rp8kZFmjr+h]h`@#[rs"O+Sj8]C8?dlti6LH:,*XobLB/bfSBO[BoGekZ:I!('#"n<GIU+=8I`m%3I\XbA=ifG`]<Ki"jHRf`&KEo7a1IR`&Pen@`U\37uVMH>6`@DJ&F<"b\#VWP;1?QZ2'/6c@K?>k4q5NSE!k+k'>We4Q9Pr*<,R]%)hNde]NCg*7#\h?<WRpWasj%+MR`K=_mc[WFtb4lLB7iS^ee/"_2f*[n>A_K-qaJ;?1QP"r#_9/5-E76L61l<Jr+m&j]OI%/L`W/%$,<=t^AYYBpt`9Ohg2n5'kM[Y!KSr'/bh;+QCU4FrSCGVCjub:Iuek^=h_>5KiqLFlp2H=`D5OXj(8CiknBQ-.rTSQga\'eT)Dko%[eH[mddZ/n\:fUSJK))arL`b7A_T\r.,'Dm_1,K]?D!\BUMfD3eLiHjhA''MG895Ph<<A"c/r1#hu0\&h<T-gh(PoG=#Wo*]=YMV%e\(3)R`4C8NKJdjB.-BMQ#4c(^REJUhllsZFf[6bBZ+D*p%J+.`UDRPc\'Q5S',[1a1DfB_VU_q]N,EH>EtcJ5D\//U9J1;^I'#=%hYQ>M5OQacI&Lu^&m+B"X.HEL\X0We(t[KXGg5U)nkJ0!e?W7>SXSI#_-F5&MJXj:'>h"L'`3>e1pR]aVZ"(d>C#'$>&.FWgm&u9%-^Wt(V(k^'acEL9`k0*(c'`i>Y($2F?,-9Jhd2(@?[gnf0rJoG[!a<ep9g0^7ghP>F`m)SoKh5uLRtLD'-+fcP&qW<*i*r=8lG.n%Iib`&S%dr7UGV05VTb6,/NGi,+M0;f1t&!=6,.Qa?Z_df<_7\c-p&VD`cDZ^[Z&X^h0T_Wr&aAd9(3"g!55%&J-?"X?7P\U)^Xu_%]DMp,leu<Wm!Sf`j-&N^MgN.r]dVhfi,+*2q,+BOfib;JH8nlk-$M7BnB]Fs^2NJ,&@8!q\]W_ICJC62i*eDphQ;/jBBSk9\`f]W%mP]5cmXCJXhL.ScDRG!-g:?IRhH(LoF;,*q.mXc\naW/?nL*Frdf&1fn_LDIXhEPi;\?O+P!(/Ic3`t<6r(R_eV0RJqs5AfqC?+L%pj)mlc]q!"pe>i,a&i.eoCV]MX895D/9"XI:VZ1UfB\Jq^Kb&[Sp&OLg1b??nqcB8Mb8-XEs3lVQW5J\NA&ZQm12<EqaGL)`YT!N%FRV5KIg\c*H!ePJEd8U5H]K\4@/I>R8"KJ@Qh%tjo"n?"(^,?qg8S<lV6`/9HZDQ\rLC5]2siW2L"pA^G9dE"5-gkSS"skG[\f,C%P&USF!SasDWjNId):EU^oEA9PeaFUMca>&XK!M`LXi>QuEIfXI;kj5!bZ--TYlV"V$1ign<`AHL#C56jaP4L=+5kXo9KW6K/;s3t%O*_\>^8oJ(9Y)U^C&)!_1%1H\]RTrieVst($XqiYD'VXQ'8Z,VLdf/V<JMj[!e3cpYjcOP0`8&;:jeAG3HkBV`Y!t,-1e![D0Vb>%cOo'$@Z%ja@!(PVhM[)3qXZkRMrT&,B5tPZmqb2"6);e8p^@5ETiMX)EN"0G8diV3baGH`ns_3qPSFR:Pue&..(.68`SZfQa?!MI%+0O`t-`si.c`9I-X0(KkFeWTZm,F(1G1Bl8*OV6@2t,Z(U^3j+EH/K)UA\J1_tE']`\pYD-UqW%,9+JJB>0_&l-h9GM^6\_Oa'4E%oPIP\=;1Mcl(e3?-^'],/bgBHYH.k98^PH&^aDJ1QD!b%J,ABh4",E'RrK'6FHpeMTr(+a)>r]%>*+SYmMg<mJiQB8`s"]=2H%$r%SEn-60GJ+T\ko8j`e.]:IX0/9kH@Kl,qga!`Y,nV?2oR1!/?g?m=UCaN3P&S@cX:>]9KA:F+o/MhIruC-%BkLlb-7cUd$l+&=tX*%#+Zo+%^iuKp4kssr<^sUjfmZpoNNcgqDDpY_l]POrtl/S[="h;dbD$$Eqe)Z5AQF7BAmaur.?>Aa=I509QF='_pUbcP1/g@DkI&<%P<AVWe:5ahO':TDN(He1Ei/kX-9:?-_nF65N"+5UgSK/@hO#7Z3OVR@he9)#di@,=.$M^,0`=6%Km/5RN;_O2gPoUrV_C1?-)]#e%lO-`IDT^6$<dVU\GI(LMMYma)n>G@^("Fq:L4KL0Mt_,to2N9!//7j5L"VsGc#/$3Fk:PSg@amk`AK3X4P2mUh(#QB\aBpVI92pD%E5W48L0"a"D7T`ZD[N5K$3.d<=(1V6!8)n\O5RdIA=*Wm8^iUha.%is7u,Whl57L_`<);(]-&Ahd.D8OitM@])iFVpe;FRNDa-Xp%J\@Wh1fH!*R].$E_^Gi/<f54"VN`X^1ni,Gl)(HsZ'M6@7GZI$?q2_V'qsq'PW0u.2N?^%5r0J\7tY!2?F#8s'a#acaY?a.9$EG#%*SY=#;)N*aQOM&8MRk$)WhUG.7?NQLV53<9Pitla<eLK")@U4d1Yj[_('('j7S1RUCV!LY2Cs^Q+OHPZ-!EkG[:fiRAD8df1t1fS%UKC?'Pr-I1M.p-"lC(OYQYbJUTgU=INWjP>;6gmk7T5k@@H^gj_Fjl6;mhdkRPpBI-!N7#SI/cZ3gQ-Zdt40aSV$H7YfnR7WX\@R%V.s-OQ"Ym]&-++D5n9-p+I8`:.tqr1l.Et'-o1n'_PT'rregr1%"en'>JPoGJKR5@WW69PZm\7.&@dZa<uht._cd18&.*m=5W]^H%_m!gs&hMQk!3\;5DOZXf-#-!f3gV8'NQj!Z<mb>,^e,;LZIlWYLiOIX.M\mL[R)`(<,)V1D)sXb!(G:C1nZAP:1]el'5%RJAdH2P%!@nWHJ.*/-f+W*51]b7F$`kjTU&tb-R=WgeO:2g'gSWq[k]GQKl>b_u+CctM'VZX6V@#SfL4GjPTN/do!P`&)TJ79h,=2MEoV)\7%W0ou-&tinO,QZKD1e/pF#!185SLJopm?2#^0N\Bi!g:!#T#_8=XojTL^^)i?i&KLePqW4+Oml?kfad9IRY?;cTF3coKiD^3)JIKo%jf$+QYdRM&YlVI=!;m8SKdskG=9;-o$5s=t"3*fBKg%'rCZ4!8(,3;DSR[KXUnbh2^mYk/BJ?Z"?mW`EeA`,m$(tU+?m]29"#s0@%'o+!+6i\3o>IB!l]h4)G7h0GF'Fhk!$?02T8GL04/X7Yq#m'&g.t\C6#YDJ"69>W:fHcu[/?hFOkUJ-NVVsRe8-2or-%L6j_4H0D%/IUkm-.=Sn`U+:o&E$t^*3bffcmfBQ%3uGf83*n"2AQ9MgEr,NM?n`m'I4"c*149I!s'0[&2T%MeWEZ;$Y6%C9PZ]#-E1-jJ?!^U%=NKeN@7iQl;,IFh-:#KMpP=t=>RMjDf+&Q.:n^]'#ZR`*Z5eZ.a9[GDXMbk'0sN*qb(Ke7@YnSs#5,)*^r0R`jAt8[^F-rY$@JLk%7n5,`8:i<L".`h%KO#PH!qZY-+?WA#<>5lXN(:9P!i#<`EE07DYY)$*I18W=,(Vd?"_Q+t:%Ki[;@#@-KLm(L!+4]2!WA=;6^#dt%Y-N"#>]=ASJaCreTnV2LLaAXL5QS(I&u+a5'#6@%!j^+Y'eDYr+j#eFOQHSl7feK;aU^/Gp<eU@UbT*l[LLe)86lua!FQ&m%:j'#%N^>%XL)m4K&t>3ji#m"KAI\u7J!i,.Yse@VZ&?*lD$9FYnKC0:#20_,%*K&"ImG\0V$Yf5Sj:/+-;]X2!Yf<L-Tqf)!6aD"WWohG%^^jfS+>aJU0PY:$!YYR^-*.qK*CugD9nko04ACkl_Z<U8;Q5?'8I%3p&E;?d7"#(u$\SP2_h:1b!gq%cE8b<haBda@==RMX.DLED%F\j2oW9C/m;"fDr+AUNR@`"R"/WJs(XT61^#FYZB.'^a'J<&7d>6'o%`QDD?FTY#6A0Af-=[2ulYWXj"=InbK-O-"?Y-EN:!2P04%Mo.\,BUG/tFheV>?qN[%WXZ=K!10"25Ud'7FB.hO#hK->Wr&THm1`bp%b4NX#ppBYC-ZL2)ubAZ-%[<I7UnL!e^+EC'T7goLC)ZJ%(O<B<4JO]8l+g,U"fmHe(a^@L,XMLd[:t`NR'NER0Qj6UU4*(^AkI0(AOPo(oDiK])(^@(%OrIFkJ05s^dt4)"XR#*BQd$^-qdu$%.bQJ8gC,JM=GZ;[<:LHb6$'D?^g>Gdk<\:L,-%cO"N1r"B!*Pg9N5>3D]rtC_@==,"Chb"NpTW0gOYU@8]$)h?rHHN5Rdti"OY=S%3N12.A-RekoJhkgQ,!T&'n[8+"M@GafN+QYRbniBZO5;d+MS+Q,d@JE'Ll'#*EjhB,s3Ri.fcGXZ)IB]gl_F5X^b:t"ZiiC8dEQ?%(*-ec.'0L,>SmWGO4:QD6I-iu#tq(f'o@qQ&iXj"Kbh<.U&u+7i@ABeTR^-E71MaR>r>0*Jl.0%%MBYD"IX'9)E"2^/R-lUY%'Od%6`XHZ/'_/6)TlKq.LZd2$l2NI046jNN=fh/iks8B>sUPk4`%De82?m1[nIh0';S!i9i(MYmpY.C6NKkJ,7/!3Q52/!Th!R@`<Ts>%]GgTIVP\*ZG2Qc-TIU*E!*0i`OAP5>aki7+'HGCb>oYO'4hTGr,SdVId>=XGCe^A,+CrTK5iYd3)p1RnJ5R'1-/$2GF=-L]`_Mlb%=>h&bZGZg?C'rW3^^(kS>[Y&iP#<j#*'.2'^qFYRTHg>.?%OmC,$CfV6YF`]7QI?6^:U8:1#\L5\V"FuEAc/D!uHUVIJC^BN,G*F%k+RE\-5&@i_U/4D.l&"W@HkMtJ0'um,1*C":XTHWR!VcIoAq/p&NUYXWM!'*YRt'7==0-4;7mL7,-^]tCN#jn@\<ckECtBl_@JE@%6Mgo(3@I4b]G'ia:c/6mfJ`hdJkQsqSLG*e*p,g9\:dp_#pb?o74&3c1sjN!.D^^8ahU8*_9u3;3,#Ih($0bWkeR8gTJ;"Ccu2AY%`WT:5Ra9N=Xoj=%2(2ZO7N9T,oKGG0_F!#),dlY]B^(DIQ`d(1W10FnF]`N4!A:k&VZ<_DrJZ1@WBsttYQD$EDulCY\q([uh<d]4%I)a#Y*K=%EL[_&?!1dR#KuWKcZnN9A$Q)S=?&*D50Q%:`XJ,^V\R?4P25U@"!h,&WKkDmAOdK/0(dJPWRVHPA!58e$jpG:lRU8r9%l2sE"U,%h/0Lm75n@#hp5pmLB_"Y;9dBFXUJ^k!:TEd>2'*RT9=Cs*]^ojF%$j0uC+Co=Xj*"f2T`1`B',;HAW+'^A!i$0+@OX,K%OKGbXPsV,LW']YsVQ/)%MPG0JLD&-g&\+*Wef/e.U[17pf\sXe'PCO`XGhH*3=T0n.4>muOC2S"!Ylc"",pYc!=3BM*,Ga9S;.#+%)VCipTFOM(K=W3lJ9=D';$j7T$HW`tZNIUc'2WZQ0EeRqlIeGf`E$:cQn19X<(F?AeMN4<OQg2H7"Q$R<B3FGU4kmEQHCmaaQMDp%,MXaeL"J=9+1?5&!:NUg4WKY3!1"2L,M"-f8CBi[)E-R*A8d(N6^W$.a=&35J.5'#TuW4ji*'8sA4)ce$eq:oTYr'@YFQr8$FNe`%e+OBT;+q0_+rRi1.=b,u&(1Fn$!Uu8"Ihh'nqN!9*`6AIfa.oql"4f;U'eL6L'O\M+:64fKDZIT*)7A4.Y6kd_]0+N=:,RQfGIQV%CM>2.9e'!KKaCl!BI=uF1^\I-<!E]K@0[RPi(jqX'[g&89iiaq-I>E)>-RK7H,>;R@Sbo*Tp9.u#R9<t:dAo#KcFdH,XEZuYXEI:%_Z2=o%aaJe]/%H?[`&`Pa.6&"lF'K531?iYEI'%Q1<7t6okY=a#c+Fm)U`be:Z4],@YFpj84-:IfG.Ms</E^m=pHa`8^f2ij7q]W%\>0C5J7DQe^kcK.-&_<$@j8A7kP'Ks,'I(Npd@N$*62CjCdq:f&2g1@D=KA@@'d1t@aPTaP%[r?0]Wh=!t<G+:!Sp?+T7!XLX:<+%:_!u#J6OJa\?3C1%.KU.5+j*PmA'`tnME)b"1UZOKk;jL`5*)8&:1Qd'J"he0N'aNB"4Ki$NHn$WMumNXKb0uFCo)aO;k-;S<hNp%dn4,sKoI9%7u`T6)TK(B!5enA/%4\d?(n)<ZSiq#5f^)1Q1Tl<)g[Tcakf@2aX[`!l*ZCDNi*;hFkuRrGc!7#&2\kKZ%PL=0H&\)%fVo#nT/i"G9S<I(Ks5jF$H?>UKNZDC(ikZ_2Mi2!N+#r^p^\<p_JfQ#(*.>4$>Y*L0Z(J.h+&TN`U$>Q4uJLB2?q22bpVjj.^Lr\%.)9f285KRbj66l.**>Sr6=>Vc@Mtj1Q2qa]kceHOcieQgU>86:Z6_i5JRt9!ECY8j&g>Ws`b5M[ehCXU:'$T0;on@AOKjVG5scEs%$pQ5=&o7e`-S,Ic2JfT<#T\OiA?6Gm>7F*?/MdA:9?7R\&d>ZEZiW`$BM\/B<6uAgFA)%e:s8p1A)$#5"`e4/S8)Ig;Ljk>RH=bj%'"V\Z05`dn5VVeK.[,F!JY4+*3\+$9C6n.+?=7fH(GVr):F4qV>Cgro@S<Ie+N"@:WM@/O*N:"lp'?IT`GcMuO&N,IYsO`iqiOp`%F,pTK2DVPUE_L(@MVVc(&3QhsSV3cBEmd7H"nZVi<gdMRb\5Zn%m<i/\N:j%6RAN<"7:VD/VA<ZA>L=m4:Hpp]B&`TL(Q")+ZYKj%c=2?WE^iY`iXZY?NjKV!<&B`o_W"9Uo0^fc`>_(8Y\]U@COCRfCBPQE',3L]8^A+M"2id^)%]FLLJ1)bQ8!,'K]WD3"Y9bU<BPV[%_U6$ZVfI.o95Ko=rhNCqK"FJDcd>3a.*Z9<YuHWO"+*S8&m\L.D'J.q]h)cT=\#u=K/Y<3&"I*:G2.4o-;8627:>1S1L:e:2(eC.%Xu#Bpj(?I]U_j4b@h]r\adpl6@,TKHEX%t"3^=q`[WoP#pFWX8YuJc9-7js_\jU#-RNrlD'duU6)dQ:qhR/_0aP+N57rq"G#(a^Y%^N=48:VdJ)ak04Lgr9dA9h5\#nD]j)%:_h%LZ0nOaa;"8-Fa30dI=E%Z3IrNgc731Ar9D6Rc@4D-<NSMGGlON]5f2(6nGT:N?POQ%JAHEiFp=V;hDO'.'`hm&TE^3HO,;^G0bI$_r(KQ;ED!_hb-.ObMA-Q)duG<#fI7qr,ms(r<@AuA>CNqdXl8iD/S(R=`+D&aapj<.%1(lF&-<=df#&P)+!kn&!,t1>]!lP#']5qJ\5*^+<_m%@8&Fi522$HE^Cq7bB<N3Kh(doE?:7/of&KJ[p;hrA^3$-s?;].Qt%(eeu%.YIVS"&$NP>YC=e*YaOAd42O#DTagB5U`SGj;\T^,1CA^G-ltMK)!;?nAUq@"TdKfeb1_O4gE+\_%iG]\g?HN5WbajF1<"Y(nVeq%L5$Wd_XU^nREL]W#uhj<-R`Cj"spI0)g&SMAsdro!B6l+FJ;-H"BX$*-$Rm9(h6&;K.]Q9,Sfh@L<Zb&GZ>`\+AF6"AcqoJ$n5j'%<UKk?o&PJ(O[.DMVIZ.sYmF7,W][rqEeF+L_R&96p5j*qCjG.u#<`f,0FGgh,ZSuYTg6;.b&4J;U2^nTkunF?E:+pMVHdIjA`7;:%`!>,"dO>^"HAt9C-3sehI7W-;d]&NbD0A&.K!?[SZ!:hMF9R)D^?8W,4K!bj=Z2.$KF4J]=@15'lm?P&g7e,4gHgtabud^kNYeQ(%?+N1VSE_nqYn)U[F``8Q]UC"7E7ENb:5'm^,V4Hed+ZOh#_HFh]s"c3V-/1H"3]p+#aPHXl[5"PQIXt8BIls_lWt$r%IPBdAX\?8%f,E6r/\ra!+MI'L_m:ArKV2$Z;rPD`$E9,"KA3eY["Ik)&O1oA"Ob:!="G"G8e_9@AEA_(5_iuBB48"SS_)iR5m<1hCfB:rWe'Sk%Ju;!n/cfG0#p^(t4<BT7UN%1I,9#s`k^7Q/:8.m\NB8`I9]nuUO\J?N0H`lk8n[mZWounPhq/?PgCeW=3oX6c'T$.&"$d?#+!(`(%m]I.f)4GCH):4WK\=%-=XAgn3K[%04>\2j2,^Ce5Eu\54:(3&+PkIJ9.@=`USZ*+#J")%?dWiWg<lLaF#o6o@;&pN:<8=fV\tD$@%_8fAkXh[.uW.`H[i#2trL8,16]u<\V$[a3,9c>:(nH]-[C^bI>VE@jI,okuFR9C;/jZ;=PdU5VR'R%n!1`S'H+epn/VaQ,+[gHV4%64kbuK^!GH9Agkub@9ZI\,dikFVl(G=<Z]j6/7HQSu"^CcqC,?!YGs.adjT?8]O-%Ndj-Z`mb/Kksg%\/rP)/)MP>:2UepL5.uZK%-<g\n)"u0e1_C8*PRb[Sh'b+K(:]88?Z%%h&;g[[OY.qD;jjJ^Elh#gMRpEe(_4OV;L$D`\+B[4cq-1OKu7NP-gp!IGZ]]F=N>89%;_U,66ub2FAmiPG%<2/-Q"_X]EJ6]cl*L\2.N26:.WEiHG7DZY`Q4GiZ&G01V!9Xu7-4Z;!;.gJ,sH.C.<:o;UQi8[8Y/+&,Fsb#%Qk+j4JqUbJL4pBC*ot5;C5"Qeg$HT3Gsg$eEZG6tL:\aFd<;[pX1Z^>i-r&B_2BVN5u&NiVLmH@ggboJRu:`:n@*/eHu@;/"9X2&%QM(o!ob<0sJb@:N%2E/GG^EMU]8n#k(^6e-5D^F40m(nt_W'$@!"ZU(Hk=i63/R]T)^&CbN9oAK0!is8#MbG=JL).B@$\eg;h,Jl%!#ChZQ9pOKi4^bR.OY^)1oLgF=(Lh&gZ\7e,-^Y\>Uk\(W[pOP3q-e'M%]:;WENP%515>#::;E&@Araq-AFk]C"(aU9NE1"NP<,X%4$Y\Gn[/(%-7CA&=?\)TR7i&n-%I;;Z\\**P`Dh1LQ4^g'KQqd705D/!!GDVKEhlJ,te[V,G=^dLSUoJ,2H^(*q/'b.EWpi*S2n#%J;EeSa4UGKQGW2]_!EMqB&SJ*)[LQN(8E",0'>TW:,#]M[[SF_5KctfR\Gl`!ZC<#i61%W[g&C?F#[2%QBU_M#KKrV(6g8VB$+Vq%9N5\tq2lOCYq8TQF>ut[&J^V1QK9bK*U"/-B!.6d"&Xpi7/M*(f<H&sA2$/_NkEbO4>&^do<]JT;[=qH(]-SI%/aB&,E8;>l0W!a%(+Y.1IG+Z$4;rt:O76EDpRYX\_\++lh1sP8NX?U^!e2M;"0;n>I/)Gn;Dr$9FLOEW"Nju5%l\]<99J;M^PsQ,(*3p</lT32%#cJB%)fr/Z'Up)jhVp')d:ksQZDoOd4XcgpC(S_";J_nU&'.MQh2`q0.'/$jADSh+o26k<JVSU"'I6"()>WVuOlc$k^,ErRGkb'L1'^6$%##/&_^,rF#K'2IU;jX;-1l>sUR8?IaU6'=R[`nhu=$ZVUG#pfs-@fS4.p*2@LSOZ+MRF<8e$jaNa$EY#SlAQH1%'.lV[O#E4#(R2%0`at`^d3ZA&l<#gjdF:c@UXrm^/tFtS_IoqL+#Se3s:@Ll)'-k'LWX[4N4,@!hk`g`)HDTU)&`'h.DQSlkN$.":1LA3Y`Ab(@]nF%/'Im^!8eclF*]B%Ce*G!e4aRA3/Y^%W[TKkg,\Rm!f1A-*KJ+*m(GsSL[tM?0R`IA2e_Eb5-gMHLN:cl0q!*uX5f?s._W/*>CfV;%$Ohg*F@tJ1M2+F[Wm3pBA=XU"0>d3P5:?UsW`'cQ)LhT+cg+^(*#oSNriNKb#GW`:,XP*>nY?,o@!F6IP,BF9#'eph@r8Sa6b6'i%#asJJ$^=%,a2'E%RSWAD3;OrJUF4<'ic/N<)&ZuU^`3aih-05l.`u5*A3e:7=Jh:JV>)Z[(Z@Ou`n9Oo.=4fTP.Kq5DS^:84Tn$s%INWkdUfOBIY\TSe9rHD,Y/>"nYoH,_5S6dVh8TnoiMNT9@;*2RGUV%gAC+JaCs+aJ.GMitRJ1EV&&H1q5Ztm,C8sD06u#Gk=>1"8%eCG[/FP+__<!H_5L?4(#M^9@/#g5ASL51D$mtVBK#i(saWXL&OWob?&ZV<b"DFDloJJ9u4A)',e-QhHM4Q@%30KSIV0YN!Vb@kA'%+j9)Z!un!DU).*&Y>P$1n<qFD2oE&^W5KHf+d/ORVkc>e(SDR,%RmuI\96"CZNO0VBAECS#h1#TWQANM94aV:m_V::$@3lZPbnT^%JhAp/;Zb!;H0^1D(jK;TEj\F?Gg2s]j(Oh8<@+Y'A^D)Y[UPX'oJ#u-5sp:5mjWHO7ZN+53X.SJd4kE@kT*kW+/L=E8Q5"AOPKLp%.MS1]cW3T+)B#,A2L*LLM#a*B$(C1g+[b72ci=S9$:.Nagj1-I$ZW@j!0su1Z%RK1%^Y_lO$FfAi7Zb][]h,Y)cWI:5!*I.E\gY6%PNb3+,pW.FL-MY*'m:_ZO(T.9nldJ*$hjm_g/WjEZ]8biKImO/G[Y/"FeS>u$kIDe(lr,QL]f[5a3dB.HUDin%:m:7f16J5l<1,%%E)jOcQ:/_YA4E,jenOYr=i-mn8h8+@VGoQH)gJ+QR8XK8.0IX^`cI'.hWM%'So40qJ\$G*fAr$FP2-Nn@lbW^U'jm?OOS.3$bB@H%*\q=L:>5)a-!,L^5F/IP+]d'S\C;("j*F8(:JQ@dG!'DA3kOt4/5@'^LG0-dQ*CsuKHVq/O%lN+<J;H-b*].>Wba_>+V6uV6RmHt%en\pV^'j\rd.'%G1>".1GF4j2J0!^R66ZE)!`I*TVTH_YdTZ<F`b&9A<Ch4T,Ua'^s/c)+pe567TD+UU'(Fa49h<[27$nZrn/5&H%A@)ZcBY,4Gk=E=`>X(mq"(t:$H'FfG0"3"b-setr)D*B!9HF2S&k*k/dd^9Q*g(S]gb<n^Z63aki5oSQe?B('-C#*Je!r.>NU1Z-%C"-]XS#+R""QnZ'SDcr8;fF'%n)EQ@#>^S7Vm@sI@'gZ+Q+-u18BRUT*=Ab'l!%/Zetsugb(O<]N_U"/T"%ac'-s1M:0cc;#@7Ht%QLN<7%E$'Pm^/'!&KkNb%8'.`"WGtOHr,d*J/sUQ%Vmq?@Bc.oG-<tL9R8HcB=\J.-"K(]mS('J%#fcV>X[b&0rTaq.eoetV+R^<%%^AFc_N<%+LqC-dPk'd&86CdGqd9g;%=,$"nE`i&&u.%DnkUi_,`/fG0WW2J3JS4Deof3L_5!bDn%Af3(B02&T_96uZC\:RU^EE<%6)4&9EBu<(/0hc.VphCJ)1IhA5kD7KJ%]D!Q"[U8LZY\5e?ZU.0GIh1Br5B0T,LraO3t2"C=n]Q*+9&*P.NCr&L`2KWRHrL(patu%f!\u=gO(t#%s\iUJQec\ip]34ci_`qIg?a"^JQSVfu5r,nNN-dcWMHsgN&nmKC^Q[AgoY,kXjcTajJl''-)M_X[1DmHij!8$L'Z4%;Dj]#SaWOuDT9fc)B[%nI`UI^1*VU.ECPO5^2Y*FbYJr(6=ks4]]O6=Hu:^TJBfeo@?WPRlU^oUcW"LI.3hZhR_6i/bo/+b%a>Tl%>9(12W7e'5CCQ/Q4$#$V9GPu8D)iHS2,uj65jcWP0I\Z1HP1R(T>KM%cNlL`;J.\baF5uNJgjT7b=Y0)S2j>VY9tn^)G.q,;S-Yl%2CE@S.6cp>nO!-dJNUq;S#E3GS;N);p3FYkC1EYVCsKTm[Gl.4\7pbIJRr5n*'j7[j,p])9/'1+(iI&sC*T#%JQRe",&LeGHfWJj%F?[O@KtJH`[0UtY9,!NqK^ftGjUSfXNnf!s[_lZ3(#O2@K.raILX:$n(3Mf45+Q.aAF6)49?PMP9k'L&mP%,`/rpW@74*4&>'5d\%ck$]+<,c:1HlJC!&KWKc*9J_-;oUSs`3qWTM&BoIL^obPaIG%b+[?`r&PM=%&m<S98dS%u[&V)eX6UHQ`hT.Qo:8XU9Q%MqAT8S@%7Z,&<hM^sa`E:<*jFTr<99qg2WGBpA+Mb6(PoY#ko)W;kWGlq^2p$14gG,l7pltp*YS%Gf5XtH2`I]+apkNu/ScNqLM\hP>mjU+e%;-8O7nKgss)R>c-'M^6US/X$</-PG*U)Ya%_SsnN0`_q?H2e$=ktOq9k"/5A?:gLl7;stqQu^b_]BG[-B#S@oUi]ed-:aB-;)N^G%0/=d*5*]M;"&Ib"a#%mC#_VGo*@2ASd3ZcG9S`2,4;`GlM;M[E%;%H&J&hZQ%mW*jH>E/0!_)hu.IXCfYlIS9j/tBJ=]Y!G8SM6Q%mfa@-3ZfDq1AYA\_62_Z68VW<d8GRs`I%0AV921h`F8.A]Cqr@hdW6W!=gE)ToDCnj:4\0YXC?/'S.V8E+mDm_EC[E0f2W7<(O(B%/=rhkID>fKXuBFJAD)OP^7bM"78eCHq][,ie1m,,Ro*XO1Z-N!G5r5#lA]o_i+?T?*`sBlK_G`/.S:+89O&8C82C>\4qI_Xh.KY<%HVGAfpS`J*D7L@95Up/G%(T*u<e;gI!P2rJJjm>t$N49s%]L_9749[)Tao8oYt.InHB)qln-H+l*r'3G4ZTXTkYCFU!9g1a?\1Qk%Q-K!o^u:mh"#jPp-1pGPSFk$+\@*]sY"[R=o77?aAkoEkj_oHg:J_2;6+K%9j+9n;9T!Sl/?o#nD3B0O(bgP8-@P3E\&]FtT*Z8b%MfG^AAO+;lhOKVBDPPJ6qs:uOFSE^7'#k@U_k#Ln!J3accK8<H#5BanH@Y&.3:+MWIl+2W'*hWYhG@qcHA\Ke^G%Pfl_i@"ce%$:%/KQ*JGL8msRY<"QjhIn!3+sEb,O;#e^o2n7AUI6X8j8:p8hq=ri.kPTXneB:9nVcER3mKa+KXnA<We`r(I;3XF;&0lj>b7]j%!\k%nAk0#g)89[Eloq`gs<K_AS-Ia^ul)gccr#K+M>0q*deUDP(l17^<!WY-5,*r7Z7`kE3XMp`Ys[rjG*e$9C>CmD/^_^`28@SL+1Dm%7(MmskppifJtZemM%5ptOP'5^1I5K/0agja7=(K'R!mf-X>C&V!E+KE<IUmg06A7dIOLcGHjMFb64Os:T7pNc;:pt"#as5]=[Ae3%Eb$s>%"L.)PVR:fqH6!0gkJboA$lQC!,"?rF^1Zfi?9?oLRGK)Ud>-P#cp3G$T;.)*$EEF=kfR0[tK#/\<j^i$5YqZ+cr(.kS9W4%E-!r61?#pIJ>t@R(QLY%%Opdmn'g$n*F!@\)\Ji6?RKRp'#pILEea[bBuG*?Ih0HP-Bp,r?U.:bbVq5OaQj%<WoADn8Y@HE`Lo-a%`#+_j,_>dq$1NAL^IV+MKaNNU/#NBe$5RX&4s)WKQp+mN/dj6>aduCNii/=T$34S<O>X$$C<,ctdL&Pt>0XI2)@3Xp-:"VhE2/C@%efmZda:TY7b#(Tnc-XDUs,W5i.ET[VHKP]TQ`5l:]Z]5?^h!r]j4IHa+8*-B,2S@+H6NJp_eBJZaS*OtOY[LRdOu%a1GlA6`D[IL%Z`I535T00tMEt(=G$EuuN%;\F.nP5h8/tJA1!=jAd=mJ`-IRUPGI\X"UDS31N8"R6P,^?7!P!Z`I;#+phV5P*8Y+DM-.Oq,d)EY;%-^,`1_?uf;7;-PleHL'mFegT$.H%Ss,4f8=]oEr#6ZIY-/Vn'[ZTRjk&>_jLdoH_;W(l>]$l6UL1/7hp`^tqn';rtFLg;Yp_g.)n%qKe^th%I%4d]g;G1MaH]UW>)ufA7gA8jU#E1P_RYqj]"nG"FU>b#,DEcO(pJR?_Hsa298r)4Aidm?^9?FT]g:4.Nm4`&bib*1?W-%?:6j)8Hm:UfP[9"NZctm#SGg=cN[_6Z:=*qW5F6YY-+$VFdVAX8Cl?J[H^osIppt-rR'*tFWtIaIZQ$,,\uuM[S_WtJXe9)!Yn_o%ilhjfqj/]n>WUL_4,_Mi&uJ>g6;AVL%qdKF,Z>fh\"`JGcQVD4X=D2Fl(e^r`ZQX5Q0WNk+eaP9XtgF`gR-TapOQOgW4GmYU(,;S%OJ[U`VT.D&%f8(G_jY*a30*Kop"\eAQ9"Qi8!U:FB'Z#RQ=r2P0;g!:RKnRQ\S@4/#YAl=N#9dfq-HF/,S)&o@R%OTUSUYZC,bZ^%[[a-&'1c;RGNOhkI`H.d=otT]=HcOsp,=Rl!t'n\K'_6<cX^;fA+8QBA'"=04<d!?8EjZTSR41*o]h>pn\9FK4sQVtR._![[Pqc0%XME-`a9iK)c2p@3%iEZ"`6GhJI@hYY.T/^omR*QRHn["Q@jXH-+;@jCY$C@UnPk&TaIM7NJALlt>k9KV0gZCiN"]'jf.te(E82+;%#3Jc#P0;-q8>Oo`YIu]K=m8MqgqsF!QeM+ZG$j5H6MsE61XiQ%Wk>PN?93$+i-(k+GMl*2Ie_]e'Bq:G>382nGC_U^:Jkn:ilQjM%%JY]HR*rTor1aTo&"+9=#2n-95=a.d4[:lG.hj^'hL\T*Xp)$g8=0Pm8cU,R;DR>Ef'hkh^p.:ri[J#=Y%^orCD55);`QI%GIPgC%CR3<K3tOq?;S<&u#RPK;d#@b(hQs+Re#XXLE_p,E7L0(s[1ZQZn<uS+Q(7s-,%_65jFgri2(4\]4N/NRMVhs+P:f[*q(OiX8@jUn%Qa#[uD]7XPP>_IH)FKpLUoa[P,pZU4%K@emn!eR.+J[s\7eaRHjCH3TOgduiWL<V(VIl?W,%r7*cg/cJ_=H>R8p"BBl]Se,O=8'k%<[G&U\q4:al?&!4jT5[\$m]o1<tpW>@R+8,=S9c8,OHYfUG2VlKRYV1cc;*4qa8ZD%du3]>#H/FgB#%<Ll+O[(Tu*0D\(5d4l/PL%0(<rOfohrU3R"N$](oH+5NFFLJ4!g^&-I>tF(CQi;6X!"8+4to6i1B0Ku.mXM1Gd+4r=ar=:<"Y5A.o*9i--k+YlBgBYY<SZ<=.5%Hr`HoHpu<d]IoD0ENY<RH^D_p,eRc/X>q7X%WWP<9K<7u&u)5PI2aD3PA)R1=%CeV6dTclaFq[p6_aTbVRr#?OX"hX4dG;&5FMcZ%WS:Q/VTj06Ah4j+DdA<'ER@-?p/!e(TPn-Q<<ZcD>OUe8\h7:TLqSh/oR2ur?*pha3%WnkL*,"RZN,$0I6gmCW.CMO_<hr9L7dpW%:-@2QWKPU_[E&Q@.;9\sGQW]<rc9Ml66rpr8:"B::l)/4&X<<@Hp)Yd5g]8V%FhDJ:T4cU>6IM),I#>?eMW41,1%hG8LN63i==K4%(=Dhk"O+t0(Mq%RZ%/i0ZO_'W$`MGJ@j(tG<ZC/hpDc.H)4Y%clc)[eTmK+DZDN5"4!>gE$&j@rH_7"RbH?N"mj&c1#3#)"b(ml'%$uL&PZSSM@nZ]qa-$#lNc2q?N@;9((m22>r6bA=r:$jk$lU!pV.IBaq5<@,JW1D&dU*p$k5:C%(DZ^EaaIT_WiNZ-`]6da[W[77j%LJ<=,6D':L"YV)Lrf1N84:hg86?%Q1XYt#qqTg0/_nD!N-3T,3i,R?,ToL6(>)jF(_sOkqGaZ7%;=-B5!K>#b"c3=W*`+V-SdA_b%pCCBb2AhC)J>Xla&ojO+RK;KPZ"$^%+uuW$L>=0r.Ll?Fjh5V:>IRsT\Qtta@87#ql7;%QQ3j>qnJ>_8!_sCG-9HQKn@Na#<12;T%I@TH8Hs^4SE*&dujSrKI>Qgm$_gTQo=,\WJW0c`+=C#H2+"a:p0cYLeM%^B8[KO6be7(T%M0#ra^74BZ0VgRc7_BU"A8Y#<c]Fr5%2\s6haO$k(,C;mo.g;k(a<pNXiJ2:I;W*1.k#0g!'Vhu:DBU<Qn2e8Zr4AASD1ECdMmt9%m`dl/g$QYQlVkHY76KkJ:P(SV)QN^#%Z>"oCUeKlZI[$RI:#X^MM/WfG=fM-$5%Krn"Tku1mq+7(-&m@q"([*ZH(_C-AL9AG?p+*kWe_[^ei"0&es%gdl)S)6;h7M/=53fN%QEAErbT$LsO[sK"eQA6"\"-)'K=fm.G`6N_$0]3XJ.1S6kpQ[H10]Me&Tkkh`4!s_/Q8Li=;0R$fCCd+dAo?j0j=>I:%D7.ni^#'%d<5df8SVr)9oC^iT@"T'$,hL.ZEGo)iNM*C1><$Xj@QKB1\1<,-L+pX_=*+oG)Z2FIc:6iZ%]AGOVd"O,MhS;&hkk%6EKaFY?[$c%3<kn9_Ps(qHoF<Ae+=aZ2Epf2?tpMTb!kh+)a+Zl0_0D8*lZ_Z;^c*mHF=fZa(r6<CGn&8"9R.Y/nmje2#2D"ac&)n5]\Vk1b55l%Vna"!\f9uikhr'rF1NOkMluJ/q9.<-bB5iZi#L`=nqmX!Lj&Z;XrF\rddZObA@2$"VBH<"kR"sts3;qdeOH*aETAA#MhuAg[RX>[%Mth@?bl17#kXiFae8/DF(,^Vm(`5eiD7YF%.ak=*QL/44@1HR;1<9Dr)^BR4S(1J2jA(`beZ=A'*d9lQ7AIn*hBGUr*cW2:6WD5(%rp*@!S$<Qje:gACaE_/mlDk)'=+b#U)Q`\*lf']^OOr@SVN-^q&F6bTDAf-/\Fjl$Q.Lc_pWr[6_DJOmg=p;g/IKD3M1!<QY^3<Y%.+&!YR5jn&ZKl\=@+.K[@$=J%-X@;B4p,3E,-=j:FB:88B"sh<"O6>m<Z=?$.^HEXQsCtE<"MPS=OJ0E0RpQI$;_de%jZ#GA9>&i%66_0SbL,JUM3QEXjkPO:r9n5YL;`EuCP>MNTk%V3SI17\@0^'i(0XqeGQ?d&ZV][L_OnIN\l]U.W3maW*+IV;hbDV*"u<eo*Y%j[%bj]Lr>3@KY+q$V9(_WNR5(QFE.UR8j]-$Q2p#HL.M2?c'<!.UZZ-'Ln^7-PF[=PU#NdapXbIg!@4e&be?6/59`9t2meRF!Gr,-EM%,XuM#4Cchb[]N)!RmO?qYI''r?S#'fcRFV@Ybr%m:L-u#3oLloM9`ZufD%R5H)Dqd>3E^(egsWMnB8Un`\Tq<1\K`e@6Mke^+SP$%,=dIH!2O&lk3nE8R-s!H<h="Q(6um!OXT1[)@+'MAJ\0d?O'r%TJ]`;,8Z:79bGQl?$cUT`bp\C=XfIe)DPbKN7(U`KjMkAYjtp+%Qe$4_E6']__<iUY1s4+'hi58LbrBRkf)8R*Zq%o*qrKegMRT-ChjEl10V\:B%iGCjPIBK/bl`II0#uWoR@I%17'#<LA@<?05Z%">%<Wu=N;3nHshc)L:o86k&L(+aR-i=I)&lS]Be>_&%APIKOYb*nKJ/VAc5)X9sgmsKJ8QHRa1Ra$CQmC9"I0s%;D$td$gsN2/+cb;M%p:b*YPeBIg]Iff9U>ZS+5krE)&.]LQh`sL4T9+jd5bTj<)]gl&+r]^_s*Q]HorGC`n__%["Ee_&GoYlP5s_A1oVB`foZCVHpc3<L%]/LmRTZ'cn0$0jhD?Fg&'nLD_fkb%oZ@r]FE3Dk'-UsD0"1)CejT[(QcrpHk,-=Zjq`OKKCHm!;$g<E>!mmTXF9_G`r2(_Lin95]%OG8%KK#nZ^/#b&-^,<M?OlSGbL])ME7To13q3nT%a:=4C:Z^1,I^de.)kp's*0[M^-_'iuig_oi,nIrK)gCm6Jmk\'<0&ST8L_LC%"ps<EG:_*D6)+mN0\h([n$J='Y?>!Sea"Y$4kmgmFCfpqcaf[m9kg_S5@s3Sld']Us*#@$nb"78Qm#\)7LF0uCmNMZaH3Tcs1b:!%S[gs(1/u(9cuhWU&GW)p>J6>3OKsV"j9Q/Ej#p:%)j,468$=Wea0m3O_UoL(Z2`WNcSMBBkYWhK*E3"Ma#d5[OG(%^W(3pj[k&pu%R,%R[`@tQj@[`k;6#q:;3uSZ4_#T(MXB<TSoM`Y(_BFuiR02Df7+d([HmG;C)aIK1+XCVI'(HW4\$%DG`ct2.+l#[APN>@kGfHPA%5Yho(/+l">[.YZ*#?5$W8RJYP38h(8fi18*cT!#`K#cj86#kSQ_T(J/=j.Epr.+*]2>oh0*H=K0B$:+2GF+Z16<!&aOF#Z20'gt*%G.a<?GG[UipWrZW:5ps)nbn]#[PDQk=K[[B_BGcFGYW,l?N=E9!"u==6B;#aP)g)T"bI1T>g\!k/;P8t;o);bMY8+(nU93]rGK5B%g>_C9X:r[pT(OYG?odA]M$t2'Bn),"9Kgl7><T"%p<a:@e@+]m2iLM(=WK)tG1qD\rF#\R[IR0r+MRiPN*]CU#,9)<%o<\,3B)5<%g^EE]p2c&h:IFXdo1slN*omQp%er2HB>Lj#iJEU9Mg^TOO7-]GN&@W*=<_4V+lhTs4h-"JdmqPVUEPs<J[l",C%rf6@ET5\%Q=<A%7,%Q)V39Z3=<Df24BeS$phH^1mh`,#qu,^Qqg<r8'Dm1EP5*\i>%Jk\dmqaFLcGiMhM!L'$g_3_"?dQJbh6&Z^#FR$iNnM8-f2I7%oS39-?;&7ZFIqNs>81;S+?V%eJ5X>;DZZfGoUDXaq>S(*Mf$<[=b`P^/;jj<Yq!M\>s"(_EdUad%4PIJ[_P`$O5>k^me6DPa'=*p%!6Tj6n#)+Iq60ZRM+/W,71]&W^#&[NkPHNlXQ-aAi3R5o%7OCjkh*o]3Bg)@B[a>)l1>Wf524u`LAs<+LD\X>Gg!ia]0Jb`WF9=j%Vr36']R)\;"o=(qUTdn,\WIr,,d?rhmro^WG#U3W(Vfd[eET<YGV,,76tm22T$EkMr&N@pU'(e#ComM$Og"7fK$EV*ZX1tQBdff^%HDoYfhDAo99VFgGd%3:-m.fk.0UL</T&-Oe6En7N-!>\bO4MVl&+d2/8NHD+0t=h4mI8EB?_Nj`bBW/\9@8jQk,W9Y$7);U^/&H&%K'^S+97F?m-$+_]j6j*47*bGr1"KGO2>j<>H6ZP1F5Mra^:!"HMR\=hq7G=/1_W@pMt2:j4D45NLrlFV;=`ZA(f&^X3eQ*c5Ca51%jtWGf[>;sgJQBN/c@YBB0nI)Dl.UsLr8t;35@nlg*Sl>O&H?'oLBR1h$H4^$"Qcm(*CP,2@@*`"]]e+UEu$O8K/3j?AjYj..t;9g%:%"K4f&L.1@L!YX%K"E1fndWimtW.`?C(o:6(_#;.[gs@Nmk/hmq&QB6S#WXIQ-'TD,Zsi2"Q0R32XN0abJrOl\^XdGAk%ucWkS/%/GEAWSYHLE+CrBnWm\`^CMN_77]PRkQa?d)L8k=%FL,C"P\KM2=pTlM//#:K39)jOX1e<&'hP"mT"au?6WI6.FZt;IX_Pj-&uf%&%$cPOO/V8;18@_O5\WFq19>G#>s(I'8e153LUCjNKm"<uVm4q>T<k.'0Tl':q&Qqc<S]6hr9%FV,/^RFh`Z[Tj.s8099f$<bJgWti%J6oY\o7=Q85`@Pd-gF7NCTN;1G`6Nn><jtVD?5R\/tTIB="1FUR1.[uM&?qlS4,>3;c!7>4T!Q*(4cQWoDfN8=s3pprH`6OZ*VB>%A8("o/8aP@aj.a$BH^!1;<e/fb3Fl6;Yb6hU)#+r#Bb8!m.-IeflEpi*>pgU9E"aLBH9"\>+^jcl1,;5s!TVE.>Z9)IP7q'0@I2c%7!m4*N0&H?X8M]8dFXc,[.Q:$1ckJo*M=\R/ksAj"da0BM.8#F;XLAlkf,V_7D[)uA=,/pmki@Ip[_a\m\*7H?MkW#fMo_r5KO2k%lG"UA,=Td.29B#;E#ER25!>c#hAXBpfj%[/IU.r=)sODg*h4B6hq`HDB4Pi5A3e[S&Z4lgEp)9_gikGDgkl\eM9^MIS4=SkU(KP7%+.h+eK\%6)arg:s[mAB[`p`Pq+ZnPpLSWT,jEq!KenQDN5?^JIk'&==="*qYA@BAPQJ"0COlM9.:F<c,nJabP'j[D#HAXs-cPLKk%U/Eci-0gd73uU*p,8c7Jb]8MtY'l&.<uH7kq%".'?T<R@.jaO#Lp-fj/>-i$&]FV40N&$S/V8pi"*+d6G5^M#R[lCrDTPMn]$q[c%YbVLMV`Ugm;lr-__fXT*rbK!]=Z$`phtA+T5Q]_nm+aYqhs\;Db')j'-UGC`)74Xbp)SWoQ7F"kOm1<P'&V`6b(PGnq1f4(&*NO1%CWCW<jC<6"K"'_k")M)B10nm=(,;5#)Y[)CS;`3Fa$eEW2!dY6DR3^!$83%n`j`mTE9?ho=YE,Tp1n*NO2M7c+=M,a:_qn**H5/1%P^"[j>1)GCH,%tB3Tk@$,34FPA\JqqY;SRq&Dk>!.1:@>o[k3CVWZGg:%q8"CjI:s.h8QROB%=!_:*a_rPu.7'C_/IS,%a'qQpTl%[.[D@=OTH+qaJ,!&TCi&XS%:@N,_Rmf+!\0=;]Uoo3S<hph+cQ4a[6+=R^9["UaQn7_W(*\e,)>.RNej>7[0N>W0^TK+2npjK`PV%MT(3X*J$AG0_k79@dH5OA/*S7M:R"gcg*jmeOm*o0(M*[1NA9HH`nsFDTQ\0#nW`JZn,7Z%lD,U^-OW)c4GBEO'qK2r,.%c@-/c@%X=njqni!nIBK+kAo///IUh2.K*Z#"_r!pN)X/[X-ms3+D^P=[/hYR3J0/L"in"!$q6Fp\1;ZM;!P8%!k:QjtY9_64G4JlpfPZT/D%$(5[hH&StrRrqO1m\'7;9o:echX;f$=.^O]ZiQTU3cJ6.Jm!\nKkuMV+l3itmu@'jmaK^io5hKhQJU!s;0sTCCr4oA^fj1R2^WUf%%+Be&BViaDRt)THo;K0u>QBoXLaX^_Xs3$`>WXXso()@;beH>5LFcE/eAF2G!cI'tHCmF-8plc11d2VE3M*%qj_,@+E463fL=rO=%4F?8Z-?Gn,\RaTqT&\@6&&NZ(:GCU;:lt`iMk&CrJ]#c07;1UmD2@&H2G\f44SeX3G;DDANqLO:SAkGs%#Ht4$!iP_,b8B<&Bm:C%<h&>If.d;RW?#Va[%UZeaL-G8=]hl^+QIYJT:VIW6VcFc#O49AI!guj`k,is))\u4^['PrkUcO(_HCs2f_$"+QX`L#m^n>D+]J<l%a%]a/nCPK4j(6L"\O[L"QM,J\*+Tn#h;);-MpZ/@1N51e]BSa5o??#U?i0QlDPlh;j=@)#BRF%u/pf`mquOooSU?r@g_45X4K\DT%]XtJ\D]::TiX(@kJ5oT,,/MQ4C/,@:IlMq,rg\q*Z.1ue)h&9RQmY"(B2:iPr>bD-&:7rP5.f/R(LAe"lsEJ:Ad9ck=r1U9JIsqN%?k]iG]X%\P;/h+M=0jfP,Af)RcQ?eQT,u2ug,@Pt_XV'Qq@5cUDsuSCPi4Y$Ai,UI#TI<bUTi.E1-DJnBu#>CUrbfKB80r!/f1HL%OPjZ+]t?YQ3]Zl_@#F%7dPJu;9ldg"<S.q2X808-Jd7e[UirRVN#44De.QORORoN+#-_QuqfI>l&>p7&4fB'G5'(kO,.#'!]%<,[%1Wjr)!4C*b1?hUh"9cQ8*#?Wt7St=h+'R\e/rI<,qO7QeUeDTZL;MIh`n#5LoVrNXF9IcF&FW1.l1.DfkaYr7+Q;q<T0n*e*.?lO%^A^+"Z/-^m2Q<&Pa/t1u\EIga-)]`e6.667r+VB?alrn,(]q$:'cNlM:"mtG>4DlkYjs?U.83b:T0S$Z*;)!2is3G7"?!7rnKhD`%Od@)&q@N3kkI`MBnFe'EqV;4n+UAnB59Lq4;nj&:Z[tTC<H44.Xbs>'$#;1m0:I!sUNS/"`sQ&G&5R^DkSVK_!jV20ngLK9Lm<qS%+Xo\\Psss1_m0KqBrOQV5aQQ6@cq4&4Y4=.2(60g"#t(!_a><K@_QUg*>o7baX^S\9$fgt5Sh4OM!*)V&:+J?/C]\saHJP0i:n"3%M1eO)"RfsFaE'[71:j#JXTK,T2/n&_3]("n"/<6\`61[Q2O*$OUbsoSO[3DQP.-C<C>dhN;BXQbMB4R=IQj3,R!YocU4(?ep<rE=%&>EMUG9cahF[3VWY;ctV3,BArY;JGI+E;e?!LsN.FKiG%s1MHGHP;S^;QMr=pDF\m6B?KSi$>Kqai7R"8B@TH:HEIlIJ&L"%P[qq%#^Z6\pLqNicds\jKH6Yo<_\K5'!PlH17H\]JNf$cL@b:-eUhKa"rt"0^!4SciMe)+4D_[r:G+V+M^_P`WZcTHf1EIWF=LIm40Aok%m<uJNp^h2=jD72C?O7V`%3VTW(;P`+d=7LbOt.C%8UP`0H,B)8q,Z3G"AjQ?LiW%W)@LInDC^lbq/+tmYo]D\ckh[f7\hDB,#tZJ%.`M7"(&*!)^/D=QdpCnR;3P$BX,1.I<ro538I=ik'#3$X'\CZ^)KalOes4t^ppHf[i9T!(F8NN/7t?&J:eD]B,g>E&!<d8@hY?jA%nr>!KBYijCWhehKGlt)S>j1Ai6/"<04P:jG";VfH@U^ZMMc<79kgOAOT\5LTTTGhdhhs8@r9uu,klV3CR!<RFi"L6k1W"(TZh9jI%kPKZ$Cg:D(Y?NiV_YAgVT6A[RG]T4GJo'Fa_+e,Bi9cj$7ok?QCfUtZmQ$?$h"R=Oki*@f`Kar#a%c<?RF:4\a4\6-I``(8"ebK/%&gbo""9UX'@co:`5nJ^uT8/B?/mm6"0(FC%.LJ<V1"'FRHFbt^%)kP0'kT?j-#!*(M@hF-((.DArOngfQ\BH`L=E_50AVC3[UJGe%gHGT8DM&0%PT>)]@i11hAhXJ1lnP^E<@Ai87Z8<*]:P:/;Htq;jPM3@6uAjh(/Bt9@+-(Y2d[6UNV#VN;Q2dEY@fV_`B$F](AaBp%SNQs+N/]Uc]Yg)2l&s+rF4rnZpm@qDZ+NKCrk-G3Xn4Hn5&7]ar;^cq2\GRO2J"$d>N9J3-Y%Ip?Pi8[FqM#,ZRnj"LL4nC3`peB%^7V\@;u:]K@s^k%Cnq5]Q=5:Q@o46C1JWLbWtX4n0&:,dSo+@B(WR,YJV&MqP^;_dZDf9k!l@o;JtUPMEYb=35bgmS!u%q?-WCcD%=k.,qLrlYRoKu#*U6mOslA0u/s3*0QJf;oEEX9VG!eTsE/6@?`R)Io"MlSKul.b+/o-g%F,@0/T1O]VR`c$K=ob]oj]jEs/e::MU%DYS>$d`O&E*c#7gPE`8hkKDoqe0JSZ&-9pQ^*V*;rj%VB2DU?s/4<Fqkdh1j%`V[T5H;g+8K!O.;#&9s,bbbD9#9pj'XM;Y^%G_a%cnXaOWACD6T_mNB?&'cHV`O)P?Sb*kdMV(p$B1lO&t[74]?'-Xi`55\K:G;&7t_.%L;L%:H.L&\bPc1b9=kQ6rI2mKL9D8_HA_(=%p,.E4Vf]KFHH'N'P#`OF;+^j#Gn_$@*I;Qtdq=J>qJMS<5!4`]O70!*j.dU9S[gRoX:Ge&%+9Z@]3b/O,uU=W;FnGF&X-N28h^6G%?d3lu6N%.2km/`ab1YmjA"""O7JubYP6e[i/m]?V*>HPP+$7<FjK<?I!Wk9>LNqnHWS\//N2RS]H.EG>LQk,UeZ&Z_NY.9M6k6q(%$m*7_'^t(U;=WPVDR?a2cb3tLS>!:=D1+^Ds).!E7-Prk^>b9[e_FMj<or"PFmlCD+Q!@Q4*qM5GV]-l87/Bl09Y3En1->TH4A0s%.H>l*&J`XU0k;as"EYIXN4tGb_";@lJskA@H/*iCd&_(k/cBF9h],1e_gU+%TtQJBpY^rREqo,JXBCn,a0q2`OoA;o#:2,3*3Uk4%Bm.6jd317`3;%.>@K$%N^C^Tj+/k@&o[GEFkUKl0Y$/GbV_k9RPQ0Fpa('i:iYH=8HNhq>%C#j0.BOd*da`b,o+kALXj[P&a[<Q.%+n1B3pj:;`g8U`Tn)s"=<MEXsG:8:V]e]0G0`1_FQeb2!m.r9G0-W,qO_7Sgb%GCGRSf$RXIBlk:m?aS?u9J.TbY97d8$PoiCRBr%L?>dQCqa4D7nb2uLR(?jQ^'3Gi-3X50>QSQW:Mo00>QSQ`JB^R'Xe8tGk-Oc4dh9Vo-J\ka\(9<_t8$dgLXUc6et<!I-A=Ll.JLK%42`%#-;]X`W4?u]LH07IZUd?/\')EsqqOZLS50X05P3b5:[Joeln"=;$K[3,TZ]%Dq0<i[[)Ff@ZAl38KsNHRM%cnZ%\:7e:p*+U%12V3eTC6qqH!dTE!Oi@Y2fHj=2Gpb`W_e9bW,O]b;;OD".#E6X<WR1,O:ejJ=H2hb68"ADM&ZD<I#_pf[i>RL"asPC#*'Er?h=X0%JCO=)F>%$o7BH%U&ukp_8Q^'Rri@tYoA?=_:#:(R4O2R?LqX#N4G.H*FU>mTde0'W_bh%&kB;tNPBK,+q`,V.XE$r2&tu5kjJt\Q%@iES5XIiu7?apddC8]FWC(d>mYJ(%d3L(p(56bpb\VX_11QpbCj7AfR5dqlA"qJ<3%Y>Lr0):B-`:)>Fi%<2P9d1*(>dMZ1d'j]D%"%t)2Cr5mt;\t#RA&JDO0%VUFU$(4o>EEClg"d6gR&j06W2sb&.Bs>8SPI]e$b]^4n;qjLV\cNK-OJ2E^k8.HiI'RpE%;R.2bD\n%?j8":e(sdP&p#k&THP>[(nW]XM`[rbR3AW0-!>k#`KX4`$T?Y[n;lIi??"epI&^Em:e[ijS7U;($4ICb-HlW&3i^(MURppt.PZOD%N/AW$2d#eu+ZM\&rnjd@6a^mY8?k!?hY6Ijh5'e>!b4*(K\,$ke6Lf-[aYo,bR[95VC64@VP#lfLrTN8SqD)6i]LE;\dYfJ\WtHS%qK;cd\&E*I6uUqH[DJ6AA#4bPV/oa&B&K4L!m^'k4OJ^K)3/2J9-+9'GpG*j(8[rD@VSat\JdmiA@-n1q/ekl=]D!PD''"U&i*Xu%-sKtXV-++p4;>t=>--&K((']4_NjUN*9d39__RHZaL(,/gmPX%L&U(9Ucbj's&aEOF*jEL>96gEpC)(QEt!m\_Zs"[9*m8NVb;/2%IS5flD--n;giU1*"JPg`]dN=&Io2ZDZ;FI]@MRjl"^$brn*&7]MEaB#DHp=I/2:,M;ph'$D;EL0=BH,kl3O3R-mNg;bT0CIeP&og%+783_((E8Qp!JWVWA2L(J]<&%TZK_7);1sH:I*YQrV0gqq:ANqq2XuJOa7]Ep.T-\J=<;%>fuG(;H.>l^iMWfF&57'*YU)+^\`'9%oG7IP?&CiRc=BeQY$K%mke$*IVQiZaFQalXLL(ce.TWgk/"WEnbs.TSo*Zps(6dUD_CHD"n[7r<#1n+=/EJDNI5+CR2Z`M$j;2.u%.B.Bt,Io6ic;T:cZZGkOh-^'/9>#9W<214seaPficZ_H61gj&k)oMF;,Y9b,Qq0;4f@9%,e3tdb4@W;eCl^Y%%tV4b<$nrD]5l2c%%mkuV1Ye8Uqt@(Uca;MD:#%L%fc:]fkfn+qJ1Oo"3Onj0U\^-;WP%(TcYC"Z*pGDnq+_Z%N:QPsJ$`+FO2u34:547/Y.qa4nB\e=%kNM+HX5.Q%H._Rh8P:e&fE[0qgtPW!"J6*<)8<iI2110&gH5&`FD",ZXm&tZLB\_#SYr!`D6/%:k:jI,CT"W(Gq[$]2J&5#I<F6W%'$`B80$M2^A5)f:Vt633Z\`AM]J#_?NoKY">:)28>=IMJn^i6hgnKarT*IfF[hAMHh;<]b<t=R,U[/WGGF[sbr\9'WB0NmGaj16:%%i[4*Pl'(*V"A\1Hl)j^Ulb'ir>H;E-.L>!asG<\1m"Y6au*#3d/X/4h=<8IeTBc4%WMRHgm<g<"^4<<P,2juf]^6BEtM&3`Zbb6%X6=EtDW`h5b73%s;c[!83hiY2T7cY;7&$('6'o_k?I#85"+>DaHr.R^i%Yrel2HV0CHoY"7eIKO-R,&<!&[#H`ZicR/!MIMj8?KO%d/>m6F0UetG7-N!9"t(q?pA0?Y7pC/"L2L4L`j@a*]hAqbO>c;`G+Y3X>r*$n`;"kh(&/<Mg"c^gKV[(8HTRT5&dlbWh)>C>9Yco%26KH()MXQ#;q&J#qR[24H5J'tGud#lc184b_`?J.BlRh3M>u9Pb+[(CPJ6VX((B;<-t1=.8XtKaSDLt#l1E8(%39C_HoLVaARS;X%hkE@J*[dAjHkZca+W@Iid=(Z>=J<WLL1[N0j_LB]`0m+?_Bc`kn^TMkbl[?4psjC<6IW&5=Ao\\!S+]lQZ/):X!*T]L5'a]WUS,m%[Y&gLY'^ElYi)\@pgMsIeJ#KR?D+Y&eC2g'T;;c?)NWuIE[P8'*LCTmUJQruX7Fq`"-0kG:;nS7qsNF2^0MD3HbKDA`</Ch8-X>r%Ri.:-W<Ka8Es,VnL_U+YYHn]^5aa#)"::E>\1%Q4k2f#:SVgJp]78e<JB.9Upd`l%c\JjN?2,HD#UYk_Ch`!D6_aP[T$C(mNA1Xl%b5B&W8%Loeo8R;$%]T_V)t`,;;]6(bBfjUF8Idq9!Ii(*Vcg3L<Hu:2c[!V`3!!FISXJ[CY<ft2GrQtUMU\<A-UW>qg7)2).4Ob5%@'j^]>l\,Rg0(Y2Ob2/t6lMX88Wr7=?:AU(p]o&%de0R9_7HM01o.])8-fcb]MfG.dO`klBiO-+UEc2=jjI?[fUG$6="/BS9K]]N%k6Un>c3Mb(mu7!.`3E<Q?=hC:]b22W)"gKGg68,2mMsmo$&@/,A[o;;R#:*hnZtC4jG>sA?W[smEG+H[>/BRN3\I>dM7G\HqMr,'%Vo3!.:^4f<BnL/X@:+D.=UpE1i81])5.0qn4^,X@phoo6!eLrhjVp"Qk+8qQCU'1[!e*/a*3.uCre'D'rGmdpgnSi1fIh^jmA0=(%LKtI_237@"M>lqelOf,"YH%-&d3[%2Q/sol9Hrq9cnX!N36-`j]@n@hQN&@Ikh=a'P9#\IZ^+?#46A)mjF#^12r.aQ%(ok=n.N!3%(/r[oM>;*O5YPAGj+9\q3kb-pUD9^]Q-,jd^KTQ1-1fMnXX[[XJ@IQo,;n>IH6SANPUPOSpJ\K]qZI8CZ?rWZ?e>*s'MZJ@J%*m$%7?L/G'^C+)53o4A.1Vf[>8Dr8+F6CUT"(f<[K$-q^W\>-fZi?+X=?2I04P;+BM!uL=FMBlqn_3BC5-M\I+'p8GV-#)F125m7QcQH%KTfC(iOH'lH?QS,HMr#7?YR9H#BJHI_4e_DDZPF#g[5c!E5BFQ4b;lS$LXb&)rFG=;,%K]_j^GXb[2-\2*r(R=`p@C%EZ)RTU38"%c'PIEjM'^(nQ2oL%+cR5maK[<h=;$rF4A#*?Yr\6*PUpG:fRWP/SL?53'c+.jbP`dmu,Io!B;8pa+6O=UI1KsQ-Z@>+E\HppND-F%\+&1YFnOQ[[sj#GoT)/:hs(p!a=?G#b.*Vj;1-@aZGjEGcj!F6#Dc6RCHS.6j37.>)a&C@A0[Ct,d3<.lOi>R<>pp##V>Ul4?sJc%FEe>gd]W(n]^/Hf;nku47FKYAHMA%V7uD*[^DlCijeg"!FSeOfH@!_"N^D??MI2&P:;^u^,F5OrkCrs4rl*KAme1Nga=M?]S):Z'%<h7KfOGrsL^fX?XbsNhIjBMm1ErBa*j!_l)mb`LYASnCT`n?9k@^[:-`bmSuY"LI-XokG@X5RRm\?YS["Q.-RT2',/PDCM_hcN9t%G<bBJN,a2qXQ>>md&)UYFs2(6V(@HWrbUS-_EhIuR>dM-1a-7/Vgm$9s&'\".?_ll+WS`n@2,";KG?\[2S.S:ekdkJ_Qog5/\/:5%5HA'YY?&%ghYRrDlIgh<DVorZE;P9W30DAWA8Fc]=)b'&Jk52lH<*uZ4shL^r;P2g>bC6eep<:B*''T%JB?H<)R_'e8LOu=s*;l:%s"QN@]lTH3r"Wk`5@h4^:FsL5kjl18pEG:NgXQ;8XO7Z7F"h8(R2:CPb<$="hto9P%qlfo)uas2-fG-`f3+*U:*>]GSP#;/2!:C7%8c4K2Iibni!gfM.*%mDI?p@56#K@;@#SP]Abmat$mSprjq:+M&-jh7'j['b&&_Ieu.:kQE!EP?;e%(7IK2Tk9L[`uI--=H_QdA0e%iXDs9;d=5W3eeuXqY/Ae_QLW-l+<D(PX"lU2EE8O`0a_^"c^MD=p?[?ekp6^V`L*&8U/[_]F":/+OZ8[E>nA/YsYu@kT.6p#M[Y@%>Q.%?,9q;CY;`EP/G*QiSb``L\'b$c]_/_jp5o<kWTFcF`TLul'mR\1Cmc9k?!k/"m<j5G*TX#[9Z.P\_m7=*+ufQ3&qqo7Kriet%pTEThIJfU#A:qG,j:inaYPi^([K[?`irI-b.DKkgi8sF9KmIu"I"?eAmqGUC/)F&>>;*ZVUl`;C&%2Bg&R=7qMNa$>[ZD.mUAZ:A%rnRbZP#tJlSrnJ#L5R,g>V`IEo*gRh6pQmq]nB]:)<9&8;p2!<(MhQ,PQZ]<<"H]Hg8HBq$[8ooP&MZd,TXiDfqcK"oMFZ?IV_Fq%"WuKXI'e7FVrZOAa%;6hNT$t;N&Q'4:>$t,i]ZX0D5odb%TFIS5#b#Sp(Zos]/^8nBZ8iG'*H4#-jfmbQ+tW'WL>,oEu7*'fre06%/Wk&>n(m02rI?@BM=S=\ff@)m6,k=#[D9n.2PV3TYOABJler?>Tp#7e;?Xrj*KkJCg3^;S#@JPBri%Hch$hDM&Fu?G'p`asD/'T8%60<7`h/Z#lMtZZ4k92V_dM!,ghoOH3fB)NGUhnh_F$9@!q`!=W.k85JA8dn7l;<N?2_tBPj\(T(*55X9;/bUSIJfmnDFB-G5OcBP%jd<\aPRjfe?p:,O?ZM74F=?BRB5&>;b$2m(/+HlsA::r'e$%kqn?9M9k.V;")[t:NYV.OXaK%B&k)n?G[NXR$/=(Q5ZeKtkr*A!A%PR*u/'me04n=uNJr"A\#^74L,)sQj*GnD8_Ln@4_!gr%FVM5=Qeb[1Tn#RObmF>k/k&u^d3Kh5=d!!`pT,lAXKnp)!ON;;02?)G"%BA"F5K\qe[TVG$'QUfu"W7V;>T['q0RB!C4U(EZPnlaB-3VUKrkVI^Za>VH)ll`7X#[.u23M6-'E;*70Q72E<]e;UeKl>:FVW9CP%nTc5&"]43YdH4!BX,DP<"D2gX3CCcjG>"NELaY!\pZuZq-$%rmNdIlS"U@WR6V1oE&pUn`=GI=`c+_Ii3UoF#JKnKG((*I<aDIW,%jsq%>k1hA?k,Te>]c`,%ml01;FXoY4BGca3+H`#0'u`#o,VY<Z>&Z'/XoDWL=cgTUIQSkUeH)rXZV1KXKkpXB`GUt0N]*SX0/?dn%b,acJNUVaAgT[UL,)NS$'0qDZ+F=_,$7torlfUYG"#c[PSeQ40K0Nu@#gI.ZIEB8l7-HOpT]3JKqKB'a6cS6b?5-^_RDrA#k3:TZ%oou@:1_5Ul2+[tTlLt?@EUN6B1%Qd'ZB4%571&%b!<F1E/h>u=81a1TCTQMhAW7(n.BZ8U2!sR?e_uVmUH?%80W!B5.[CKpie*JW%<X\NCC1<iWZc0`5($D&lJ:Qkp;8nB8))VR0VP[lL*Bn%jmK@MI5GB(kaXCRt2+Y*3IuVRr$!/3]'D,(n6A=`.ft&faTO9\MVllN@%,WD'mF"^hU/Vk%U5MMM*5kARbrGI3oQ*ru<[cr3IHgU;7b.mV3:t\0$<T6KnJj#^lL'$j;WgnGJf]af)H!.ZRO:5fR,-c#n9-#s7%[/Fm=&&VJlh-Ff"PT@L,V_#5m\e`+;O_tk,qlk0Gp%1P^$Cgrba/D%+C;5q"meDeaaHs>Z8Y5>IFk>BP^7R0P8@n+e`mC]m%\D5b%PE'STSt`a_@u?e9`V]UY`hqtP_ELEI_t1e1]BPmm@HJ+,]=(B`:O?L"O/2F-U#`MZJif&BDoK&tE(M:JH`PVf6b_CFg!H6WAUd0a%6;:%>?$f<I?L?7N[XP^Wa!fp67^dsG#+>5eIpaD'8\6E%VENRgs)V$S`h@lTJ6'Bj3sfQ9$BKpuak5h[@i2qKl'A"C*b\Shc[rYd%27M,Z&F@r>]%!(HF7A?nF0)@'NY&o"qRK,9IKS7F;*"qgaAOUh>_s<6\JD1>-e7ZN4E,E:a$\CeDHZLKe[t'.)1,`b;r4AY5LB3&%eOW1NL_f"Zhatu`-JX3]7m9`MFO%C+]n-p#+bhPnM.a/6Jfg\9'NPRL$q1A8+-Q*ECs7_U@;*tgo&2Ir_>N`UPK(BVEO-KAn_VN"%JD;o`-^^`c71[)CehmjZnp*21MX@2QG/2TQeY/$BY0lP`GN2JI[JX/D_:kPa6(2uo1DBE12fS`_SBE;%oTjL,?I,frdCd2CO`2;i%RpnZ-W2*)($GTA0)HJO.Tis3+ZF('D!J+uueLk_&8*,pNr-&mB&"QkMAoQd^mu:(%pUF4JBnf]'OuKKE(W^>a=e<`rg&b(0VM)LU%XY0-]/%KT(G%P"eCZ%k0XG7"_KIM;<N(K*F/O5o[)!&9@i`-^"0,hQ,+oqJT['&Jm8k6C/Wl`CcaoU";=@np_i`9/J(mHXNc/s^g%l;6.9<dQ$!?X7[t6.0JY<HnmN/-7THk:/=`Wa?tYE)Z2"jXr;hL>I&n"#0,JR2)Gi(?iadCkWYc4I%3`K-$2AKe't"22PG@+I306%\CCp,J*=rfBL"3c_IY5Sntf-[fqd*F5KUi?2gIqsWqR:XR]mqs/"/$k="0Lcs8?8is-TK%l.!L.FJm_gC3E#QHrBC<P+XPHoPm@O%DOi8JTe'@n@f%RD]\V:!q"PJ9RPEp`<if[BiKp2m+mZarcOFXi866'tZ_8p;%+%Q!KGoX'c_RcGnNb58c@tOeOK?8M[><L9=uLXb%YHCkR3*I*A@B7WEZjE@)^e]>M@4bT)><`o:1>Z<ij&opY5?I,.WXft[J`V)'`TY'Li#1m`^qO>DRmU5qA:2[7J*qPr]_Nq-b+JL?%?ir]m)PB8.Id?)-2A(;90R_H`Bd;f*04l,8@Jt)ToE)rT3'%A3V5fNb$tGpNVZJP/iY.\[h;)1ZgG[fnbYE-MAfV8d#pEH`A<XfZ%6)Dk;&ng_s^Xn;&/1_8k-0V(ln)E;\KY'oB=%_"gqQYV@?589NV\sk3"a,skcL_b\mo<MNYt(rM/]"\8l&-^r6XktrR6/S(1"*T.%&nChsRNd%FG2t2eY(B3<8Y"%m0D(sHEh+mZ[9GqgU!Ok#8%6AiFrZP.5$JSM9f?YAg3=&:#]A`.-<<5dbSB=8'qT"@5nH]`dd8n5%UQ?of"@'L0@0!(l,2)I=l@J[@T+J2:SZGfC^mPNZ\EJFYGtudq@(W)+Q>HdY$TC73:Bc&&<0ngq63@WFN"p40!l1!LKAohZ`<s-8%aY/W*"CF`O=*!UiYnl;d/i$4?!c56l<E+YYlO@(,TP@e1$@;l"X-G.IDnRM@qaZre'6j$p6[1o-0PjQ:LQV79dA>-"Jr91i]GU;S%_753g)'mYsOVUPKDnH9E;HG'T(OnhiZWud\5`]Y++::(["?kknQ!WEeCA\d*$jm4%,V,MmM%K9Ta>KgGCuF6I@;2QR&rPI$>SRu(%eXqGh,@:NTYZ('\pc6#+LR6eeO>(/W;p_IZ<CB*`-L*C.fiR-_N`:a2KX%%X7M[*slF[nb%+J^%Plb0-CM.>('f_;A?Mj*LrE+gE%g(m0W0_j4pBFH."&NHlfgf7hVQ4[-BmE>C%U(AN7"k5^=80QYj@Bf@rcVj#,?hEPiqdtP?,I)=XLP4AcRZ/>_QXhKHQIO]b]67n,%M44=3+1M<ON^=T3LZKL+Ub=)V-J"b<g,.gVi:@^'@YG7mF`B,h>_?b)"-Z$VG1ItLG:e<Zc:58[m*l6VH()^f28\C8^5D9q6Wal$%c!/U1>dS<df$N@aj`4pm5m$f:M-XQ2N?[j)-&Z]`oDg\W8k(J_pE22.;8AEP%g7C\*l7pcRLH3@i/\C4nLT=QQGOPC8Kl,lQ3!EO%n0-oJ@q)lXXpkIIIUl'PilKgFjmc`=ZEa>(`_:r#hG5#m7B&"O[="4J@q*#mI-aG:b'pK;dQEEn,BMlWm6ZejPB;>`gFi>;f#u,^%B$FMe9LoflKSVcYeUZ*^F:>=USe?+2VQm5H$6LJ>qrF_04iThDKuJ`2M9R3:h9E/H90%X]%+RVF+GDY"a?0SKBuTBjB-Q&ToMg6e%d%cS3cR`?#^>7%,.1O3q',?DT0H'W`8Dqnq#fM*4+a&n=Qg>1t'!4Ji1.1n:\;6WsA2;3T's3dl4-.%7PUTk`"@@MuYG"4g%SB9,%G+S+Z\KNK>&H)@+D+/l@6ck;(8gY>r8sLFTG*pN\)`ftcJH`e1j)I&9Ed6<';d50I`2J$*ZadQ(+^n?,]>&R@MFL`lf#P]I&4.DW%h3+V.$,FAe\mJaniN@7>9#IqN-\B5NYQRSIH@)ee<S2#OT*3b2[<P@YpOREf&#pr)XN6d1JBZB>s7p$N+tL9)Fcd*\#Tk@=m(d'@%!##EBN"C]KV19Gi9]O-%\g8SS\EKAmoT9+[g/\rE%l,'VAZ9;!ab;9*3Yhl$g-5^>O7d9<5l5ioo2@?[Jc,SjIfVV<*;%`2mM7!5%<NI:1[+9K,k,AHK9,h5MY&@fM&a$$de7$\tWb8/u[YLtl6qq)ebF%XrZkJG9@?FQp/49cr+_h0f!Met0YX'I>O#hp7&2QQSN:'Zb%$]EiYbpN"l!1\1:@=i5?cGfK,-<I2UEuTHcY=5UB(*3[ZTPf[h2d+^tYs>8CgPO!cggHt+:2]+jRq;thdm-O$Gr6:s"f46&!hb%b%fLD59_2$r0qJNgS"0MUs"e[reHq-D)$G+[io8a7sP0^_j<3R1H?n*hi%h6F5;J_eaa]b>Efd3dtH`;HY'5Si;'c9UuJoMs/hutBZ%(1Z\Bi5<mApo:B/5A[,u?:\"LVZRQX-`^*iZIqY/@OZIheF>+;1K_m<r0f<^GR-qa!^^1cg^,VD)-Gk.cOku.J?EC\Jg0/jdUILU%DCnpHkm/uqb!3n!Zb@N?*S)FnnLI9fA.1sn)k#c][sAhBN$;_`VG/'?<C3RiR"EE0e,`Id!aPc#Gsh_S'J6PfhGKPJLoh+c_2Mcl%T?G4Wa]"2jk3Ot8aboa#IeDLA*]imW7.8!TADE\5K//d%\EPX=%1DcFg)\D[ESh.hbI>LTF`BIV.C2&'7^U'7Q>Y$j."(DOBs%e;%BEUaqF7i\TN=RU&`lMTi!R%Na9@FZ.8.#)?<s+LT`RS?H<INg4BD^P#p/J+)9gb5s?+D)X)%5q%o9m&;C>O4/*XO^n/(cD7Lnaqh%'DZ[Vp^%#XJ\)JO^CIqG@uM&&Po-9*]Y53fBeNJe?RHu@@'jtMVC+,!UFf.EVP;aj^LuY>Lh^@bh1;?V)Pt3%nIomV[fm7)'f<$E%(Nlt!L3k>1f`'AlW]M_cq5^pIF4CMM%0De\NWtmDolC/Kn#'-=j%+WCc_JgdIs\O.('Z&["%EqaBd]app<C_Q^"_t"C?u8W+\Zq8%`@c^p<<Vd1D[&W+rKL=H%K#^sQ+@pC0K,<aWcWp"XbnanMj003X1V?<Cc];\X%nO`-fqel&NnPSbsbbVOse^R_b$O(8nTj6SQJBR%TkgW3#k:9VI;?;&,`V^VCo%3G/3%0AVQ`kKS^X2,S?87nTdijr"7'5m=s7DO$LDm%b06*Yb+"h=0F.+LbGUbo`hlg<]IJ(aA+-`q%bDtnL#.2%2=mC%T9/95!Aqcd%)%UQUC^3K$a8pZMKu6V76=$3GiO?G`=e&/Ej!$c,H3(Hq^;XrU<7FdoBGUjB=?k:E3cRQ$)?00#%9V=HWD%<!$.D_#5p$D!"Z*Nr(V'PJ<O&R5A^p&W]!TAU[/Q+j^)G\n1KIY8iKa7cJ0s'aFiu&F>d_`8H<2Mq7%n:3=@B\47A<_Zi%3EVTG&]q'iP"jfmCbQ<bi4Z3/.Fm`Z<odd^([M[_01cLZU.Jo6o5$;rPj?ZYlWBd3'YQp8"Eo"qaEsL.\k+"f#3+FXi1JMQH1Yfu%CUrT+30+;@r7Lp)#7`OKrR-]RK:+[1rb&riU;A2l!%0].mbCq\KejL#-3#jhQr`W.T`CIM%KRC/7P4a8komk,QYOaqh"JDi%doj6%bT$kFQ_>g18g;9<7=c2AluWKm>aM@mR7Y+ON>(Y:"t_ILa,k9O`6d>*j]lC"BL#S;#e*\IB@Sud4WKt<9H\H!Q,R058:cZION#P-%!QF7a<QX'hh.pKO5.Ca><3c!qcae*=Og9:<UO:rS1We]&l8=uq9,H_[!oU__@M!<nouLF2On\8e#LtPdZb*14/J:RsjhJ_%fiuI/%+VfaL!)FO:"S+o8OB(o.'m:-k]joe_79Bl&*nNIM&)mQ78[+7=$]2UZDWFS,QnHDo"-bC'/50\Sd_c2s*BGBRMu0sE'1_'T:'t;5%Z&TfEXX\;.@]@hL>]O_3$t+5rGfjUTg)h!go9:C[,K*GMHpO7:,?]0Cmr^tG@:B4\`?)L2a"FfO%>sNS6li]>^7`dS_8)^$+f;IG%?r9;>4QKB+[:M@s0_&O.E1E(8/>%3e6<A\d&WLl[TVm'TT]eK@[[.k_E%s%IZE2&L=eaEmYGIgB>f<Ik&A:Cfd./$J*u5%ui7QIn%__>SS70L'7%b-g'oiM>"KOee9IRjmlfRq3S$8Vk+\B^4="+C=OE6YfLWWD,_bUr#6S4WbPHWbZ$T`C/XhSiNS2hIt[aJtLFDp[;`%a<K\VJA#a4ZP?'#,/f"j-d'hB&Vj49%MDR+edb8-/00l0&:?Xklg-7n[uL8a^>`]`K3M?gCosd+=A3)@p_(ZI0VI$kR8Zf3.'-K%%50"Wm;V/4[>4G]B;E;nNet>WNblhX4o824eaWq"i'I-(WU'S.K/>&VFN[UGa<<dNG[n*>,hCr+;UWR4]KX]15S2q&#]J,k[ZU_Tj%3.0_]_t^q2!NS0Jh5'uV#7Zo%Yai$nVh[2+%*^+/MV,f8/T&JQE71Nm]!l-sJmKVp*st:P![>`Dr7Sk8QNt6(RX6aK1B86LSR\oR%NtI7-/nI*c.)W5C!Y%p;38Uj2cN5<ECW)]p"h1cG\FImjfFkBEIN_W''dS2F\.LG7o"%5l"1"=q&c>jtFT.4aiaPnT4N=>d)C%V"%R=W-=][a^T/7@KnSH1[p?A<jm+nEW>:oIM@PAG?E6G>u>#R#/t,/l?02)d)m=buSQK?ab\4F+H!8&D&OCj[:"OPif@C&kNWJ:dJ;%UQ[VSR4QR;$o0lZ:J8f2p''aS\2W(s.mUD[nd*;e-QV'+Gh$dZ36Hb6Bae^t_aG,$Ak7N'LlbQrZ-lH864Y<kF@*;R'GBEaf:uOc%=%s;N4oUbZ#RU&rn5c>Mkb0Wb";6%"=opT(8htp(,`#53T"o\IoFd6W8]J;9peo7,.cW>7HVtWG,MoI:*(u)/@0ck/_^Uq0hM6VO%-Qaf.S2+^X[p9'a(^ph''EP/2RoV&.R4[rWDt.`)]qfslO>.7<Z%ESo,q%b[MX<[GS%!8<APr%=:^@u&HRaRY2VjV6"rTSB0=jsc%b5ZQT@/*B(O>$F-3X*_CPrl"](9>fP=>(-o0%.?+;ipKnJ;!oFq3=K>N;(gck[4\e=5]]i)o=Y%%t:8b[NZ0b;K*22aqrYNmM3G;%.im1jpBW#I3QQde^^Yg@f[dED2+j8@0o]&-N0up8C^&QN6mO1XeVR<lZKTB"B&t.d]U8e9'(5p/69G_UA3M/#N1aHu>jdKn4A4W$%)0J65j_hsS&tV/ZZkoK!4YtcLZ3_P8DmBuuPR88J(k.cT\cra=NA@gofK=^CU/^^0OVnE+qO'<1K\gYBk"C'H,G7NuWuqSDCV_`D%)tVCuE*0!JbLC1[!.KI):pIJkG7QPhXCVR#;YlGOir^2WZr9.8_;I*NXS^"r4TWZ;p%`BVV;U)1&S+F3klVP&Ci%9\5SPJMbI[6e%USmY$m43T;'c#$3;k)F$<5mUPB7rdh:RO0L&4Ze<&jTRI_Bo[.K29`S6oa=p(,']>88AO+-<NKWYE:`n%SR/\;$\#u_J@%cE2XQR%Hoqm+Q'.-Y4D4q"n8,qK6*Cag1_GJQT%S/*i8dmCqS"#6't6F@"geb%7G^)\@Pfi84:kX$?.jM>m>C9%@beD$?UXS0f(PBY#7e2D%.QDE:!U'OI1[[VV(O.5.PKXu/E8g\Wp2i+K+eVpm9oX%sC_>oQD'M#$>U,?9lEZaSd$d*f//TWfZ4S[X_c"jW5pq_\.o4Vn*Z`am%2Mm<K4CobnnsE9EG6,R<@?npq/9#TH-"(W16D0n4k#B%:@OfI<)+:ui[cEl",_T,=D=K_%E&i<h1fV7WZ4o%)H_:ab;Zu38qFIpJ%&BB'-O^NF#W0nVYfPd=HRP)h+Z".i0L%!9_`paOch-'P(,1ZbEZ18])4pJ#Z;-<**P<N]F6WV:m$6tN*h(a@qQkec)Z[[JaD@Qg&%I0>c`mk%Li`1efeZUlm)*%2$igo=H:=rS8),]Ap')jdEg3T#7N42k(/0UGZFZM6',W4&L@5[R/d6Cr?*&<+\5;:9Y&BRm*hN5L]6%c*6!/1Ofb<KpiX$HM1H!`E[";LfBb="7n_r9iO_R%</s2/l*8?7%b$0L7KprWt9u[HkDOa;ke(]Jq/[1!9fM0[da'&jnYE7G^u#&%%pfiO!4TNS1FMC`Ol!\uN'aS'FZkml[2i9sXG92ciEENQRoei$hHH;e,Y^or[haN+E4%W?'=3+FXn`X<JO*eu@l.U'F\[s\2(b?E%P'b3ppc3BEK%2H@#Zc&_2-J;>b;l7PB8OYo<?0>Q6gC:$qRnSQ9FfHJSD8l2Q=4\64Dj4N>qQ.bEXm-g>*nf>D6"?1p)1MQn:r"\%XFPu3FdjlUbmVY3[gm%0OcbXIF2<j7,(A.clTcFF@%n[K@,Sp;A6$VH2J'hH*?S?8o(^\S"Um":T-Rlo>\%s9"0o>SaC+@\3p<p*%??@-]1JBSac5P2Kb[Q<9RWm>WU<fGA45E([H*Hi?g``Y4[NmhTfd7b68+;f%k\$2.i#Hid/\c"[Rghi-0A=?R;F)T:+ui4.XRCLB%U67#?q=,f+I7DV_3!INF(.ZY>'3V%`Nl]_[6W\770GWit#!sOPNLT4?e!T8g?oX#>NAgu-%'P)f:^JE&);M)?JWmDPe7:):pg[$R%K*5]'.!s76JA@f[JBE%JIJL5JKX34q5K9+*7T;hq,0[;aAeqkdOW5T'+P7e&^j03bQK5'h.Y9:Q*Ps?"-!'&?9Ns<qZQ^@o$:gkm%%g:l:6$K:CURjC^Q1@hcm"`-EMR2=K/5;@+aCM&5K-ZtTA>]4MB2LU7:$<(oJCkM,(Zm=@k(\V-OPV;X:k!Jkiq-'5n?Yuh4kqDN%YN.c2WNLhijK5L=c6Z]:Q*QD2pT`eNR>[(g^WR0sL;A<:HHK2KCg.5i<uG.=5`<lD%03!be5c.'0bFks/]iO>]Z=7)W@K4)d4?Dp%[s7>8ZM<p9p_KV1gYQ^"6\ok:2M!DDnY8tuG/CL\"(/)e&Z"Ps>eW&d2>%6H'9n9-OGr]BlSeN:\FL1kAs@u0;jlKCOZdkW^+daD%H]NGe@LDB!j;>*H+XV=Jjn^g#j=1QeU,$S!3=oUO!!09p/e`kI:0^0Sdf%[;7OK,uad*sI,.8UYh4n?)*,L_dS:\%Y/Rqg8Ua@77%AmuZGd,H%Si5q.>S;6%OM%f>n8Vn@f)UY#RhO?8T!!"O@a$j$pLYNb<WVG90)C[ucP`"E(KeeF?<Zh/J6a)Rc%E^e9RIEGn!pTn.%T;VUuLejX)V%G7bcEP+C`:+k+NkcM/m[MVFORE:[jKM"*m`mc)=K9`*SMJ09Mk;?HPq0_TYe6h"&RA,Y2YBs%aCL)J,c7fa#L)OK%&fsBFWf'3>=j2qOWgI,1A0'=lT*qsZ2Dh&V1A8u*XI:%ml-u;1X+98PWClaWLE%#GG_>N<o.u2Q)`s!PT7@M)gT!sI\a=N@7p[19%E;U>&n`#q);].<r,eI@o4R>HU9:'/m,lh^s%S]nh\Q)0'5s1=fo7b:si='8c!>J(g[#gjqj'#Bdl_.)FBeW,5VdPgk;&KOM<RDs]%+skZdNG:TkdjiXh]P0-Q$1_&H-CI1ojF`7)2h'2qQ;phs>&&^?2$&_O=&j-qA#*j2J/A>SddYc7pS<Tj^`ccDU\gf^0l[6W*$'\$%rTL=);O&aqYXoI.9Yc#;g#IFPc%&3R)pC@DWb''fjq63hEbJ7W;MR+IO$1&1aIs'&_RpDOL8^BV.am6+A>s98UtlCXQ\s<:`M%&.%dI<taKpNB?rqr(?KLe`A;Ao?oU,L0gE1T\m=$a^/FaU(=1[`O_g&1H'-'f@L>5sZq^ORX[/qkt3G/4kLHOZ8L?_]IcOpQ5\YE9Y2%$9,2;qDm<[75k[Eg#nY^T,9)3='W4](#_"[s".Dcm6pMdDSi50i?InbU+3o@3>_i"dia:?b2FY=%Mu5>pUMo['=;QmT>NL?]no_A%0Q!\o%u&j6Y`d_mAYY1XFOsb=Vto`f=Ru4gp5=<tgFbf-_M,mT8jEBK+:H?BK(]I?0,:3nX(Hm-JL/!1eY;S%:>ClJTchjLNLcJ"%e!RIQI*GW_.'ZAfO>.o_=U>a`Kio6pD:342P.R-P,im$Z">%n&f.U'iLLmgP.Ce.m9"AP<[RsHR_oJ__gd_Zj5cAKd'6fqsbQq?)%C?:[L9UYb:+alP.f^X.A0.=c=92ZTciS&$uVfF]Sc/>H5,%\k2:J&h)g?b[H%1WD8#$QG#P%Jn;7tWspNT=9`;a8E[aCBqcaGcjs%p#RPbg1<Io+hjm67nY9?cr&`tH9GiHI/!+>"jJAe@XB(;dn^e[n[7&.[$2"$!_O<852,9UYaf&-2IWR<gFZ7k[MO2O27>?;o$LAk%2LfXKY.n=eSAJ:5Y!9OGC>`BojiOKaQ_uG-X1]2`j%tqPl>*?bauQi6]W5$R(PEOqhSZ&6V\)YiW<fS7r^"VFSNoJHMu$2U3M8+T%r<5[oX)3X+L<X5t)j5o.%^AER9=J,MV%9-b[<fV87-"ICHg7BYgU>*mJG7m7>PZJ)>,'PKAET_J(;Zk)&<\M[`g')E4W/(:rGXs.%[UaSWL1P'):,C1`?Al;2J:N?D[[/4uFCX@J`A(f('IrC@I^8Q)oN03/ZA#g`$mXf>\oHXp15B0'e#AdT(Jdufb$%OjV0dR_AX0j+%MXnJu=IJ0?bW6M$.@3>C,tk`TLV\/CXp&6rWMmuL&JRQ49dSdY,5K&=kpoCoW?QSs9H/Bjadg414'@$ppXFm<GQr+:Pk)P"9C>K^%blfkb84RT%)P\?<@^`!=&t0Tk>NFB[[)Z5fq6a='l.Bn7XCm)p?:T&SIHRq:?GU0_VHi\8VYn_=UOZ&=(Ehh^p*1NG%3lJ(hPS+n%E)/<#!u%+B[c]2V/H`N<%;S$oW9MCZ@)tY6$q]m%,\-t^V9?`dR"849,Yn+XSA!1Ij?EGWa3Ln>[$$[49o5MFTQG'DQR1MtD4[hn%D'ILG01aS3+IA+@l/5Jh7M>kP=&[Jkb5DGQ%h"DVIGg,2HT?9;EjDFF`dqb"&Am(fj+*ta(iWp27GL]T1k^C(F\Hci-k)hbi!^r\%5U,(cC>@8m%LJB9'A2B,One7T#*WiHo5V?8aTd`a.VI_V+aP7GP"dKLl:+t'>)Pt6%a0&C((ql]&X8!MQ$Lgb-'69^SC.^G?c>/0%$4/;2-FmJBrD0D+Qm!&i;1`jfX=B>!B#/8IeN.U&jA(/sSY1i`S3<?4"Pf+Y+n!5<e55V,d<=_%,K]>6B?3=-H&jiKiEV!b6@pUb%//NU6atE)se6aS2Ins>aGcqC;FZi_Ae:W:[:]]4>.ic-_0f"^]+5nO(\OI9I1u63'"*d@m+4+dImt2&%W+?CJ%O!!_$kffK+1);a%6@-JI2RHo4PQM1V#P`U0ehd`e$@%_R4F`;6\Xs1'WIfp9q?X\5)3[m4!-\*j)1a%>_GK;Ud!Od:LHi#BeCNfn^1!;<m%Xh7Cr_9B%VI.5!>jVa#5c.^O!fhe2L@j1bQE]X%T%KM7Q(3C`\7b;q!XR(.KC=VJ@<V02nOlfn5]b$'JkW2^8"p?/M!ECfjQ&*=*C!/`a0uUM%"F\u!]gX-HcB]uFM'DEA>$8[dO"ZWf&Ue)!>_J/?m-!Zg1dq6mb#X'%\6B@e)%XLoT[`BTFu-RP/$_%@E1rB@JUPe+g%LJP,G\E0%nZq(Dd`a[d-P9L:e^[^ckE-jh\6OnT<Ioea>1GkR_#V2NW`H=*nL>g#k=d\_7k=Yk,=>W;lOH"@$1CmU?P2.I3!5b89*r!K&`L<m%\TUVG`Q(5O@8A[])CR2-"e2>t%[QEA+$a]F0&'ep`Rp`L*PMZgar3T!$8[<Jp$lSK@S<M-:*"fU5R6:B7q?)U"NM*>r/d#T#\OZ.%n`"5qO#iN$"i?Yj31PaT8^"C11CVV<e-j);ASM&:8IcUOH6?A6!(IC.;,W7Z$,@Tm#)LLGA\h@j.QVfN-3<_gZ8E+U&@+baM8K?;%.4`sGjoA'T@!m45Z?TOtEgWkIa:%;L/\NO#"XMQL,389#guqc<J:t#H\Dd3B1%Y#tJ93YQs5L_p"<[k2]>6!r+o>WF'Ro?h]u-Er%*'K-7rLSdtfLRD%TDcG+p4j7E(aJ"u(%[+8+o)!i`YO%2P.X[Q80m0_/`*+RT6l\m:hk7+,,'S.q?tZ<3.9^:,[:XqW0YEh8)@pX%[U;&0\P5t.g(20Up>Wd/%.(d593iikNd1[oI_].>=\Z[(5G\rN%gs]r*PNhpK-FHa5,!(`@r,m!,_[cs/eN,bQ'J?:Oi/.EI;Kg-%[rpfr-6e2nG&.@ZJ0NK/)aLE)4en'Oi!FoJZA=YD_au1>RNS5eNUUXn`_%0@ms"4;G8V.uJi"!aHm'a)#LmI4jrbMb;1q!BGS53&%Y$W^!:Wq*kj(*grg_t/finNOaf?#F-4IB)AU.*q1,)&Sldda0-4s)**cg)DQ[SmYE"&=>i:JoBuA=d$#:\,ED^d&OPCbqT=/81$1%$GR*9:+N'T$*WNRU.V`,APO/T^aMe:HR*$9r8,3gdK\E8`=r9KYlh]>.)d6'Oq<?6"jSq*dM1E5Lpmi-j`,NS>@91jA05]4J;_M7%K=W>IP4tT`VU:f0``Qsla;KttJ0;OPe.V`:HHPf8]?3CXHh(-"AcLY;q*'-(5Q@[tmZ`:<KF-1G1+g6*33o83*Nk,r(&T<CJH2fO%AF;1@?Zfr,X.TI-fGpRLP5l7[)@e;<cK'e72a`pfd4YE[3D-XZ#r&h4U8Yf8m_=pNb,:'_)OK8ZZ$=pfADH$b,-p0d+VC^^bVP9a%7>u51\mWEpCq[l"#984=aab;E%DH66E@RR^'MR*<K;3:h17eO/H+RSH8%iB=P/t'R%PWr7?CRaba9L)R;m?*YR'"Ggi?T8a"1A9U%,\DF6B9M<]j4)=B,3LSr*()t%%nC*QCKK=QZDI&*X]?d9e2bXRoH+^\/,5V7a(=EPrR>Q&+nE<mYa5=0TDeNapcnfXhuD:7(*mlu%YhcpKmh7CdAVgP<W'!#HVrmLm@E&l%86)U=J&H:4FG-9^19mAH(A;QR@5^n\:?9G,7]cZsWGdns:+;r:UXE(@b%U'PiYLI5s/C5p%MoqkA^ab6G0O8+><0]&V#%,2=lrF?6)`@g\:F1U$s)'VRHW/ToP("#>SZEqo_KsFW(lH)/]'6*38i@UMXKh=$+3@7nQJ.KBg.F7e%C/d'%9#Re4.R'aRI-ReD\#!tkPc-!&hJKeVe]mD`g-bBdK'qQhAjSrOl8Ii7oF+pCbVa+re#0_pZjH_H\3'\pdf^uEYg,]+0uXDf%r%:T[,?Zfb$_W"IVo#:,%b!rDD1m)r?HMct;pogBOL.8EC8Sud<V0Zs)EmM5C)RSE)),<da[dONi1eA20g&Oa:6I3U_Y6=pPO%Oa%1?p%"<.&]nF+@PcLUt#]lH-g])U-Tke$UTe_Lnd:SI"Uf<Q>N9P?nY[ZL<$:AGC](P@+JW1K\G!)(6-X@l[#XRGn600R^ij/MV9.%<<cS?&l@JN7Z`?[)t4E<#j=O>7W/^*r/e8qC`ILa1HNbq\LbZi`%0(W&fmlbA3l%5:"B5qO[(QW,BlM+?Ieb#l[n6<3,VsG$skFk%Efq`0*gK'6Oq/#(+_hflFl1j>DT$l3PXomT.Zi)$qdl#m_3Zo-raM7R'-=Sc[3KN;7(@s6JUl8@^Xp9m]_nDoK!WBG(FO)q/)JmD%p+6@s`0MP\_8BhA*W%=N\rEjc*d&)m<G$,E"X@,?S$m35p$+<!P)gG*0F,+b@+mtHR27\C(&4B;^a-fOs&`tDCUhOSi5`::#<Bn5%IJ_pW(0u'R3OFDR^'V(h159R@cJ<?\6Dl]%]ODUo;jQm60Xf4,:GN(PWNoVHFpo]a\4@jI,H:'@AN$Nj0[)Ep_-OVmD-I5r!Fp61%Pq37Zg*@Zp]&R0n8INuqUpDc.>g>ab(#oTFDJOT!@8b;>[@)`i)lq+/6,+&E>?c<DKQOsYmS(^c*G1\OE3Iorbt*$';Kf>gQ!!Wl%fgE_"U2uZ]'&81?W2Zkk^2`N]DQ_-@_bF>MPhtt+H-gL`h7W#kpXdP-[PN^2GB5UPZg;HFS-Uh,K?Gm*1i.TI[%n(APuFg-P+b>k%@,dcW\0HYC#cgJM/OP7`*%/uN.[(oc@P#,Rg=-Q?GT]G>-q7)\aNJ+^[V.`QIEPK(,MX!AB/\DBeg)#V(N?,JrT]e<KZ]P<(9Y9Y%1@2O0jep#RiY;Ku&7DCYNXOIt&,Er,Y0*XJ*^bA[?&.oA_Hn#^h#)ME>`ZsrWPKlmNa)(aFnpO=f!,\HJ[$ho@'JDU.Bl3iG>.?n%<W8?SE5!unqdkE<$m&IrlljW-XKit%g8[4=BK3=-Og:&?&=@<mOD);I\,aqmOO])(Z]s;WH2WWuFOl1#!5j-lamlWJ"lqpE:$WA2%"h5#_]/M9j;Ei:-reX&"85mnClJh8:7^)B@&pd&&$sr$92q%4,HSMSrcHiI_C>ZT$SuOe=h3TS"@.Ti,<fg<j"#?#Z>"s;?9dC#D%:/!j'G*pN9^BG:*C]d:Uo`DMel'I(!:-U3N2X0It7Vi1D;EE1b6WW]?O"<Rf-OA:]I>THniT@&X`YtN<k$M0S6gqFq[%K<>mTqr=%Sp(=2nGB=6XT8[<H3'VtT=8jDZ%'J8;N!T(C$5s"9pr!l,0u"ap3GpZ<&KM6H#(EtH-Ig)JJ8P:O.m=^%#c!UkEifo2FJk.J-=(S%era=JGW5ma`pHa1Po2-uhW%4MWWu8*21G;ECI0hn4!n+E"Vu'53L*U$1RC*aq^PnVM9!/pjYA-&Mg8`&i^3kD&`-<aoW2HSe_/Lf%fD5*r1=AZ\goF-N;`fG'N?$*n3]*$l^t:s.E*qGm>3sI@Lbm+%d(s@R-V7%^KcA"g$./I?!P.q:^=9ZRCg]fZ1q@//F=\;.7>!NN%5n0,t)d47]N[\D"0GsQH<m@M`oYt\H_;rI%O-Z97AlL$11>fcd@MRJP@"/.tHQTPYl`@=2l"I+Wi140c&p('BA_E/b["^4FWoIai%L6;[Ne_*m0"%ZS3RO?t4TI!"l9@S6r73`CC"^0'fkN[9K*nA>@XhAWj<2Zg>)Q')l;FH[#Hu+M)X;!7r@[%uG)7,so.pb>;0*uR;%=:3LEM5$'iN%>[U2p,.o'nU%O5QTf9K*uR\6DTe[MrSSpGlc()&,83_3RqiS6?t&u#QQRVS2jpK4*I*pM5;V64LJ06JHsmK6;=^O%_R96nj^gMT:VhsC#U+-WSX$<e]B7oC0u>93B1kk5PU#YkeB._o7%G/hGi(:2>b7)k',)\++IS6_9jic-B0;scbdD@hKUA7HE\EcO%6FNc]$rclZ.YoWCG"&X7W/)*--KudPYid)+lC=aiOWZ7$#uQlu*YV'46]q`=Ce?s=FP/*cIA&B:L*=ed.>"$RhD7LqfH?8tOFpHm%@"cjA1Z!uqF*6'He/*4]W+@'>n*[0,@o5_!O1_^j7/_EB$&+[Wcn$.>ZQI/n+Lr'<nn?Lke`FEB9UuFU&rU_VXjaY@BuOA6m2-(!%aP=^2W$]?1YPe\V8i[fja`U5nYBF-V!^goXnp!MMB:GT[;JW2h1pi(TZU<^b`,0kC@MX]C4jTAs%l[p2\5\ESCQn^&>FRTWoHY#(%j%D&P^\=#TIM"\2Ap[)B)"mf5i8Lls@g53i,H)67<cmu)f7$H(<l%T]!@eW<>C,03SBV+`>0R8]!d+JR(A6;"3bS_a>GM^0W^^nq%n$*?XF#DMckH)C<29p>q&GFCIS=,*<#tp7_QOeP+kJMG8,0"Q55s"%-s).$a4OY$JO/mM*1mN>?RHe:u>E*#F/-S$,W7Ea8#a2Jf%e*gZfC2f=l$o]'b5QGV'I4f4+U^f\iK2^3lYg*Ujr&%KiU#BtK;Zn_Wa?q!A?;qV@'<,@f[fB2:CCDbCBc/WMkTWSYL),ThK2r=!%op"ETg+c;'iCR.n(Eil\cZGIEVKob/oaB[oSC8?4EVonb6-8W-_$hn^VQ-)(P/1.SLN_-jG&M]F@PiIIFT%Yi:EDf8/#fPlpWWSW%QO&LT+DcoafgY!c_<O$@3Me!_Fg0Wmde[IWs75Hu?.KLQ#)\.h##8ut>d1$d!)/I#]i!%V%YtSDa/F,>5Sp;Bi$aK9[@-C@*6F)H%b\EO#TK.Y42iD@`VH%r]`ZrnLeK5Y'hNfi$`eZs2+L="Y$B)AhLD(U%GN>OoXKV&3/u7,3p=#5%QX:FlSZ3MY*-5D-i*JK4De9/q%QqZ'$\%=E\+Cg-+[6&o+3jO::To#adFa+q8jYkf&!Z@]uZ1C&u:e"AU'JC1lZB>4OiC;Z9A?7*!3%mB2OO,/Pm$^^?+fRgJ&-tDV%\+"a62-#/l!s'GgV&H<keTJ6H'\BUXk1,TJ6Y%enD7rm;Z)Ud@FhfYj&R`<Gb<kYkTOo56XGS-kfe$4.Zd10fP(eB$ef_k[h3mh/%#TLk@4u5V-klHH\SD@Hf^Wm_sLd$`8)R9W7bg+"$]:hIY6?Ws`#3Hb-;4B!;djU$\<=<:_c3A4d;JA&N4qpnEX=F',e.!X2HlPAK%Or1E_>C!qj"U9GJZ[sc>am*nsr.4qroC'[C?G>V%?,aQLHA<mO,V2[t,+r6.42@WlbG;?W)<#Sf+L@DGDk\SK(WAIie1QbejF)nJ%VJ/,s=Qiq4Pr)=nA]s.EEBKr'84#ui8`:'d3L^:eL;nh%j0g/K@#>@<n0a5U,?iG2gtH@C+ZLa24RULnM;!XT6,7Q4]<Is=(qA2_%0*`873?Jg'6o:n$iGV:_,!c[27T%th6Gqfh>g36C*`iji_al_=@gYM/5nX!ngIt,J2B5=9!INq8C+uGd%0Zf6`"!E,88&H<q\5V;%EeIA`&uV81Ub;V`r4Xr;_C8$(/1mco1ONk8fr"f%"9.^?EL8%L(WaL)1ML(QUnLe*?t6`0angS06jM<F*1V-g(Rhu:i'f)#d7Jqh%j]!"p+^mB&*c#Ai5VeGh)DsQ.aE8ffW51+)Qj-mUh<J,mTR(+N(;D\*husPQ`PT9UO/!=1PML.01>R'hH"3>8>i&HLOee&k'"R'i%`c\XW!DJfkJ#'HA>=mf%n%'6]+B&m(0bBVqoh*Xi?$0&FS,s$6U7cD>Y"`":5sTS8=rpjG05_4*_=X@KkdWh,?NI:Q:>i8p?C[2f%?/m+V0bI&2,r)no'nE''$l/OFOT&IE<KFL@jYndl!r#^Ce4Y0qM#u=H$5bQX>;`d.a\#7*._R]Xo!gin,F8fN+=i:kAUuIK)9I[A%_b#3K"^1f)k'YO%XP>F'*Ffao>qZ7SR82H&2'H36`HZ-"3M@C0`N9Q7".XFn>Cc4!r_Ns5JMtiP0;'A.=&(X&'2sjHa(CK)Zf51^%:roY@m%5"<ZWLuIq`[fPeePP,[e+A+gbo5t&,.A9[k`qf>u?MXT!q^IBX$8/mRu1lMh9q+?.I$?@.H0JlXgJ\5*Ud1la0Te5fFs^%CEo[_-d.Fa>J*mSV`0Qq;R)pti;Qh.CQ>2K."m]4VQB]+R3nKEQB5qL?ci6"kN^;S5r7(7IW:Ht&r<3Kf,4_E?-M_fN'q9r1JiuR%p`M"OmP/l'cu+-,]-phK/L(aQaGkQk`R=XI"O*:0^;n07*41@?WQN]Q-o[(0U+lXU5j9R""hbJK7_.o19i!#L202D!B-R13,m+rV%'Ao<2_H\W@S[='s.OTXubt9d0.kgnX48G2B:_A[L1(78_L?6^"[unC\o,a5+nrUbMeAuu74L)>HAfNQ<<\_V+D")*F7uI1%XKq[R%c3RZe`!HK&!bZdgBR5J#J1T[K-Y8k&=?XU;0X05IAHR7/X.'lWC[bCU:Tb[(JRrSm9ree`Nli6eXb7#C7Vf1X.Z#<T=XUc;hO'0M%ao]2h\b=0Def>K<XPu:(',=B@JS`Rnc6^g0cT;/&eAf8J(oPt&H6+U]re#WMSI13jD>I`22re?H\>\Y!TcM*u+Z--`SmqC3d601F%;A4,J3Bb1+do2Sroo^O=[gQ^l3K%pMVqHmcc<8I"V"h7ZS?P=p'mFS^#J+bnXq?4ZZ7=G\'^LV@H%d.I`?7lip*<-J(V1USIq%20%>6D*0KNWNi*(k6fD+d[SP`(P-80b.$[tJI:kHu1\P$jLsQIa:k`tiSdP")+7*_?2mK*)lsB5nPP23B'k]h@I+[diXQ;IKiJf+QV=%=n65F'rfQP^s*JZ0J$k'"WEa=02>l-%`gRo8@IW=$4#]l&0V%TnB[A_0:+f0JJ^JDSEk@&R*uFP]Kc#Sp%Yo=aQHZYpsgP0aF-tA%;s+`<!/^WK&Zu`nG`QemjKE%!:kJ"fW*g88@"']tQagE5HEok+*cYlJk_14TJq;?X!\L7bD#33M"Q!Jo-57r&Qq$Zh;k[ru(QkYQ%c[kV<U01m,Jre(ID:GiJ!QH?/SQi*+^U`4mD";B;\0DUS0cuH(?(1UNb8\BrLRI]B/;k%l?m:=3#q2sVq*.IMLfJ,PRAt?<p5Oe0%n@RbHMUh#VO2`$,lDMIWk=)\Xf(P$R&d`dP-@pKUY7\sp6kQE<)gU^H&jl<]WGEfdHMojb-)IPo6TN^d,s3&\!-+sKrG%a2'j4S3%S(B)&]b-n^jM6$oQIXYHHm#IL//d\<eH/N!X5=%9`n:Ro&2U^sE\-Os4pP1QgZQ64IFGA+D$M1Uks@TmAm6DS"@&Uc%+#!Gpkfou%kVMW.g;,M`9kK[0M3+NK%qfRub-k^B]Z.6t8i/_-Z*ZS!.S@18_N`Cl6(12e`#^>]QH:9Z!-jC3Kt&&NNUCel$9"f'?,]B`H1Qku%Zr&rlE3g<l]q6cd,;#tNIS.PLc1@$:d?8"",XUREm?39#Pu+-F%=H5@_N62[%>Vg/$YlN<g,oQ'p)&?!!A@C:BYdhRXQts^o<S]$%QS=$l$rAUWS0pt?`L#YDU&UhMAt]b4+%(jCYjmTM1bDk@GTn&c(01%,ci&(1Eqm/kB/k'q)3:L?^;k`+MCY/k-]KbkBNOAslZ4IJ%h1OjMB+p6G-Epa<#C)%nK2]f'.&;/DNnJ9-OI=E1iE%85_fUM]G$,i$Te@74Nl*7V;O#D,TRj,'Scan2SU+RYUsPZ8G<>bY>Sh*=%*KWO18iJUj0S6`4*3t1BibUrGX`X$&d^Z_`lWA7@:MKj'VFAQ4-tocJOrk6tfQYC.N.'XB-XN6ea_:r"cZV<sr3&?DDPKmC=h;2@%@4BU_QLq&A+&\0aAmiRufWeqCYr*$Ka?AZlS?fnl=,]hal_uM\]I=1%W!3MGTWGaMKDc3's$\7;;6eHA9S/$NZQe)gccLmS6r9>A%S@Xt3h%B<FHkYaQe975a=-X0U,g^3-M-m-F5^^sd>*8L-ONh!!2]3Kj)ApgW=Xo<j?bsK?aM(lCnH2?XbmPc<pBhd?IU>]*,T"aV%djT's:"BbAnfF2dnPj,)-7a0).I$EaUPKrA,,.7`P#(3o.Q:e(+'K#_Mj7E1ah>bo/`r9&a;4p?a[35iX8Uh+3fN.B=07V)SEXW!%9E1:I9E.5+Nm'LL?M#P%ca6gY'RYh#+VeQ0,$nS*H.LdP$<_:J/<M46i)K,Eog/i07AI.[`_(!EV%p3Y.G/_*b\"Ol,gWohXm&2_%5lSHD9p,m@$O_%hE"+^%-5""P^6%e&UlpS>&sO8D+\^'gPkY)sW`g]>StRA:!6miaSV-@;a&h4`O<ZR=Z6mn_hP-KJ/-+mI^6c/@%<(u+^Q;nudQ(;l0Tu:D4.^VV#+1+t/LPnbdE`#,n9grc`Q]WTF[Lu3?8Ut06>O&#KZA*H93JLOqo^KediX,95?([SqiK]s&.kdd)%@5K"#btfTIQrZ3B\8E`/;f<7MS.^iB0Y\l[)cPOl2u0gZC'<c\T3=s\@cKmB-o4(I2VBSCDeA?7-XV%#0J9"A4u-$4_@-:&S0_1s%$AqYpU]b(:6r\GA`1RXQ[SD+j;]T_tDgkGE"Gnne`;RJ;\Vsgp]dB!WS"0jC-q]'TJ4#_]=%p\Jg@>uglIi32_37#Q!@)*e=brH(%2f/1)K$`i5TT9/Z@Y1IROTLsB3+<1`+dmY-\dnc.;!g$VQC.Vcp,rX#F+Gjhr5o3T`_Cd7X:=N/i>Ee!IA,8f>)>2nd;Yr!;;ka:%Fir"B.:Xi<Sgf8S\MiOd0bfOYBK&K,-C&sS7`HQ5:"N<C%nJ-.RNt;6r3P1S3pBUPng_'-0"253:-l[YQ?:`ClC<XZ5ku*)7+WdL%jQY?>^/T!B.V*YVG']:/]iLUb;'R[WC8/\#.i:qBT2i3c+sfpSC$a!+\c6W7ZuN_SbV*EZ1=F',Iq-81P&>?=cnYKojsVNMcHh"1%2DVBRA.%D8]3l!pK[h[R5mUo*"=OCHR<uio0.a0ZVYD1N;(L4uAl\/!Tn[Pn<;(&2/.cG.pmaU;r_M=[]]X5g'D+^s=K%Kj`S_>[%&jI@MR2"Q\=`C>Irar*%Gce<p(lPF'n^l30lG6iD?R$Fm[k`5o,fmJW&;%mD468Fu59L9j%7WK9;1OFt^g5<7fQe>c]r+u\YQVq;%M]3IT9UM</nfK-5_pK"PemT*/"]aXlL`0_.:bdqi(k6O^<1=&Zh;D8;[-9KnPm?"j6o>p3;egj2)'GU\"h.i:*P3^m"?hldI[")H%V3IA^[Uohho$)d+Vf`5qQjdSQDanb@Nji/J"F=?QdN78#6rQ4K<E/O(7^E:&@!is(+7ZmKZ7/nrMe(.m4GP"E`QemKe`=Y]]epGU%"'NUsA"`>l[1K^k^8@6&&c4>.LfDX$b=hZ!/&Psh+Vs@LW]Sk#5++G!*u0"k.16DV`]1a-g-6f_TLBEGrn`.AP=tIRc6=+18N4Gl%#(.KEQ"?caN3iLnWe:^.+UnZ."al&B52=o:D?VS"W_Opmq$Kj"DRDQ+`4?eAS.[1K/4$Q0f3%?d9.++iX=-,!mX>l*$]"5jc\Q>S%bIBoRR`H^j72EOL)DnR-7"Is3il@%sT)?Y/)!%R;T<+%59O\%R+bE,4EV*co6lr>`rqnc/@"?Q@!Cu@%)O[^pNkXYpZ`^)B+o5=U%q*U1mg>Y(p"@]UQm1MLQl4.6]`#,+X$iT+qX)K5T43V"s\XYiO'>fZc/"mD^W3Nql-sacsQe>j"YQ*$'T'f,TRIfEXGuI178-JC^%(j-SfV&g]2*Z*WSM%7%ASTa2kK#n42oeTRq,HXm0,Kl-jMLqNPh)KQlIrGBi`0BqA_&Fu/3`b@I@OE^="jaV*IB^B#A+G\@H_r/g%h92P<OHZD<jlb`N#j\Hr/+#h444I;GQ5`4c"=lZuOUU$)@^UtkU\&8@RT?JV`F<G\!KsOe(-uZ+)fugqV;GU%ITZI^Iqr,MA8lsm%$^$JO'HZ3$e,Hf0@agFo-sk8hLlr)+@ce`t;I+uDM5qTm:l1ceK8GEB$r8Uhksc\n7ogiM"[lsa?liIH1>ck@\K;T!Mj9qLD/o5n%0i*o"W0ZRFq/"&C6q&f+3QZE95auu_HU;?Yj[HY[5t@\;67d`$iktm&He%H.opdm?S,hUW,KgT6#_I-*BRqpqQdNf9`U^q!`]lq=%p,4NGcQq``2%e?GQ#%Y^nKL@&>#Gd>cD0Hg*CM_l;SGZIA)qaM"9$i=5_PHgTZ/ToPt@peZPa3cl0=8L8Ei1+(:,pj.LTbqGI`j?%AjuB\UKj,I4tk;;KAr+9/;@#39(<Zi2JLY%Vl\m_-!"(cZK`\mje^F'8p;miF15_1Um8lW7;<!;3E_ca+`oO<L/Z=L<j@E.&jcRO%_\A2C)E3?i4^$\R3lcer9$FCoDSiGL3rkV:-*0poPjXV4^TOord:Pt5neHQHE&K9Kd^1di-R3[=V*REt#o64P=eSl9AjE)&:sZ'P%G>Hn%mLeu<F]as]S!fD$n`/SGDK\0/X^%&^kRpp$VmJ%]Oc5XF59(eubnA;Kj<G!DMEFTs:k`.O=1qNc.<G\sH@7=]-jp\aJIQ95%(?LfJ*Bc`$Z^jnUO,l)?9/03e_(p[lW,4hmN$dh/01^<'*0DKBZd+.uf_Jk..0(mDn<`=gY@bKb+$2!Ihds_".%!t^G*.:*\PCef%6JQbbd1VtQZus0Q,(Ue!UOsL!j*aS?JnFC5O9#LhJ8r;^!t1LM)nK<11/d^Mj'H);d_'AKXQ,.kK.2>(<n;SN:<Jc3#Z%sj!ZIDs%_Gh?KRc&[lH=&JW2+lK0X0KmdZXMcKTAb<^gV>'Mdh2m<"OBG"X+qks0;5M.&8">3OY-F2A&XGYik-PgfN=bL653;)@O;oc<X6GJ%.[]HY*_nI?5?pR5YLdC;W'Tpdk_'K_MGeXe(#^IZ,/b"$Nc`>lSBX8MD"tu;G2->hR@VQ%rnSGSQFBHKRoN4h;#@t[P;_ttZ+#>Y%ah>`p7D19>]p/sunC\b5l9s?&94o]iTa&q7&@q)#+-Q[T21>^=IRm@pK&d1@M?95KCOJ9jeF(6o,A6`D]bB8=%:r]p$'WUJFV.a*%:3@ob&gC#6+GSr%Krr]X5A&JJ^"=!fEn%F=+6:'<[oM@t$-(*lgBp?.a5Nj4kr*_S@dn9?Ecn0DHs'2D&Cqln;V;qqVSQjEb7P96%$de!g;/$X^FKpFc>((of&:)"b(I)#=gdlN='_nGT38",sZ/r>f6Mr-Q*KDWCT;ZWJ<a^KY?ho!4?+oWSNL@[).3.O2;%;mAeH1LT%+`YG$E[lpYhcB^:FJu;!FgZ29R=6Y*->^Tq>ebY."K"\&EQ49p[:[MCAoeZ46p@Uj\@]LcqmuLtEjWaXH9VVlW2<.Oor`a7Re@\d%&-i"pRp`f7]tT!2SY'm_m4XVoEFjMMdsaA'JA,7+Ed9Y;p=#"KGL;A3N$ut!Ir;^^DV#Q%bJ.\RjE3WVWNZ'V.7&<oIuI%].Au(2%6+2dq&:<==MjJl;pQ8bOW6(]Lf`sY?.CMn5aN(C_pb14?Rp=3YBp9qEc^M<:h,YLhrFT:00A?tXZ.O6Ve[DZX].G@==iPNPS+u*I%PKhQ_MtG5_aj]kd,d:5?QGeP'&XhdKfb%(/S(CP8.l*d7Id;YfcjXMjIsfh&o,R9fARcdZ3K?AbP-R)AN'?_8lJ[IkWcYWhR%GI5%#q:kZELI=3la#fYDaBaQipWek<0KRfI-9o`ZM_YYI^Eql6Ik]4A(%4GfOKh@Rr<`<*nB4`i8F:GZ?4]8-GPij+_4W8oooX&+0mec%Y7&AS)d!tTJ>cKS[WJGY1Dg!;rsBWGffEB=d=aU:Wb##\0X@B%nWE.e\l!.u)ZD,@jtTCt<oeEf2k-gFYH,Y'j7m?;A"mm4kbnaJ%mtq1Vn3c#H.+?a^:>hIOjcX!h-H1UQ/-sg%C@M>UDhMh&\E-fll3P1'-Rm8siud60g2OPr!%$NO/=SucHBVI2^^s@s<;h!$.%B"j%X8_[21Z.>@4C#QfE;MF,>-/=@>sU`J2IVgk=$-7^IoU+[]%\6cqk$R2mYkq@3VVp/Iu=1p`B4umX6%fP#MEbX.KL@'LY?SsMW/KZ%bGj5rn.n7Es&U7f"V.pFWr$kDD%Nfg9dkLjEMj#:Qm.(!4dUH("tAP9m/ATc:kVk]?0+a\.H&uZYf]!r[p=n.A63o`@`+Ls&FIPj%F[`eH9_`U78%4[h+_s6AoXF/71X.8[D%`1']ItM!csgiGP+;4alri],C#;dL!_1PkS6KCp\!GVWEtXh^d4uQsTR4e4r)?n3:K&18%f,KnNnYpt(maAO0kHn?HN0f*9PV1SS::.i<dGXB:EB=gCGYk#RW!q`%i$T1a!_OUW^?CDWIt,#2p3Q^MK^/AZeE(63H;n66Du'BH%gY.#m;'lZ2h9i.MaF"gCeK0;Q*6O/Kf"DlXVoIJ7m#bZYi[aUY2-Abf_r[!b^Y/rG>%)3L<ji#^gs.Xsr\t4LO&S;a28M6l/6f,s%M:,Oo`.;f4:'%IU;H5.DhVJ\Q^pu[(0SIs4c&PKPHCCuU5'34^>#GdF3&c5lC.NccBE9T(F$8iaBh,k#0u>A+^_<CmB(2Fs"BX8H%U\#LcOT8)<k+cbiIF1UL<Y-9)/?=Ft9SXIMM%+4iP4EQ;N2CI_88NKB[VC(YD<.u:cVs0^^0HZWnu%GP5Ak*0?>Lcb\iuZiS)ZqQ%3$3sH4.qg2q9(-oMO*Fj"!k99N^7\g8T"T3Rh;3u7-[tY\Ui"]R1apqg-OkOh"@09QjV8YT/P=AhRB1MOaTWC>jE`$K-3&;rIi6P%VWa\F.&@s#^=QO3)$rYmZ`cV``@Tn_kZb`=T+Ej18D1hkYB9:S1!0]l,HH!JRtRI0S=X@t6A;CRj'4rPl0<8dWgtB@U-(YECa1W$%A7kA8DJ'j4O-:..>2Gd_s7M0-?]d."WJ,Q,%8Effrq]6Erq8G7koN2[3d#WV>+h[RV@Y)Na8C"c9j78`8\01#!5RDm,BMQG&m+q,%O!mQEH"JG>XU(lfGl67.[Rj*/Qt40c#DR[L8P<bgQ7=n1@"\cY>.*oDKRJ*QR]UZ?P-h3+"f%VB_WZ6IVhGh/[b=Nh5X>%3_4o`N%nl=8Q*KE;gRQX?S)1.`$I2kmj!g5M\+_uTKmKYBWoaEAa]$6.<\&%4;@IP(r@kuPAoDYrCFZ4crbQi4c8>2duWQ/_6-fImCoV1"N%`&<'JJ/l&-Q'Zoj1T4pp<OWV8ge$3*/8d4$9Q]>ZV5:L!2":m&QRm\(b,;W]='hchr6>,q"&_W$(i)l[!>V2S6L-"?;t,eTaQ2$b%N9.0KkM?4enZnM<4qi+(K;8Z,n(R3<i4Y`%/tpe1\GRf9C_u8:5>>eP?/OU\"g2ZP"DkWM*c^mdCS_G:EM2*+24cRrjnI3"@(lNA%*8sr4.SP)bCoV8Lq>eGCc\'lH,#b^ICTQggjb8Q>!HkdTq>0+:8-n<Yfs2*6S5*#;AQ^W0/1SLXlZ(1&`@m9fAo1Zm=9-c"atEV%%Pn'7H:.cm:jl30i6ThIJ0mF*a:rW$$b\)SACHO,R;0-t4Pa/2MS=#0T_<d7O=gER!?B6UWT!%=35F5jliSn5?#u2k31rTq3L58j?%Na*,QZtpHd!<OZ_Rhf)gE,MQR?+7FP059-P?pu6gW6T;qpBH>$,M,Dif\>DB<.Ed42nf6Y]S?:"?[l<"SA,P,6kQ[Mo2?qBHU_-3%]!";Q1qBOeTWa_6DR8N<-E`5F`!IqoU(GP[*O;BSiOZH8oiGg`3[JHH2WDj@2`bc+iosO)T,(1`7Z68\PIsfbp$4-Y7D;;:YD/7;%`O'nkT+@BYX0Z!NJ\;#MOn3`U4Jeo9f@3Qrp.aP74a/mO1YQ7=RJ.e8W/B\kA$kfY'qD8?7O1Ld$+mJ"ANhhbNubBIk86Vt/t:hh%6];_P]Pg^Nb@5TarT:AtUe3/!^?nE9G/PjSek'"8Aplo>^I@:`Q8[=9o^g*KRH*40U&`Lp#gu_'lnf%83%h\87KV^qM4,'s`j_p8%RWoh:bgWD2k&nFkI:a8P4,@?LBhCaNbFo-o'PCm/<<I>5XX8<;Ke5.<4ofLh*S2tV6D,HQo!`0g@1k"$@sOU'Q`1]e"(?X67`Ylg%nEbpM8g"H1Mg_WWKp?Oe$ac-8Nd[=@N0Wu;A(^6=(X6f=!'*s=LVbfTX^V#@,Rlkoau--m'\<u.mH"s6oLaGXX6N\-c;Is,C8`8*%c&l0hL':2m%E:A08*nk0?/'hV;pcPRMUR"Fp^t>(\\GAk$-uP.08%:CK?L3\`+q9.km:%L]L_*"P*/o_LirVTWoG6MU7>.I*crXT%7ttmu_!(>Q-Nu5R,^cK2DEQb$mIaHLp#PF=`TZB!p2cE"ZGh:qQV23A^DqH^@qfdbFhn16=+l3])i4Qi/F5rGA9"<_*J2Q3$$%n*%8>p\n6gckDTB'hF=7de=67n)0AT<E@M\rh!Ks=H@?Fo;@6^d$%=VDM6kf8,t=gf?U,s:R7Jksq_!'A?mjs6LhY2gLVl,n:Yp)]6_%2)?RK9n6EDjVIP^nDn!h1+Zqh$6!&$o;4m@W`9mR6"VW@D/&OA2B&eo;X#)&<8)!q'<,?_c/nHr%clPL+4CX.@G"RgcXF>eTpr-S%md(7DXL\59.irmS21Qb[HC#7.^TJNAQkT&Y$3/;C#'un\3DkCYNR!i-@6:6P-M*<]fhdC./83RJ@l<OoZ`p^G2q^[_cF:NZSnFkW%'B&,_o.>W&DP@LkOZOoD>^'-hZ"=s<iS'dsNCB5PghWeq9p`Y>1O@3e5?,GaUJ!H+BKe(7_DU"'\TOIUGLt;ko+5'nmR8\2fSWbi%)UY?Ldc%CdcJ\8+Rqf[L9DfH10M`qC9hSAr[QrSQBm$N+#a?^$'a[bYiWg,Rdn2l,+UP^"Jfmq8Noka*d($mJ(%).Ll\N4PWk"9Q%3ARNHX%/?L\`))Z$ZF5-T>b8&'o%e(f7@"1`Uc\kodcX&P!nk>_*<O,+:Ae/71>iCjU?mkDLXppO6O\m]"-D>(?"$AfFg#jPP2@,%l5_]Bn>:6W73sAGIcc46Y7'?3/T%i,IQ]<q7)!)WP.:+>]khhn5VMN]3/ZG2,2rd9PX+DCc4E6oNu*2\4OCLeI]m*q_]gX$)Reg3%Ob@R.`<2Hb,mpp;Sid/;I^sa<h2SG[rca#;TKlE4W/Zm.DVt=gYf%W?d,+C<@tLOO\"WuGP=Z&Y$j%MpdgE6/C'`@(!Urkh>Q"om%a24K%#Bb0Q**^L+`E;bk#h&dn?"7:0YH(I]b9S-D4YM+M9e$19:#ApXYjF/RY/.1h6bAtMQ`?[<`OSni$f3L/(*44IG-m-I?ECXV%*#:l^/]T.4XL@HcMeDDED0)_Ri]^hI(_!$f_6q:]lE)D`#"sT#NpS=NX#(40XsJ4k*EinR'!#qDN.RnXFmdQg%-WWs\h5I<217F\%R.KQ4<]i7+k/?%tSP](Canm.l4uK_G3.kFIQ%gu8+BkO<Bpe;1CLp!HI:M6m?/[fc.F\gH&o_2@:s=jp,\,KCO95En%k#ZSp6<tn%XY6$]%boN^m_>3M)I?XWDHR-CPG"\3jN>e7T>ub)WiUhAZ6RU-$BSn8.hoJ-%G*uSELp;1HD&Vs3aqPP;=](`I?m)E.!Z]VO#U4E%D8Dfd?gIA//`FP*Fm_:10Nd.oeQQaD]T0s'WI2m1Y4TqAB@_49Z"-Fm56D(K8uYojB<oBZ?r$$29U0_/WD(ge98"`MnZqjciF@rS%SaX&<[2k#u,'k;=NAY(n!osOI*4h$lReP-P<?o4*2s72r>F(['g\ONo:f#c:-V*@$HTPktCABYe2<>/9;2i&kGl6VX\j%f;SgpqI%V!r@+\s:LJ&!Q7r(R*&+O9OaX>_X(HO(4r4:3q>)mG;2FIR`^O/,LMi$Sm.`b.,*kGa$d`M[g<K_H^mtl%m8+b9-4/eVBc6>=Yl*%2JfRc?:Qb&]+)^5a2dSrh+#K\jm4Ft?c>W`%@<u10;l[QSdPZlEa9H>L(r:O!S3-1A":V_M8t#bOtLf9fO(6-5k2C)DEF1?dpqfj%i0l*>X@Z]BXdo-3h/PEk))$4&g%+OZ4]^9@!@cEA>W'1p:A;o'6Y`pXmDtpG:G@ZW*T91[i28n6C0]pe'bI%&F*h(EEO[OD!gC)s%PC0<blRqLmA;THh@c*MhoGG3[P7<)hGA=k>ApkR4gq9'ehnte+E>$9Bo@W\fe+-ps's60^X)s<MJ>9ll>]iX%4pt?>JXXQ(],'C9%X.-]Z*cLrAFe<*o5S63eU-!F[fEA;=4;bnYYWSqZAAp3#:I0Ito=+U*,'rW"Qsl=OV=qUk"%=eV;naCZ$I&:[XRVj3Q0#dg#h+,Y%En[1d>f/"02qr9]bJuMBf<7r9A>1G:&8AOM_2dcaa#?hNVq'&>:YLB-lA.hm8N1_L'=U^WgJC`^:S,T./TrCjq:';4[pM?!qtA$R%nJ23])dpM2_?jFGp.Wm,jeAp`B$1bk\FqkqO4:79F%U`Z8%l>UfmR&EShCM\=7isH<l=QMeBAj.O1-]t/OP?o/V<BDdp`&L\Jalj%Hr9uL60kF-oZloq2<hRXO,L<Ij*EG5].!o@W25cXpLE[X66f?JKt#WR+XC6I*h!'X4hEWYWl]\]bI.0j+!JWOQZQaqnMQ8#+B[a'%*NB[J<hG6f0qu$oM@i3N<pQ0@Im]Wd"+tF^Cl0i?eA7"Rj\Oa!^>VcC'-V\CbSP%MWeR>ZT?=+&H<Y-+>9]ZC,C7Kn#sQn5V<Z!K%0rp6a]cOmJ)AWq(f6lR7"0]/?&_t(<nAZ4neD]NZiDf48`sdn4;*"3*l17]57i6_n%l4q-_&tZ7?%$+$;X*"d+&F"jTj!:SWfZ0%%DL7n+>*b;%a#&UI]uJ]\OSQ8sD`0V>iiNQW,#gP8#f1Pjb;9Fe8UbH?gDWi;I)+nUQ[k:P)+MW\D`0c:WaUKkqpk=b2i=R"BtQ4&%&j/H""Qk="/tl;P]=plHR#L`lg)RXG!MLQ5Am&[:o?d.f.V]@,qdbtj4\A0Wc6Q$_W/f@:eC,CD"H-T6*E70%=K/.JD`C]i=4#PF%V%m[Qm76,odV^hfRsV0P7UQXh,EB2i1L9C*(^&XR3aC1XHp2)7+KqEUZE-0WM+Zh%rKR*^TnB0WE^5PTijcVHGSMOUFp@A<KF=.F%>")IPjB_V[49u+@WK3Xk'Es#B4,Q[k!!TFg6MZ:Ya=pFBd*%CRfp'a%MT1qdeMsttfk**557_Xo^iSV-P8XY<`Q;ZQl[f.K3,/GY%#o*nY1.1u?Kq9ch8";pg[/Ft7.%*`LM4]o<64%FVQ7YR)-$=W(!!jp6RMj$P*)5RMY%7N7(p$6C6kg8S:@C)"#ltq9cEsC+Lpg-]%rSd]g`55i5Vq5W*@Op;rigd3W?G6,K%Q=@.5&4$og=9Zd+gA!u`*H`e-7Yh$,F!6W#-)jYbZqnL6i*]0mA8m#MV0MgL<n+f&'*Vc%Ys"VTACJ3@r@MV,MkDf/<ubX_&Q#Mu!<*]E\384(QL0?scF.28g;Fe:]7S\\V=XA9>R<-GYF#-e>=S9sLY:Ycjnh.<b(>on.N*F)%A77/pa`W7jY"Ef\>*\%Y+Z5k^''6&Yd04(/do$P\nk7[6oshps^0*OR6>$Ik.c[W6GDI"='ejOWR5_pJFf9@$N&g]2S8Qk#p\qZ;%<;Cn)?uRnK$M>':59(cMnu%";B.RK-Y]E3I.D*PL#._o7Vo:LqKBMO"47MeK]IMZ)C0aIElmtK24;"%__94;LBD$Goa_G/E[6jW?%C*k+Kgfh/HZaL-mE--\eNBfXJ42rsND-gLj).F4a9M/5B0A4<.!m,M3cCG7)9KIOn$JZK/fpI?r&P4RVE9bPCaBr72P[2"O(OrQt%.g<aaN)6`"Bi?h3+XEU1W".Ad/L%$&CG&iF8VAjb@N1$*WjG\>[lSY"&B`t.Dln>Dfjr,K1Q-DfOAQ)3;u(%UZ$p70?1]\f_;i[+%m5&s!\Kmi-c4PNEoh`DJLH<_NEuIk#JMgH.;n'_GCTCHLH[iG+=aj+,rCS2>>H36I-2Xm>.d$!d`./,Z!m6>5pHa6sCQrNL4K&Hf%hF3#JiK\%cCX"m($>76GlkiIMJm9l!6f*<ol'&*hYZ6=DJDP?UD*ahF>`WdKYc5ILinHQT_jIQtA6q<bb"k\m$=<;hG]H\sj#joI%07"Y=o"g_7Fp(MtPd4A6W#u1SJAATn=2*=me_b[+qp_j\7)j\%?U!mn,#Pb=I_G;ST4@!MP;2YTD-fmo4>AoR@6;jrgQs=D<Id>(%puY(s9#O53(8f!gi.>a'QIJmH"UR:*3D\-TD6]>hJkAFod>p);Jfl<:$r/>'!-"^m<^)XUAF''\J^:>[<s4&,8ROUn?5UrA'U[e1%<&l<s4.U2lS65!Tge6Yk^$TOC0I6=^J>IGiTDQHj0J!]&SsNi<k-'mM3q58>,JYK+DG'RO*jM76G3.NUq29S>*"-r+dE17f%?ccB%4n_79OjT44G*ibjIe$T67Q.a_(IH`g)[9,D(UQMS,t'#tL4C5?1fcb9%g>[H*\Es*8-pXiVT702/2"5@F9S$DEH?RDWt80slT24B%+41/k72a-WT*R"tXc(PLI-W%>H4f&%(m[=D;K)$Un(>9UklH"5")8t_4lIMOP&R$6D%kq2L^L/^"h#b]8l4]R2Mg%j9o#(Ag&;jU%jq?S^CN%<%$8kFqM!qO2Z(_`^:=_MHLN(VK<.+@@.j8okN1FE$HG@o7\T1-`./4j=&Y)CmGDPbPZ=KSqSId8oL;_sE[,GSXiXm`g%]XK--PECr[=AiKI,Y]/-rR.6_S2"FIgL00V)f1UN<H%jO=TauPP?$l15'_M6hoeIO':ZK"a)WRNPF1r=ra:-8D$sU2Dh^p8gJlBn%*uR<YGdluoW%5Zl[t"8e:sC5h%\9S!irrYk?u:t"o$h$D==FuSQ/P=Tb+#@lAFPn]`@DM%6?jFAFF-IM@d3&_#I(6b=F9"k2D689%[:Vf.pB61RUJn*;jLW_Z02%PJggq`9GIpT=X`00I\UD:qHXNn\097o,FZMW`b`iTVi]`>E2$K>n*"I#fr&&+X$aq+fpoH+l/O:II%lMQ[%E=Z#7oeOHNUTrF'C0qMJ/ni0T/jdYNo][69<%QAS^?O7*lc'f::rN7Kf*t)UY&ZS_)K*A^hS:0F.)PJ<=sC<ihNg>f'n!Fn%NX*q?/8W>]h=99mHf6i8#!;@=+Z/Xf*FaX.qnb&Z_aK2[:mS'sSh]BWD/R4W?hHfTbs5DhWuPGU:`\JJd(H!%\?u$;ja7,%jD+2Q%%=O<"_\qO$PSsoM=uq&*e+&+tM\L6cYW@#2QAH#%,LPRl3p#LK]"4)%+lAmb\t^O&a__;;e3F)`EI%"TrQOm/ApFLmr0-.^0KCUB%j(SB3/Df1h^%FLI\(g^H2MM3=!?d3cK8^'lS&mTn3b_!3DYjisY[^6Kp$`!@n,dYsH'j'L6&5UPNj[gQaQ39rDXoL:/Vm-*\O/q;%i78ae/imiGpi"d?TfDmX\P#-4[Bh&/<oR<MFoc(l\YVu,7]b4e..P<j7K6X<]qC]uG`MqK-XFgk,EbkIL^<0&-dcOVmXfQ*1V3:A%a?\#aA_K+tQ9`ttgZca!AQaC-1LI.#$Z_N<TtBdLFU!V6$bG('6J:=G4dOO7i][(YA'RlRQQnUXA=&H",t>D$2HLr/Ao'*ODNO"k%!ob<u$RC$LSLK^6]18!ARB,0M%Saoq,<K.Jb<8`fE"%rY;H1`@!7DI?m-Q+;0'_.PRN@I">s=s+WA,o0hsPVfPCb2acKb"C\-\o*%pMHcXhbYL#Qe/5M.6!Tcn+ZfJPc;)5NMhSCP*g+F6rTe=6[MCj+HfB7/1m.CVcZeenTif`P_2\B8bMmVXh3[sW%:*)4Mu3\/=WQ$%qE[_0>RjNspu_B2-+/K=0SEi:TjO'\#'T*s1.)6V"EE^8.E2m2cRXZ7nfNmBf:$,E5c(dFY`a$>chQ(#DV^#EY&$_=Qp"F?Z._i3%mVj)#;7)=3/umCMgJ2fB_BNgPc$$e<iG')*`qYpB6Hft(-@br4GN4>t/s;AD#aq;M=+0u&VFsX86&epELjiNBc!N8Uq$qW+WIkHM%H`e`4cJhFR=/sI40)RtI?AqFApWmd(nG_*.Ud[A>^><Mhg:%rc*-3V#VP$L#:6U!P*q>_Cjk=K!9T>hu_UOn>]fZV1b9ipH?GHW[%BmVdS+RJ,7_N94DSWRW=r'a/'V.<%7$H.XE%Q(cf6#+Ta6bFN[.!WOtW_-t&II@:U#g\<bW"[8oqP,$=_BWN%;Pq8b\sq]aYnWN9%dE.fULlAJ=?Rd\?)L<P\F1kZ_m!P;eN:Yqp21=h4;5(eBc"6X?@Y0?EeKak?<Q@pS%r%p%pUC$M>;0jMof@:U[pYBFQ,c1>.RS?/%ngh9ir&![.rC;XQ8r=3gl9STP4Rh*J>LX&*'kB;,(<Tu:"OoIgH>4nI,T-Gn#V:XF-0]!C8?>C6EjF=/:OsoqMgp2Z[sVD6Tk@N.%htB*#$X3n>#$7l+Qqp]$U5bj1YJGtR.PZ3?:JF-`S<g#<'tnA43O32P'G*9MiQHaE6MH6%n67DA4dMU$UKH`R:WpOohFlV8H$U#7%d-N7<HlpU5eh=Hf:pdF7TO6IAp[`IN8L]?lW;+<a<'5%T!n([]N:+'4/M:`q"p2;$:!s+'Rn>C/_]j%U\uJ2t6(b0W&^,;DaN[#!%g$W;T;KQf!C%=T,Dg\K5)fV\Y!?s4k$OX>8^9fZU*R1*S'!>[qE%kLPd[<TG,D"%/Z%'u(n^\>])Y"5<VQlB8_L*OS?DuK_?kr`b%&UrWn4>g2:L_JNqs64@iXN)(B$?=X[2D\[54D7@uk1l:Vk8IMMBMR0)Mp'UTe#(dIY5A:`9&[rE>)/Lb(8A1g;6[8>"mJnC@iA\@%\EsTq<a<W\$`IR`oo/t%h6B):+gQ2<[AF,eA>6-Qp:d5+iV=DsP/:6oP;nm-r4Z<)9Jo8M+eK^D3!H&maB9r5Ol7i^-kMK&(g+\#%F>*u_BI)X](H?$1Yc)qP[%`'J0Uk#+6m]&)W%nE>;(5&mi,Qk:i3@RCE(AW]pi6)&Z34(8>*PQ7[,)JcH,nZ"H#]&oH)Qk4'XmPA%lqgP<s7X.$n15pC4dWcVCm<d7+0@FhhI^`ijau^ACKHTCJtHU4^egnVie_\nP%!3bAuPdCOptC-ktaY]+3jl-%_b;kXaf-,-LL=9%pU(qDpq&ZN!Bimd3=t)tj+]'^othqiT)Y#^ghtViNP.5Zm/_^O<Eq!=e8D=Z94sPeI<UMe*k,oJ7=0MPI1o0]jed-5FXt2]$/b'i%H#eP=X"CBdnp>4@-@t4"5dVrR0^r!M3+=QY.[b$jIN2uYR*J3$2;efIGlgT*T;GMm.>GcE@UM^=Q6K"tXc7>!=6N%Gm&_g!Y$HO?%%=!Bi]=T:<YZWBas5(LN]j6Ag2N74Fr&3b$3$;66TlLFZfQ#UP/723(g_^iul.3!,cQ?G?3=X(_+VXKSU7d;LL)(,j;W##p0emB-%*QAApc\%KlpuhdhR(][5X$a"[/mn&6G@&qneG(t/k;M`3=nnr$`RPG9?oZc'l1aF?q`sV4&rH`h_srG\3YFg:O!?Ec\SGG`D(9W!%S6l$L9r73bPgiG=rlWTB@A+@sSFf^)>fPhcT4H7;&@!k#&ko-V')`\l5:K,r)1(-8l<2Es^g<<ko.DB]3?j+GF%<o4ml^e[*H^YQ%b*bCm)%LTK`PmkC0[3X".7EaF-n5f7.C71goF<&QVeq5@.]PQnEG(bje."/jSP45Q!6.mKWj*ZCVhf>aYSIn=/>JUMkW7]G8-tjm%OV&O96JI<iG']G@=4B%?p;oh#/=A-#7tS?Ai%4i%EV9Pt;pQUb/ZtRl\5=g>cCRsjb\@Q1]%3;gMLHP6QR5[J/8sHD%XW2h/RXNp%ld0oEZA<^8TLuGaK17[:^WsfZZ]E4cL',SL\-J?)fonTX:n9!E*iB>Zhd\086$faGe4;Jk5t(B462q85_S_Mdf?SFQ3-36rMjo@V%d+Lg[jIenJ-qoCb,/E_MJ."iOEK3Ge.23qR+T5KkJ#-`<n::`l*UTW_U<B>6Bn=+YUfHhRB\b6M]/1&n!Ttb<Z%qp-`ddHTei8[O%>"#S?X7)6WRW+9C_[6s.H][hZD=?-:rHa-fO3;K*/Wifk.Y+lR>X*Td+ppq?*k)OQiURd]K4OCd_9O<fb&bF:U2M\opge,I_HAH6%3"Y"ZqERuqC-!*($8ZN1<+?UTj1((8g,9o3lV-rQPOu(O'Lsp,qkF92)_-e-bW5&AeW%Y5CuohDLB=C/D#QiDgY=:D-(%.)G@2MT%5B7"Io\/4)`\I6^8<1+tM!?$)K0O1W%MV'8#>OhaisN^)7DC^UU^U4:^<Xt=.chX5B-4Ad&IBFsGDdnBdnPT!=c?Buc0uE3c\b_9%rZ/una.6$..i'5.!R8/M+"d.gbNWG$ri;USc;,3(+lIrnHpjO/G#*WKJpH\=hrZGqGR=Leo<+\(H84pXD!9DYF^T@F]ZCpa\\Vf$%H].3IcP^QN!Z\Q._t[Xgo=0P,#JcQG]\d/-`u,R%+ru7%"Q2^VpECfj*:lQpV?qe1'>Y'$KE,C)@B!a@bGt[e+b;o'.=o&9*9p?V%mTh(mq]pO2&c_3@pJbDp=H3MMa#d7;[-h@9_3?kmHiC6%UH^Qo0YYaNAW6cKa'E?(@7%36Mo0P$N.N+h`Hb7kf88M2/5)Wq/I!&k%EKFq;DZqL-&q3jL9.hWNkFJh]fQa$Dq$9`J7)cipJamP.3p$=\;N"5g7,-u\`pA<-5sQ\orLD8Z/K2@*P-%._=7Z`-#t[;bE!22j%-""2k'&1F07e2fVHj%C-[9)8"YbRAt44FcDF_WUV*Ql/iFuB'bK!2B<]%&m5*f7;1l\*_3AA/a`@@;c:oZMI!1+^[j)gfq'?N`m`%/c,'fK\A2OIMKCs`N0UI8sC`I8TaTfb`^<(.q<'rYTF=?">S]l2G)qmZFZCeNdlLb8,U4gPH=,E]_886aZ2lU<Ki15-JY>WA:mIX%#I\sm\!N&5(0pg<*01C`+\J*(D"+o+"UJDeHY50XC.R0A:,%"$M?h4*KGkn?gGW^mE_d23_FcC!qMJrG<O?mEY=u6lWpeF2$]k`)%WiGdWS4;s&R6Yni@?K?;]>a=HWH1mf;X\\5.D0Yo"_)n3*oWT#T):)MAbKf^Y,D-I4%#]4QAO(;KR<rPn"1`)o0G1)qYiQ.Z.sk+%)'+3eg&Gb"DI<k'CD#Z*BI`j(+o>h2mgqDd@4#eJFL[/lcjGQk^FVFrW3'`)1seHtFWomW;bL>g1A-Z78`iC7@1QMM1@Yj[;:CD+%'S1+`U(^e[q#ap+TAM84$:5!fZoj%bA%G#Z.\]2+XMiD^._<e-Dg[Y5R0X]o!`\<:,Gk6#XufIK9/1aXr`YSn\a\V'+p4A'PtFq^%'cjdsg2o`hOhoFbB`?#4]82nJ_s2$',Cf2f.(!;m=k]<i3RJom%mX(>bI#0mR"eMaY1?E#2'gAuOZp8bi@)'=KuQWP:1:I"#sR'_%k-t3@5)^jU$NiPpdud$I>t"TsRiHH#:E5+5+nn&@k0O,=$[[Q^Hk!bO?$E,7Ce,AY:]G6.EDI5]($V6_b`aReXhbFV@u32D)9fWH%jnM7:'8t<Odc!Vq,68K_e+nA4;1oSWl7Km4h)a]SoQp_`Rp"WWP2pIT1F$VLIN:+i#/`k\PWRbDLRdj]*HX$AR<a.$lZd#Rkh?sK%aR9=4UMm40VGD#\GaEH:lrK@Eo@5.ZEo($T79.o*bbR66E=N*A(lH,;cN$@;-0)Md+k)d+*?%&a/2O(s(eAql\bLM-Zgee@<:9:P%`\K`+[4nQ?[a^2cBNMV"9aEC8Sq%T]e-N`"!7Y^RQ1hKtErA"8eki,ORcTTN72F#'<DnUo3"cN(X7XfV/iji?U"6$OKBV#Ni\5d&%*APM$O$!ic\iK1^;l9H;__QD@OY>ZlP`T!0.%WCunkrQjarQ5?U$ID).sLaaJqtSe.2j>0k>ETH%8AWmJ*Z^]1Fhp2/LSHX=Z?]4%=:*%44ea.>R/OMX<Q-2.fb)[%G)pf:pa,PL__8sT6k(*OMT]\12n3ba8"N(G1p\RQLPBY9hQoWKJJPdPW-jN&C??uUCT^*u6S)'[%)u^f;U<.,sG*e2@Sm(AdEX#NSJIQl<R?jt2N,Y7"O$,2)M9#\c>@[SMeFiE*?^CHBK$9L_EXBB<,Ho:V>HB/mD#3u!C%86.$*h#.%o_LnWAEmR;1gB;F;7DTAo6uie\\,uo'2rm$(qm=q=,,^OgcQWC5JscYqsgo36W//idcV:#=&.u@N[3>mlJF'l*HiAE@XbeG1)RP.%U,J5>A0"Br9j/=^PSEu)8T/<>#^FYWYJgg)SicX+H3+u#4(Q*3"UIo1V=lP53ll>G;R.[XZ<ViS]4NW`R7qQOdI2DX19T6Q3tIc3%a&(Mlc9&cp.MAh!29+(7.H(c\)7DOE=/:-fe9UfH6FI@UO;EYXJ@$``G)Lp$TB)MmmUDE?,Q[/CceToip)uN4gJABgm=9mt$#11m%l'44`]i[B7V#gQtB^OP1%9O!dlRF?;$>)W/)sXS;EtV#,Wk)tK*!91<E'gjLRB!4'.<ePTYq!OT;F$X29KIsl4bWrnDEYrUW[W4h%?eqr-.t".OZHaSjq:K`kagSBo'sPg6qWedp.JqWWRh=i[j[HT7WrA-jM"Xk#npY+8o^j@D@l6dE!Dan^F/2$tq1Op=pOEc)klSRH%F8iQA2KEZ"!O4P'0#PhB(i52gmN"4/QV&2h=M6-hWPM8o7i(/@hlOU$bm!0G-]I)A)"JnV6nu"mK+&2uS]<\70OuI?$X(8s`Ojo8%-c$!<E@0>a<'Yam-Nif;To1'o-14^cp+VuD!F^d_q1YNmmD``58'pd4Eap#R+WSLWBp)%N8sT$'S$jh2Ueq(*l^g1N[4B`SF0\-N%>!Ciq.+cXm!N,2lpbQRR&tHXg0dLP/PHV#;%-3]AJ]dj;bsqs8EaHM.T0\23p=KnOI&^r7:Mc>A&<;hb*L=A#3SC"9D`[R3@krqN%+"oN;Za.(L;Y-A=BcUIHGi%$alAY$Kr]\t>l%nce3a(`F_XuR1pSb>>RSN9iZA)Id8]g)n>T:kjZ:OI'9U]JL40ulP297e@be)j\%?9)E9RC-`W5;QYO+.$.N<8&A'PtqGm;W>oXV!p]oEfXT3P.tLtfI?FXSg[pX/W#usd_aRdD9Q`d5o#T+4c<Ukl@n(p.i7IRd],HF%hjC4cfFeu>NM&PQ9>p/Dn)S:ZZ/4pdn;h;9+n&jp.Rrd[b<a[6EiPDia;!.+Nn]'\:lIShWf822V1h]]<`YBl":8/>9ertF0eEPD%JR(l2CKMkoS/&Nkf*dM.Pc1gVQq$$&8a#9)TQ]kV1;Pg#[/^ec4L5]=dL(1<n&/VeJd\C[a>l`un9C\"9"QS9U9oY^?4n\aFstk6%$@"%H8r?q*#H5_7IW^TP[+6t]gG*WW64-gCOEFH<gI'%&:eKJ'\0k2aiu[R]U#KRKC70WO9,q%DJ\TPUe;A,jFpbQrRt_\T2-3jq%mgk,iP=/d9j!-$nMQ:mIQ6&?$m32U';S+3OL9URnXAuDnZAtr(V[B`G[fk\X0NSV"B8tgemb_4[;_`Y7iMH&1M6mVIi0i"UR!+hB%"<UBd;PG;k:5=7Tr(0Z)938,nBh8gq;I_%dS:P^bDl8dsJWC&ch+2N4>t>aR/OBMe13)[\l4aG,6j[-2fGr8J,r8nEM<*u6Xj.IJ%!!+g68m7BG=.mP>LFI^<?#=T"f3&>k,,k+[(N#kLVYHpaP[`m*XB`gc!I#@SeB;Z.ij6Bm,Vpb(-d,FUhdjakjZu'73Y:&IPXq#2%W):3%@Fj[j7MLTdafM["&31tR#:(J:M\.8147S18DN8+u@XSm,ZPa\bc[`@b%_uJ8m<I?7SWZ(ALZZs]N*L?R\QC`!IU"[R=*oR^%ZU4%S@c0jXlAO"\GDi`k,jo63:@h\l`4,C*+:O`np@@nGn`CZYNbt(Vb"q?]J_7qs1K5BXl"Wc`/Tl-r"HFCRTYW]\<hKN*T0.,!%"gMubr,jJRMR*WQQ#oFU6VT;bms=E6j<[47UcVF\5rOABqf$`#qOV%HRi_l;4&sVKJKU;LB@.4QdL&9tK+<<`N;cJ<pu+I_Kd3G0%$QQ=l+%\h!Vpc/uQI-7El&.=K7Ds.9e#2h1&L/(FBcK_sZ`Hlr5p097F&tc@Fp4^u3)tmbBh&K8)7'?R1E5h&bXNA'ML)d)[e+>W%XL8kEVa55Q94>0#@UFC'($-I6ZXXk2;$l(m3ENMjHC:fT`f!b$o&\/-Z-3:(Ld1%9I+iakdDCcp/^WLc(Z*d(0MMX-K7L:pg[;q0%K&Gb``//L3ZLl3a=Pk]32\%Y*qtqu75=OGS#`#`H.Xo@bbkVr8!hmQKJp\Kk5QpY:NT9=in)KQ7K9s=jaunOZnKh&p)<o]/`7;K#%N5;R3dQj%TNA<2T)KSo`,p@FPo8PGN-'L6i4nc(-Rofd:Va?\`n;EBrQW:b;o?=$hrkLH%J4Td7/#JW$"KY&LZ?pX'^KFpV#-3o5%5Xd$*`3pDZd*dh4\bH:DlWR.#X<,:R'l.YP[!6hr3E>cSP\Gm=\S<@1J;n%5_a)G$G/>iZc#[>7V`LQ0CD4Gr:1?U?+j-g-R'tT"%0#"?nZb=Qb@22&i>]K<eEWFE.k69dMPZU_afH?n?Ut.C1P68/lcTkYnoTY6?$:7l61,`DbNWOA!,Mj)n9C3WGq`SK'$I]Ic8fbsQ%`?*tjdqDXj;e'.hNk"H(2BtL38ot4s3^?`leQ=.[iW[d.8d0AiKhrm8R4];'?Y>X>;=LZZ`QUmkF75"Y4qX*5]PUgl:F!"bgJK_,%fXU?i/PJPlolgulh,,V/Y?`kQ`dDNOF`nU;Wi?u<90L<1]')@/Mp7s&Qn];+a^0#O$X>1-]Q8*SZM'q!_V`[aD'CoZq=H?pMpnA!%,B6rSo+L]^#c&Fm)]hnJTT;eEA`TF@-a;/&[o'Ds2FP.dh,oRFN#oIiECl(/dqFqm>pba0!DD`iOK^:uLK'!p96/S<4bBQr)Q"F_%@aTe48Hn\a<AES]#rV\$-eusddEi,b+GBeln(28#"B7]:o9+VVqO[stph?Ln0(;>nZAPp7N'0b2oBfMRZdune]Dle9#V'S`cPN@X%)[&Y&=Zb(#,\XpHF;k1k+3uV?l<jS^?iNbe,k.!m@lV_O_;PKjg/._l?D-5?"bP$=9@MnLXk?5ZOQ*kp7$a,`<5&\ie*D/-'GCjl%$gJ#ES[:u!lgLrLD@Y+q8CG/]!^e,CC1D/VH[Kc6%=J>D2V/IW)uAY@).8Fq]Hc-IOpe):6o@hiT]_R4H<C=YMPb^413gGn'\L10%;([:tG<c)rDuW3)Dh%YFs8DoBs7a";r6=-spqn3Qe"?[!\,ZAm5QB(0p"Ni&r51c!q6.R3o&kN#a+*rP5QAoFs82+H^\kuVIf&;X%q5;"*p<,]#O+7!jZ@#r@5QAVCrq8SUq]GhK$UgSl~>%AI9_PrivateDataEnd